#!/bin/sh -x

############################################################################
#
# MODULE:       i.despeckle
# AUTHOR(S):    Markus Neteler, Maning Sambale (Environmental Science for Social Change)
# PURPOSE:      FGAMMA -- Gamma SAR Speckle Filter, based on
#               http://web.archive.org/web/20050826071553/http://www.pcigeomatics.com/cgi-bin/pcihlp/M_FGAMMA
#               http://web.archive.org/web/20050425160834/http://www.pcigeomatics.com/cgi-bin/pcihlp/M_FLE
#               http://web.archive.org/web/20071216181051/http://www.pcigeomatics.com/cgi-bin/pcihlp/FELEE
#               web.archive.org/web/20050425104814/http://www.pcigeomatics.com/cgi-bin/pcihlp/M_FKUAN
#               http://web.archive.org/web/20071216081728/http://www.pcigeomatics.com/cgi-bin/pcihlp/FFROST
#               http://web.archive.org/web/20071216181046/http://www.pcigeomatics.com/cgi-bin/pcihlp/FEFROST
#
#               List: http://web.archive.org/web/20060721084141/http://www.pcigeomatics.com/cgi-bin/searchhlp.pl
#
# COPYRIGHT:    (C) 2012 GRASS Development Team/Markus Neteler/Maning Sambale
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
############################################################################
#%Module
#% description: Applies SAR Speckle Filter to a raster power map.
#% keywords: imagery, filter, despeckle
#%End
#%Option
#% key: input
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Name of input raster power map
#% gisprompt: old,cell,raster
#%End
#%Option
#% key: output
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Name for output raster map
#% gisprompt: new,cell,raster
#%End
#%Option
#% key: method
#% type: string
#% required: yes
#% multiple: no
#% options: gamma,lee,kuan,elee
#% description: Despeckle operation
#% answer: gamma
#%End
#%Option
#% key: size
#% type: integer
#% required: no
#% multiple: no
#% description: Neighborhood size
#% answer: 3
#%End
#%Option
#% key: looks
#% type: integer
#% required: no
#% multiple: no
#% description: Number of looks (0 <= x <= 100)
#% answer: 1
#%End
#%Option
#% key: dfactor
#% type: real
#% required: no
#% multiple: no
#% description: Damping factor (0.0 <= x <= 10.0)
#% answer: 1.0
#%End




if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

if [ $# -lt 1 -o "$1" = "help" -o "$1" = "-help"  -o "$1" = "-h" ] ; then
  echo "Usage: $0 sar_map"
  exit 1
fi


MAP=$GIS_OPT_INPUT
WIN=$GIS_OPT_SIZE
NumberLooks=$GIS_OPT_LOOKS # controls the amount of smoothing applied to image 
OUTPUT=$GIS_OPT_OUTPUT
METHOD=$GIS_OPT_METHOD
DFACTOR=$GIS_OPT_DFACTOR 

#########################

# S   =   standard deviation of intensity within window   
r.neighbors in=$MAP out=$MAP.stddev method=stddev size=$WIN

# Im  =   mean value of intensity within window
r.neighbors in=$MAP out=$MAP.mean method=average size=$WIN

# Ci  =   S / Im
r.mapcalc "$MAP.ci = float($MAP.stddev) / float($MAP.mean)"

# Cu  =   SQRT(1/NumberLooks)
Cu="`echo $NumberLooks | awk '{printf "%f", sqrt(1.0/$1)}'`"

######################

if [ $METHOD == "lee" ]
then
  # A 7x7 filter usually gives the best results
  #
  # Note: Lee filter model requires that the signal represents power.
  # If the input image is in amplitude format, each grey level must be
  # squared to derive power and finally square root must be applied to
  # the filtered result. 
  echo "Processing with LEE filter"

  # W   =   1 - Cu^2/Ci^2 
  r.mapcalc "$MAP.W = 1.0 - ($Cu^2/$MAP.ci^2)"

  # R  =   Ic * W + Im * (1 - W)  
  # Ic  =   center pixel in filter window
  r.mapcalc "$OUTPUT = $MAP * $MAP.W + $MAP.mean * (1.0 - $MAP.W)"

  g.remove --q rast=$MAP.mean,$MAP.stddev,$MAP.ci,$MAP.W
fi

if [ $METHOD == "kuan" ]
then
  echo "Processing with KUAN filter"
  # A 7x7 filter usually gives the best results
  #
  # Note: KUAN filter model requires that the signal represents power.

  # W   =   (1 - Cu^2/Ci^2)/(1+Cu^2) 
  r.mapcalc "$MAP.W = (1.0 - $Cu^2/$MAP.ci^2) / (1.0 + $Cu^2)"

  # R  =   Ic * W + Im * (1 - W)
  # Ic  =   center pixel in filter window
  r.mapcalc "$OUTPUT = $MAP * $MAP.W + $MAP.mean * (1.0 - $MAP.W)"

  g.remove --q rast=$MAP.mean,$MAP.stddev,$MAP.ci,$MAP.W

fi

if [ $METHOD == "gamma" ]
then
  echo "Processing with GAMMA filter"
  # A 7x7 filter usually gives the best results
  #
  # Note: GAMMA filter model requires that the signal represents power.

  # Cmax =  SQRT(2)*Cu
  Cmax="`echo $Cu | awk '{printf "%f", sqrt(2.0) * $1}'`"

  # A   =   (1+Cu^2)/(Ci^2-Cu^2)
  r.mapcalc "$MAP.A = (1.0 + $Cu^2)/($MAP.ci^2 - $Cu^2)"

  # B   =   A-NumberLooks-1
  r.mapcalc "$MAP.B = $MAP.A - $NumberLooks - 1"

  # D   =   Im*Im*B*B + 4*A*NumberLooks*Im*Ic
  # Ic  =   center pixel in filter window
  r.mapcalc "$MAP.D = $MAP.mean * $MAP.mean * $MAP.B * $MAP.B + 4 * $MAP.A * \\
      $NumberLooks * $MAP.mean * $MAP"

  # Rf  =   (B*Im + SQRT(D))/(2*A)
  r.mapcalc "$MAP.rf = ($MAP.B * $MAP.mean + sqrt($MAP.D)) / (2 * $MAP.A)"
  
  # R1   =   Im      for Ci <= Cu
  # R2   =   Rf      for Cu < Ci < Cmax
  # R3   =   Ic      for Ci >= Cmax
  r.mapcalc "$OUTPUT = eval(r1 = $MAP.mean, r2 = $MAP.rf, r3 = $MAP, \\
       if($MAP.ci < $Cu, r1, \\
         if($MAP.ci > $Cu && $MAP.ci < $Cmax, r2, \\
           if($MAP.ci > $Cmax, r3, null() ) \\
         ) \\
       ))"

  g.remove --q rast=$MAP.mean,$MAP.stddev,$MAP.rf,$MAP.ci,$MAP.A,$MAP.B,$MAP.D
  
fi

###

if [ $METHOD == "elee" ]
then
  echo "Processing with Enhanced LEE filter"

  # A 7x7 filter usually gives the best results.
 
  # Cmax =  SQRT(1+2/NumberLooks)
  Cmax="`echo $Cu | awk '{printf "%f", sqrt((1+2) * $1)}'`"

  # W   =   exp (-DampFactor (Ci-Cu)/(Cmax - Ci))
  r.mapcalc "$MAP.W = exp (((-1 * $DFACTOR) * ($MAP.Ci - $Cu)) / ($Cmax - $MAP.Ci))"

  # Rf  =   Im * W + Ic * (1-W)
  r.mapcalc "$MAP.rf = $MAP.mean * $MAP.W + $MAP * (1 - $MAP.W)"

  # R = Im                  for Ci <= Cu
  # Rf = Im * W + Ic * (1-W) for Cu < Ci < Cmax
  # R = Ic                  for Ci >= Cmax
 
 r.mapcalc "$OUTPUT = eval(r1 = $MAP.mean, r2 = $MAP.rf, r3 = $MAP, \\
       if($MAP.ci <= $Cu, r1, \\
         if($MAP.ci > $Cu && $MAP.ci < $Cmax, r2, \\
           if($MAP.ci >= $Cmax, r3, null() ) \\
         ) \\
       ))"

  g.remove --q rast=$MAP.mean,$MAP.stddev,$MAP.rf,$MAP.ci,$MAP.W
  
fi

####################

r.colors $OUTPUT col=grey -e
r.support map=$OUTPUT description="generated by i.descpeckle using $METHOD filter."
echo "Written <$OUTPUT>"
