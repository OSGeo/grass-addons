/****************************************************************************
 *
 * MODULE:       r.example
 * AUTHOR(S):    Markus Neteler - neteler@itc.it
 *               with hints from: Glynn Clements - glynn.clements@virgin.net
 * PURPOSE:      Just copies a raster map, preserving the raster file type
 *               Intended to explain GRASS raster programming
 *
 * COPYRIGHT:    (C) 2002 by the GRASS Development Team
 *
 *               This program is free software under the GNU General Public
 *   	    	 License (>=v2). Read the file COPYING that comes with GRASS
 *   	    	 for details.
 *
 *****************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "gis.h"


#define MAXFILES 52
#define NVAR 5

extern CELL  f_c(CELL);
extern FCELL f_f(FCELL);
extern DCELL f_d(DCELL);

CELL c_calc(CELL x)
{
	/* satellite ETa is in mm/day, swapETa in cm/day */
	/* This converts sat ETa to cm/day */
	return ((int) (x*0.1));
}

FCELL f_calc(FCELL x)
{
	return (x*0.1);
}

DCELL d_calc(DCELL x)
{
	return (x*0.1);
}


int
main(int argc, char *argv[])
{
	struct GModule *module;
	struct
	{
	struct Option *input1, *input2, *input3, *input4, *input5, *output1, *output2, *output3, *output4, *output5, *output6;
	} param;
	struct Cell_head cellhd;
	struct Flag *flag1;
	char *name, *mapset;
	int nrows, ncols;
	int row,col;
	int verbose;
	/************************************/
	/* FMEO Declarations*****************/
	int nfiles=MAXFILES;
	int infd[nfiles], infd_psand, infd_psilt, infd_pclay, infd_pomat;
	int outfd[NVAR+1];
	char **names;
	char **ptr;
	char *psand,*psilt,*pclay,*pomat;
	char *result[NVAR+1], *output[NVAR+1];
	int ok;
	int i=0,j=0;
	
	void *inrast[nfiles];
	void *inrast_psand, *inrast_psilt, *inrast_pclay, *inrast_pomat;
	unsigned char *outrast[NVAR+1];
	RASTER_MAP_TYPE data_type[nfiles];
	RASTER_MAP_TYPE data_type_psand;
	RASTER_MAP_TYPE data_type_psilt;
	RASTER_MAP_TYPE data_type_pclay;
	RASTER_MAP_TYPE data_type_pomat;
	FILE *satFile;
	FILE *swapFile;
	FILE *soilFile;
	FILE *satDates;
	char *dates;
	char date;
	char *fileName;
#define fileNameLe 8
#define fileNamePosition 3

	/************************************/

	G_gisinit(argv[0]);

	module = G_define_module();
	module->description =
		"GRASS raster programming example.";

	/* Define the different options */

	param.input1 = G_define_option() ;
	param.input1->key        = "input";
	param.input1->type       = TYPE_STRING;
	param.input1->required   = YES;
	param.input1->multiple   = YES;
	param.input1->gisprompt  = "old,cell,raster" ;
	param.input1->description= "Names of satellite ETa layers" ;

	param.input2 = G_define_option() ;
	param.input2->key	   = "psand";
	param.input2->type       = TYPE_STRING;
	param.input2->required   = YES;
	param.input2->gisprompt  = "old,cell,raster" ;
	param.input2->description= "Name of the Soil sand fraction map [0.0-1.0]" ;

	param.input3 = G_define_option() ;
	param.input3->key        = "psilt";
	param.input3->type       = TYPE_STRING;
	param.input3->required   = YES;
	param.input3->gisprompt  = "old,cell,raster" ;
	param.input3->description= "Name of the Soil silt fraction map [0.0-1.0]" ;

	param.input4 = G_define_option() ;
	param.input4->key        = "pclay";
	param.input4->type       = TYPE_STRING;
	param.input4->required   = YES;
	param.input4->gisprompt  = "old,cell,raster" ;
	param.input4->description= "Name of the Soil clay fraction map [0.0-1.0]" ;

	param.input5 = G_define_option() ;
	param.input5->key        = "pomat";
	param.input5->type       = TYPE_STRING;
	param.input5->required   = YES;
	param.input5->gisprompt  = "old,cell,raster" ;
	param.input5->description= "Name of the Soil Organic Matter map [0.0-1.0]" ;

	param.output1 = G_define_option() ;
	param.output1->key        = "DEC";
	param.output1->type       = TYPE_STRING;
	param.output1->required   = YES;
/*	param.output->multiple   = YES; */
	param.output1->gisprompt  = "new,cell,raster" ;
	param.output1->description= "Name of an output DEC layer" ;

	param.output2 = G_define_option() ;
	param.output2->key        = "FEC";
	param.output2->type       = TYPE_STRING;
	param.output2->required   = YES;
	param.output2->gisprompt  = "new,cell,raster" ;
	param.output2->description= "Name of an output FEC layer" ;

	param.output3 = G_define_option() ;
	param.output3->key        = "STS";
	param.output3->type       = TYPE_STRING;
	param.output3->required   = YES;
	param.output3->gisprompt  = "new,cell,raster" ;
	param.output3->description= "Name of an output STS layer" ;

	param.output4 = G_define_option() ;
	param.output4->key        = "GWJan";
	param.output4->type       = TYPE_STRING;
	param.output4->required   = YES;
	param.output4->gisprompt  = "new,cell,raster" ;
	param.output4->description= "Name of the GW January output layer" ;

	param.output5 = G_define_option() ;
	param.output5->key        = "GWDec";
	param.output5->type       = TYPE_STRING;
	param.output5->required   = YES;
	param.output5->gisprompt  = "new,cell,raster" ;
	param.output5->description= "Name of the GW December output layer" ;

	param.output6 = G_define_option() ;
	param.output6->key        = "fitness";
	param.output6->type       = TYPE_STRING;
	param.output6->required   = YES;
	param.output6->gisprompt  = "new,cell,raster" ;
	param.output6->description= "Name of the fitness output layer" ;

	/* Define the different flags */

	flag1 = G_define_flag() ;
	flag1->key         = 'q' ;
	flag1->description = "Quiet" ;

	/* FMEO init nfiles */
	nfiles = 1;
	/********************/

	/********************/

	if (G_parser(argc, argv))
		exit (-1);

	ok = 1;
	names    = param.input1->answers;
	ptr      = param.input1->answers;
	psand	 = param.input2->answer;
	psilt	 = param.input3->answer;
	pclay	 = param.input4->answer;
	pomat	 = param.input5->answer;

	result[1]  = param.output1->answer;
	result[2]  = param.output2->answer;
	result[3]  = param.output3->answer;
	result[4]  = param.output4->answer;
	result[5]  = param.output5->answer;
	result[6]  = param.output6->answer;

	verbose = (! flag1->answer);

	/* Write satellite dates in the file satellite.dates */
	if ((satDates = fopen("satellite.del","w")) == NULL)
	{
		G_fatal_error (" Cannot open %s !", satDates);
	}
	/************************************************/

	printf("Passed Stage 1\n");
	
	
	for (; *ptr != NULL; ptr++)
	{

		printf("In-Loop Stage 1.\n");

		if (nfiles >= MAXFILES)
			G_fatal_error ("%s - too many ETa files. Only %d allowed", G_program_name(), MAXFILES);

		printf("In-Loop Stage 1..\n");

		name = *ptr;

		printf("In-Loop Stage 1...\n");
		
/*		fileName = *ptr;
		printf("file is %s\ncopy string...\n", fileName);	
		strncpy(dates,fileName+fileNamePosition,fileNameLe);
		date=atoi(dates);
		printf("file string is copied");
		fprintf(satDates,"%s\n", date);
*/

		
		/* find map in mapset */
		mapset = G_find_cell2 (name, "");
	        if (mapset == NULL)
		{
			G_fatal_error ("cell file [%s] not found", name);
			sleep(3);
			ok = 0;
		}
		
		printf("In-Loop Stage 1....\n");
		
	        for (i=1;i<NVAR+1;i++)
		{
			if (G_legal_filename (result[i]) < 0)
			{
				G_fatal_error ("[%s] is an illegal name", result);
				sleep(3);
				ok = 0;
			}
		}
		
		printf("In-Loop Stage 1.....\n");
		
		if (!ok)
			continue;
		
		printf("In-Loop Stage 1......\n");
		
		infd[nfiles] = G_open_cell_old (name, mapset);
		if (infd[nfiles] < 0)
		{
			ok = 0;
			continue;
		}

		printf("In-Loop Stage 1.......\n");

		
		/* Allocate input buffer */
		data_type[nfiles] = G_raster_map_type(name, mapset);
		printf("data_type[%i] = %i\n",nfiles,data_type[nfiles]);
		if((infd[nfiles] = G_open_cell_old(name,mapset))<0)
			G_fatal_error("Cannot open cell file [%s]", name);
		if(G_get_cellhd(name,mapset,&cellhd)<0)
			G_fatal_error("Cannot read file header of [%s]", name);
		inrast[nfiles] = G_allocate_raster_buf(data_type[nfiles]);

		printf("In-Loop Stage 1........\n");
		
		nfiles++;

		printf("In-Loop Stage 1.........\n");
	}

	nfiles--;

	printf("Passed Loop\n");

	if (nfiles <= 1)
		G_fatal_error("The min specified input map is two");

	/*****************************************************/
	
	(void)fclose(satDates);	
	printf("Passed Stage 2\n");
	
	/***************************************************/
	mapset = G_find_cell2 (psand, "");
	if (mapset == NULL) {
		G_fatal_error ("cell file [%s] not found", psand);
		sleep(3);
		ok=0;
	}
	data_type_psand = G_raster_map_type(psand,mapset);
	if ( (infd_psand = G_open_cell_old (psand,mapset)) < 0)
		G_fatal_error ("Cannot open cell file [%s]", psand);
	if (G_get_cellhd (psand, mapset, &cellhd) < 0)
		G_fatal_error ("Cannot read file header of [%s]", psand);
	inrast_psand = G_allocate_raster_buf(data_type_psand);
	/***************************************************/
	mapset = G_find_cell2 (psilt, "");
	if (mapset == NULL) {
		G_fatal_error ("cell file [%s] not found", psilt);
		sleep(3);
		ok=0;
	}
	data_type_psilt = G_raster_map_type(psilt,mapset);
	if ( (infd_psilt = G_open_cell_old (psilt,mapset)) < 0)
		G_fatal_error ("Cannot open cell file [%s]", psilt);
	if (G_get_cellhd (psilt, mapset, &cellhd) < 0)
		G_fatal_error ("Cannot read file header of [%s]", psilt);
	inrast_psilt = G_allocate_raster_buf(data_type_psilt);
	/***************************************************/
	mapset = G_find_cell2 (pclay, "");
	if (mapset == NULL) {
		G_fatal_error ("Cell file [%s] not found", pclay);
		sleep(3);
		ok=0;
	}
	data_type_pclay = G_raster_map_type(pclay,mapset);
	if ( (infd_pclay = G_open_cell_old (psilt,mapset)) < 0)
		G_fatal_error ("Cannot open cell file [%s]", pclay);
	if (G_get_cellhd (pclay, mapset, &cellhd) < 0)
		G_fatal_error ("Cannot read file header of [%s]", pclay);
	inrast_pclay = G_allocate_raster_buf(data_type_pclay);
	/***************************************************/
	mapset = G_find_cell2 (pomat, "");
	if (mapset == NULL) {
		G_fatal_error ("Cell file [%s] not found", pomat);
		sleep(3);
		ok=0;
	}
	data_type_pomat = G_raster_map_type(pomat,mapset);
	if ( (infd_pomat = G_open_cell_old (pomat,mapset)) < 0)
		G_fatal_error ("Cannot open cell file [%s]", pomat);
	if (G_get_cellhd (pomat, mapset, &cellhd) < 0)
		G_fatal_error ("Cannot read file header of [%s]", pomat);
	inrast_pomat = G_allocate_raster_buf(data_type_pomat);
	/***************************************************/
	/***************************************************/
	/* Allocate output buffer, use input map data_type */
	nrows = G_window_rows();
	ncols = G_window_cols();

	printf("Passed Stage 3\n");
	
	for (i=1;i<NVAR+2;i++)
	{
	outrast[i] = G_allocate_raster_buf(1);
	}

	printf("Passed Stage 4\n");
	
	/* FMEO *******************************************************/
/*	ew_res = cellhd.ew_res;
	ns_res = cellhd.ns_res;
*/	/**************************************************************/

	/* Create New raster files */
	for (i=1;i<NVAR+2;i++)
	{
	if ( (outfd[i] = G_open_raster_new (result[i],1)) < 0)
		G_fatal_error ("Could not open <%s>",result[i]);
	}

	printf("Passed Stage 5\n");
	
	/* Process pixels */
	for (row = 0; row < nrows; row++)
	{
		CELL c;
		FCELL f;
		DCELL d;
		CELL ce[NVAR+2];
		FCELL fe[NVAR+2];
		DCELL de[NVAR+2];
	

		printf("In-Loop Stage 5\n");
		
		if (verbose)
			G_percent (row, nrows, 2);
		
		printf("In-Loop Stage 5.\n");
		

		/* read input map !nfiles+1!*/
		for (i=1;i<nfiles+1;i++)
		{
			printf("i-->%i---\n",i);
			if (G_get_raster_row (infd[i],inrast[i],row,data_type[i]) < 0)
			G_fatal_error ("Could not read from <%s>",name);
		}

		printf("In-Loop Stage 5..\n");
		
		/*process the data */
		for (col=0; col < ncols; col++)
		{
/*			switch (data_type[1])
			{
			case CELL_TYPE:
				/* For my eyes only **************************/
/*				if((satFile=fopen("satellite.eta","w"))==NULL)
				{
					printf("Cannot open satellite.eta\n");
					exit(1);
				}
				printf("satellite.eta file opened in CELL\n");
				/************************************/
/*				for(j=1;j<nfiles+1;j++)
				{
				c = ((CELL *) inrast[j])[col];
				c = c_calc(c); /* convert to cm/day */
/*				fprintf(satFile,"%i \n",c);
				}
				fclose(satFile);
				/************************************/
/*				if((soilFile=fopen("soil.txt","w"))==NULL)
				{
					printf("Cannot open soil.txt\n");
					exit(1);
				}
				printf("Soil.txt opened in CELL\n");
				/************************************/
/*				c = ((CELL *) inrast_psand)[col];
				fprintf(soilFile,"%lf \n",c);
				c = ((CELL *) inrast_psilt)[col];
				fprintf(soilFile,"%lf \n",c);
				c = ((CELL *) inrast_pclay)[col];
				fprintf(soilFile,"%lf \n",c);
				c = ((CELL *) inrast_pomat)[col];
				fprintf(soilFile,"%lf \n",c);
				fclose(soilFile);
				/************************************/
/*				system("./gaswap");
				/************************************/
/*				if((swapFile=fopen("grass_cell.txt","r"))==NULL)
				{
					printf("Cannot open grass_cell.txt\n");
					exit(1);
				}
				for(j=1;j<NVAR+2;j++)
				{
				fscanf(swapFile,"%i",&ce[j]);
				((CELL *) outrast[j])[col] = ce[j];
				}
				fclose(swapFile);
				break;

			case FCELL_TYPE:
				/* For my eyes only **************************/
				if((satFile=fopen("satellite.eta","w"))==NULL)
				{
					printf("Cannot open satellite.eta\n");
					exit(1);
				}
				printf("satellite.eta file opened in FCELL\n");
				/************************************/
				if((soilFile=fopen("soil.txt","w"))==NULL)
				{
					printf("Cannot open soil.txt\n");
					exit(1);
				}
				printf("Soil.txt opened in CELL\n");
				/************************************/
				f = ((CELL *) inrast_psand)[col];
				fprintf(soilFile,"%lf \n",f);
				f = ((CELL *) inrast_psilt)[col];
				fprintf(soilFile,"%lf \n",f);
				f = ((CELL *) inrast_pclay)[col];
				fprintf(soilFile,"%lf \n",f);
				f = ((CELL *) inrast_pomat)[col];
				fprintf(soilFile,"%lf \n",f);
				fclose(soilFile);
				/************************************/
				for(j=1;j<nfiles+1;j++)
				{
				f = ((FCELL *) inrast[j])[col];
				f = f_calc(f); /* convert to cm/day */
				fprintf(satFile,"%5.3f \n",f);
				}
				fclose(satFile);
				system("./gaswap");
				/************************************/
				if((swapFile=fopen("grass_cell.txt","r"))==NULL)
				{
					printf("Cannot open grass_cell.txt\n");
					exit(1);
				}
				for (j=1;j<NVAR+2;j++)
				{
				fscanf(swapFile,"%f",&fe[j]);
				printf("%f\n",fe[j]);
				((FCELL *) outrast[j])[col] = fe[j];
				}
				fclose(swapFile);
				break;
/*
			case DCELL_TYPE:
				/* For my eyes only **************************/
/*				if((satFile=fopen("satellite.eta","w"))==NULL)
				{
					printf("Cannot open satellite.eta\n");
					exit(1);
				}
				printf("satellite.eta file opened in DCELL\n");
				/************************************/
/*				if((soilFile=fopen("soil.txt","w"))==NULL)
				{
					printf("Cannot open soil.txt\n");
					exit(1);
				}
				printf("Soil.txt opened in CELL\n");
				/************************************/
/*				d = ((CELL *) inrast_psand)[col];
				fprintf(soilFile,"%lf \n",d);
				d = ((CELL *) inrast_psilt)[col];
				fprintf(soilFile,"%lf \n",d);
				d = ((CELL *) inrast_pclay)[col];
				fprintf(soilFile,"%lf \n",d);
				d = ((CELL *) inrast_pomat)[col];
				fprintf(soilFile,"%lf \n",d);
				fclose(soilFile);
				/************************************/
/*				for (j=1;j<nfiles+1;j++)
				{
				d = ((DCELL *) inrast[j])[col];
				d = d_calc(d); /* convert to cm/day */
/*				fprintf(satFile,"%lf \n",d);
				}
				fclose(satFile);
				system("./gaswap");
				/************************************/
/*				if((swapFile=fopen("grass_cell.txt","r"))==NULL)
				{
					printf("Cannot open grass_cell.txt\n");
					exit(1);
				}
				for (j=1;j<NVAR+2;j++)
				{
				fscanf(swapFile,"%3.0f",&de[j]);
				((DCELL *) outrast[j])[col] = de[j];
				}
				fclose(swapFile);
				break;
			}*/
		}

		for (i=1;i<NVAR+2;i++)
		{
		if (G_put_raster_row (outfd[i], outrast[i], data_type[i]) < 0)
			G_fatal_error ("Cannot write to <%s>",result);
		}
	}

	for (i=1;i<nfiles+1;i++)
	{
	G_free (inrast[i]);
	G_close_cell (infd[i]);
	}

	G_free (inrast_psand);
	G_free (inrast_psilt);
	G_free (inrast_pclay);
	G_free (inrast_pomat);
	G_close_cell (infd_psand);
	G_close_cell (infd_psilt);
	G_close_cell (infd_pclay);
	G_close_cell (infd_pomat);
	
	for (i=1;i<NVAR+2;i++)
	{
		G_free (outrast[i]);
		G_close_cell (outfd[i]);
	}

	return 0;
}
