#!/bin/sh
############################################################################
#
# MODULE:       g.region.point
# AUTHOR:       Hamish Bowman, Dunedin, New Zealand
# PURPOSE:      Sets the region tightly at a fixed point (to speed up raster
#                 calcs around fixed points)
#
# COPYRIGHT:    (c) 2008 Hamish Bowman, and the GRASS Development Team
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: Sets the computational region at a fixed distance around a point.
#%  keywords: region
#%End
#%option
#%  key: coord
#%  type: double
#%  key_desc: x,y
#%  description: Coordinate at center of region 
#%  required: yes
#%end
#%option
#%  key: diameter
#%  type: double
#%  description: Region box diameter
#%  required: yes
#%end
#%option
#%  key: resolution
#%  type: double
#%  description: New map resolution to use
#%  required: no
#%end
#%flag
#%  key: p
#%  description: Print the new region bounds
#%end
#%flag
#%  key: g
#%  description: Print the new region bounds in shell script style
#%end
#%flag
#%  key: z
#%  label: Preserve bounds in case of bounds/resolution mismatch
#%  description: Requires resolution option; default is to preserve resolution and grow bounds outwards.
#%end


if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

#east
if [ `echo "$GIS_OPT_COORD" | cut -f1 -d, | grep -c ':'` -gt 0 ] ; then
   # convert lat/lon D:M:S to decimal
   COOR_DEG=`echo "$GIS_OPT_COORD" | cut -f1 -d, | cut -f1 -d':'`
   COOR_MIN=`echo "$GIS_OPT_COORD" | cut -f1 -d, | cut -f2 -d':'`
   COOR_SEC=`echo "$GIS_OPT_COORD" | cut -f1 -d, | cut -f3 -d':'`
   COOR_E=`echo $COOR_DEG $COOR_MIN $COOR_SEC | awk '{printf("%.15g", $1 + $2/60. + $3/3600.)}'`
else 
   COOR_E=`echo "$GIS_OPT_COORD" | cut -f1 -d,`
fi

#north
if [ `echo "$GIS_OPT_COORD" | cut -f2 -d, | grep -c ':'` -gt 0 ] ; then
   # convert lat/lon D:M:S to decimal
   COOR_DEG=`echo "$GIS_OPT_COORD" | cut -f2 -d, | cut -f1 -d':'`
   COOR_MIN=`echo "$GIS_OPT_COORD" | cut -f2 -d, | cut -f2 -d':'`
   COOR_SEC=`echo "$GIS_OPT_COORD" | cut -f2 -d, | cut -f3 -d':'`
   COOR_N=`echo $COOR_DEG $COOR_MIN $COOR_SEC | awk '{printf("%.15g", $1 + $2/60. + $3/3600.)}'`
else 
   COOR_N=`echo "$GIS_OPT_COORD" | cut -f2 -d,`
fi

#diameter
if [ `echo "$GIS_OPT_DIAMETER" | grep -c ':'` -gt 0 ] ; then
   # convert lat/lon D:M:S to decimal
   DIAM_DEG=`echo "$GIS_OPT_DIAMETER" | cut -f1 -d':'`
   DIAM_MIN=`echo "$GIS_OPT_DIAMETER" | cut -f2 -d':'`
   DIAM_SEC=`echo "$GIS_OPT_DIAMETER" | cut -f3 -d':'`
   DIAM=`echo $DIAM_DEG $DIAM_MIN $DIAM_SEC | awk '{printf("%.15g", $1 + $2/60. + $3/3600.)}'`
else
   DIAM="$GIS_OPT_DIAMETER"
fi


N=`awk "BEGIN {printf(\"%.15g\", $COOR_N + $DIAM)}"`
S=`awk "BEGIN {printf(\"%.15g\", $COOR_N - $DIAM)}"`
W=`awk "BEGIN {printf(\"%.15g\", $COOR_E - $DIAM)}"`
E=`awk "BEGIN {printf(\"%.15g\", $COOR_E + $DIAM)}"`



if [ "$GIS_FLAG_Z" -eq 1 ] ; then
   REG_ALIGN=""
else
   REG_ALIGN="-a"
fi
if [ -n "$GIS_OPT_RESOLUTION" ] ; then
   REG_RES="res=$GIS_OPT_RESOLUTION $REG_ALIGN"
else
   REG_RES=""
fi


if [ "$GIS_FLAG_P" -eq 1 ] ; then
   REG_PRINT="-p"
else
   REG_PRINT=""
fi
if [ "$GIS_FLAG_G" -eq 1 ] ; then
   REG_PRINT="-g"
fi


g.region n="$N" s="$S" w="$W" e="$E" $REG_RES $REG_PRINT

