#!/bin/sh

############################################################################
#
# MODULE:       db.join
# AUTHOR(S):    Markus Neteler
# PURPOSE:      Join a table into another table
# COPYRIGHT:    (C) 2009 by Markus Neteler and the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#% description: Allows to join a table into another table.
#% keywords: database, attribute table
#%End

#%option
#% key: table
#% type: string
#% key_desc : name
#% description: Table to join into
#% gisprompt: old_dbtable,dbtable,dbtable
#% required : yes
#%end

#%option
#% key: column
#% type: string
#% description: Join column in first table
#% required : yes
#% gisprompt: old_dbcolumn,dbcolumn,dbcolumn
#%end

#%option
#% key: otable
#% type: string
#% key_desc : name
#% description: Other table name
#% required : yes
#% gisprompt: old_dbtable,dbtable,dbtable
#%end

#%option
#% key: ocolumn
#% type: string
#% description: Join column in other table
#% required : yes
#% gisprompt: old_dbcolumn,dbcolumn,dbcolumn
#%end

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

driver=`db.connect -p | grep "^driver" | cut -d':' -f2`
if [ "$driver" = "dbf" ] ; then
   g.message -e "JOIN is not supported for tables stored in DBF format."
   exit 1
fi

COLLIST=`db.describe  -c "$GIS_OPT_TABLE" | grep '^Column ' | sed 's+ ++g' | cut -d':' -f2`
OCOLLIST=`db.describe  -c "$GIS_OPT_OTABLE" | grep '^Column ' | sed 's+ ++g' | cut -d':' -f2`
# heck, types may have white space
OCOLTYPES=`db.describe -c "$GIS_OPT_OTABLE" | grep '^Column ' | cut -d':' -f3 | tr -s ' ' '_' | tr '[:upper:]' '[:lower:]'`

i=1
for col in $OCOLLIST ; do
  CURRTYPE=`echo $OCOLTYPES | cut -d' ' -f$i | tr -s '_' ' '`
  AVOIDDUP=0
  # we cannot have the same column name twice
  for incol in $COLLIST ; do
      if [ "$col" = "$incol" ] ; then
         origcol=$col
         col=${col}b
         AVOIDDUP=1
      fi
  done
  echo "ALTER TABLE $GIS_OPT_TABLE ADD COLUMN $col $CURRTYPE" | db.execute
  if [ $? -ne 0 ] ; then
	g.message -e "Cannot continue."
	exit 1
  fi
  if [ $AVOIDDUP -eq 1 ] ; then
     echo "UPDATE $GIS_OPT_TABLE SET $col=(SELECT $origcol
          FROM $GIS_OPT_OTABLE WHERE $GIS_OPT_OTABLE.$GIS_OPT_OCOLUMN=$GIS_OPT_TABLE.$GIS_OPT_COLUMN);" | db.execute
  else
     echo "UPDATE $GIS_OPT_TABLE SET $col=(SELECT $col
           FROM $GIS_OPT_OTABLE WHERE $GIS_OPT_OTABLE.$GIS_OPT_OCOLUMN=$GIS_OPT_TABLE.$GIS_OPT_COLUMN);" | db.execute
  fi

  i=`expr $i + 1`
done

g.message message="Table <$GIS_OPT_OTABLE> JOINed into <$GIS_OPT_TABLE>"

exit 0
