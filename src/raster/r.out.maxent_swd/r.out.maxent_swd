#!/bin/sh 
# 
############################################################################ 
# 
# MODULE:       r.maxent.lambdas 
# AUTHOR(S):    Stefan Blumentrath <stefan dot blumentrath at nina dot no > 
# PURPOSE:      Produce a set of SWD file as input to MaxEnt 3.3.3e using r.stats.
#               
#               The SWD file format is a simple CSV-like file file format as
#               described in Elith et al. 2011. Generally it looks like:
#               
#               specie_name,X,Y,parameter_1,parameter_2,...
#               your_specie,1.1,1.1,1,1,...
#
#               The first column always contains the name of a species, followed by
#               two colums for the X- and Y-coordinates. Then each column 
#               represents one environmental parameter. In contrast to r.stats
#               only integer values are accepted to represent NO DATA.
#
#               A background SWD file is allways produced while specie output 
#               can be omitted.
# 
#               Multiple species can be processed, but each has to be in an
#               individual raster map. Map names of the maps containing the 
#               environmental parameters can be replaced by short names, 
#				that should be used in MaxEnt 3.3.3.e.
#
#               Results from MaxEnt can either be imported by r.in.xyz or
#               calculated from MaxEnt lambdas file using the script 
#               r.maxent.lambdas.
#
# 
# COPYRIGHT:    (C) 2011 by the Norwegian Institute for Nature Research 
#               http://www.nina.no
# 
#               This program is free software under the GNU General Public 
#               License (>=v2). Read the file COPYING that comes with GRASS 
#               for details. 
# 
############################################################################# 
#
# REQUIREMENTS:
# -
#%Module 
#% description: Exports map data as input to MaxEnt in SWD format 
#%End 
#
#%flag
#% key: b
#% description: Produce only background output
#% guisection: Specie(s)
#%end
#
#%flag
#% key: z
#% description: Zoom computational region to species data (may speed up processing)
#% guisection: Specie(s)
#%end
#
#%option
#% key: alias_input
#% type: string
#% description: File containg map and alias name(s) for environmental parameter(s)
#% required: no
#% multiple: no
#% gisprompt: old_file,file,input
#%end
#
#%option 
#% key: evp_maps
#% type: string
#% description: Environmental parameter map(s)
#% guisection: Environmental parameter
#% required : no
#% multiple : yes
#% gisprompt: old,cell,raster
#%end
# 
#%option 
#% key: alias_names
#% type: string
#% description: Alias names for environmental parameter
#% guisection: Environmental parameter
#% required : no
#%end
# 
#%option 
#% key: alias_output
#% type: string 
#% description: Save alias names for the environmental parameters to file
#% guisection: Environmental parameter
#% required : no
#% multiple: no
#% gisprompt: new_file,file,output
#%end 
#
#%option 
#% key: bgr_output
#% type: string 
#% description: Output SWD file for the environmental data of the background landscape
#% guisection: Background
#% required : no
#% multiple: no
#% gisprompt: new_file,file,output
#%end 
#
#%option 
#% key: bgr_mask
#% type: string
#% description: Map to be used as mask for the background landscape
#% guisection: Background
#% required : no
#% multiple: no
#% gisprompt: old,cell,raster
#%end
#
#%option 
#% key: specie_mask
#% type: string
#% description: Raster map(s) of specie occurence
#% guisection: Specie(s)
#% required : no
#% multiple : yes
#% gisprompt: old,cell,raster
#%end
# 
#%option 
#% key: specie_output
#% type: string 
#% description: Output SWD file for the specie(s) related environmental data 
#% guisection: Specie(s)
#% required : no
#% multiple: no
#% gisprompt: new_file,file,output
#%end 
#
#%option 
#% key: specie_name
#% type: string 
#% description: Alias-name(s) for species to be used in MaxEnt SWD file instead of map names, separated by comma (default: map names). 
#% guisection: Specie(s)
#% required : no
#%end 
#
#%Option
#% key: nv
#% type: integer
#% required: no
#% multiple: no
#% description: Integer representing NO DATA cell value (default: -9999)
#% guisection: Output formating
#% answer: -9999
#%end
#
#
ALIAS_INPUT=${GIS_OPT_ALIAS_INPUT}
EVP_MAPS=${GIS_OPT_EVP_MAPS}
ALIAS_NAMES=${GIS_OPT_ALIAS_NAMES}
ALIAS_OUTPUT=${GIS_OPT_ALIAS_OUTPUT}
#
BGR_OUTPUT=${GIS_OPT_BGR_OUTPUT}
BACKGROUND_MASK=${GIS_OPT_BGR_MASK}
#
FLAG_ONLY_BGR=${GIS_FLAG_B}
FLAG_ZOOM_SPECIE=${GIS_FLAG_Z}
SPECIE_MASK=${GIS_OPT_SPECIE_MASK}
SPECIE_NAME=${GIS_OPT_SPECIE_NAME}
SPECIE_OUTPUT=${GIS_OPT_SPECIE_OUTPUT}
#
NV=${GIS_OPT_NV}
#
#
#Check if script is started from within GRASS
if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi
#
#Start gui 
if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi
#
#Get Environment variables
eval `g.gisenv`
#
#Check if input variables for the environmental parameter(s) are set properly
if [ -z "$ALIAS_INPUT" -a -z "$EVP_MAPS" ] ; then
	g.message -e "You have to provide either an alias file or environmental parameter map(s)."
	exit 1
fi
#
if [ -n "$ALIAS_INPUT" ] ; then
	if [ -r "$ALIAS_INPUT" ] ; then
		g.message -v "Alias and map names are beeing read from file. Other input regarding environmental parameter(s) will be ignored..."
		parameter=$(cat "$ALIAS_INPUT" | cut -s -f2 -d',' | tr "\n" ' ' | tr '@' '#')
	else
		g.message -e "The file containing alias names does not exist or is not readable."
		exit 1
	fi
else
	parameter=$(echo "$EVP_MAPS" | tr ',' ' ' | tr '@' '#')
fi
#
#Check if environmental parameter map(s) exist
p_number=1
for p in $parameter
do
	#Check if parameter map file(s) exist
	map_name=$(echo $p | cut -f1 -d'#' | tr -d ' ')
	mapset_name=$(echo $p | cut -f2 -d'#' -s | tr -d ' ')
	if [ -z $mapset_name ] ; then
		mapset_name=$MAPSET
		eval `g.findfile element=cell file=${map_name} mapset=${mapset_name}`
		
		if [ -z "$name" ] ; then 
			mapset_name=PERMANENT
		fi
	fi
	#
	eval `g.findfile element=cell file=${map_name} mapset=${mapset_name}` 
	if [ -z "$name" ] ; then 
		g.message -e  "Could not find environmental parameter raster map ${map_name} in ${mapset_name}."
		exit 1
	fi
	#Build parameter header if necessary
	if [ -z "$ALIAS_INPUT" ] ; then
		if [ -z "$ALIAS_NAMES" ] ; then
			#Use map name(s) as header
			parameter_list="${parameter_list}",${name}
		else
			name=$(echo "$ALIAS_NAMES" | cut -f$p_number -d ',')
			parameter_list="${parameter_list}",${name}
			p_number=`expr ${p_number} + 1`
		fi
		if [ -n "$ALIAS_OUTPUT" ] ; then
			if [ -r "$ALIAS_OUTPUT" ] ; then
				rm "$ALIAS_OUTPUT"
			fi
			echo ${name},${p} >> "$ALIAS_OUTPUT"
		fi
	fi
done

if [ -n "$ALIAS_INPUT" ] ; then
	#Check input alias file
	if [ ! -r "$ALIAS_INPUT" ] ; then
		g.message -e  "Could not find file with alias names ${ALIAS_INPUT} or file is not readable."			
		exit 1
	else
		parameter_list_pre=$(cat "$ALIAS_INPUT" | cut -f1 -d',' | tr -d ' ' | tr "\n" ',' | sed 's/.$//')
		parameter_list=,"${parameter_list_pre}"
		EVP_MAPS=$(cat "$ALIAS_INPUT" | cut -f2 -d',' | tr -d ' ' | tr "\n" ',' | sed 's/.$//')
	fi
fi
#
parameter_names=$(echo "${parameter_list}" | sed 's/^,//g')
#
#Check if specie output is requested and produce it
if [ "${FLAG_ONLY_BGR}" -ne 1 ] ; then
	#Parse species input variables
	species=$(echo "$SPECIE_MASK" | tr ',' ' ')
	#
	#Check input data
	#
	#Check specie naming (if provided)
	if [ -n "$SPECIE_NAME" ] ; then
		specie_names=$(echo "$SPECIE_NAME" | tr ',' ' ')
		specie_number=$(echo "$species" | wc -w)
		specie_names_number=$(echo "$specie_names" | wc -w)
		#
		#Check if number of specie names is identically with number of specie maps
		if [ $specie_number -ne $specie_names_number ] ; then
			g.message -e "You must provide one name for each rastermap representing a specie."
			exit 1
		fi 
	fi
	#
	#Write header to specie output SWD file
	echo specie,X,Y,"${parameter_names}" > "$SPECIE_OUTPUT"
	#
	#Check if specie map(s) exist
	s_number=1
	for s in $species
	do
		#Check if specie mask files exist
		specie_map_name=$(echo $s | cut -f1 -d'#' | tr -d ' ')
		specie_mapset_name=$(echo $s | cut -f2 -d'#' -s | tr -d ' ')
		echo $specie_map_name
			if [ -z $specie_mapset_name ] ; then
				specie_mapset_name=$MAPSET
				eval `g.findfile element=cell file=${map_name} mapset=${mapset_name}`
		
				if [ -z "$name" ] ; then 
					specie_mapset_name=PERMANENT
				fi
			fi

		#
		eval `g.findfile element=cell file=${specie_map_name} mapset=${specie_mapset_name}` 
		if [ -z "$name" ] ; then 
			g.message -e  "Could not find specie map ${specie_map_name} in mapset ${specie_mapset_name}. Skipping..."
			s_number=`expr ${s_number} + 1`
			continue
		else
			if [ -n "$SPECIE_NAME" ] ; then
				s_name=$(echo "$SPECIE_NAME" | cut -f${s_number} -d',')
				s_number=`expr ${s_number} + 1`
				else
				s_name="$specie_map_name"
			fi
		fi
		#
		#Zoom region to match specie map if requested
		if [ "${FLAG_ZOOM_SPECIE}" -ne 0 ] ; then
			g.message -v "Zooming region to specie ${s_name}"
			g.region -u rast="${s}" zoom="${s}" save="${s_name}"
			WIND_OVERRIDE="${s_name}"
			export WIND_OVERRIDE
		fi
		#Check if a mask file allready exists
		eval `g.findfile element=cell file=MASK mapset=${MAPSET}` 
		if [ "$name" = MASK ] ; then 
			g.message -v "A mask allready exists. Renaming existing mask to old_MASK..."
			g.rename rast="MASK@${MAPSET}",old_MASK --q
		fi
		#
		#Apply specie mask
		r.mask -o input="${s}" --q
		#
		#Export data using r.stats
		g.message -v "Producing output for specie ${s_name}"
		r.stats -1 -g -N --verbose input="$EVP_MAPS" fs=',' nv=$NV | sed "s/^/${s_name},/g" >> "$SPECIE_OUTPUT"
		#		
		#Redo zoom region to match specie map if it had been requested
		if [ "${FLAG_ZOOM_SPECIE}" -ne 0 ] ; then
			unset WIND_OVERRIDE
			g.remove region="${s_name}" --q
		fi
		#Remove mask
		r.mask -r --q
	done
fi
#
#Write header to background output SWD file
echo bgr,X,Y,"${parameter_names}"  > "$BGR_OUTPUT"
#
#Process map data for background
#g.region -p --verbose region="$BACKGROUND_MASK"
#Check if a mask file allready exists
if [ -n "$BACKGROUND_MASK" ] ; then
	g.message -v "Using map $BACKGROUND_MASK as mask for the background landscape..."
	eval `g.findfile element=cell file=MASK mapset=${MAPSET}` 
	if [ "$name" = MASK ] ; then 
		g.message -v "A mask allready exists. Renaming existing mask to old_MASK..."
		g.rename rast=MASK@${MAPSET},old_MASK --q
	fi
	#
	#Apply mask
	r.mask -o input="${BACKGROUND_MASK}" --q
fi
#
#Export data using r.stats
g.message -v "Producing output for background landscape"
r.stats -1 -g -N --verbose input="$EVP_MAPS" fs=',' nv=$NV | sed 's/^/bgr,/g' >> "$BGR_OUTPUT"
#Remove mask
eval `g.findfile element=cell file=MASK mapset=${MAPSET}` 
if [ -n "$name" ] ; then 
	r.mask -r --q
fi
#
#Restore old mask if it existed
eval `g.findfile element=cell file=old_MASK mapset=${MAPSET}` 
if [ "$name" = old_MASK ] ; then 
	g.message -v "Restoring old mask..."
	g.rename rast=old_MASK,MASK --q
fi
