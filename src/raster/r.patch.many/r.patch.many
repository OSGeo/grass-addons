#!/bin/sh
############################################################################
#
# MODULE:       r.patch.many
# AUTHOR(S):    Hamish Bowman, Dunedin, New Zealand
# PURPOSE:      Parallelized version of r.patch. Output should be the same.
#
# COPYRIGHT:    (C) 2014 Hamish Bowman, and the GRASS Development Team
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
############################################################################

#
# Note: If regions are not overlapping you'll want to group nearby maps together.
#       It would be easy to do the same for 'r.series max=' etc.
# Todo: 'WIND_OVERRIDE + g.region zoom=(per core maps)' for each split
#

#%Module
#% label: Creates a composite raster map by using known category values from many map layers to fill in areas of "no data" in another map layer.
#% description: This script is a parallelized wrapper around r.patch.
#% keywords: raster, geometry
#%End
#%Flag
#% key: z
#% description: Use zero (0) for transparency instead of NULL
#%End
#%Option
#% key: input
#% type: string
#% required: yes
#% multiple: yes
#% key_desc: name
#% description: Name of raster maps to be patched together
#% gisprompt: old,cell,raster
#%End
#%Option
#% key: output
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Name for resultant raster map
#% gisprompt: new,cell,raster
#%End
#%Option
#% key: workers
#% type: integer
#% multiple: no
#% key_desc: value
#% description: Number of parallel sessions
#% options: 1-2048
#% answer: 4
#%End

if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi


#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    g.message -e "awk required, please install awk or gawk first"
    exit 1
fi

#### check if we have seq
if [ ! -x "`which seq`" ] ; then
    g.message -e "seq required, please install it first"
    exit 1
fi

#### trap ctrl-c so that we can clean up tmp
cleanup()
{
   ALL_IN=`g.mlist type=rast pattern=tmp.rpatchmany.$$.[1-9]* sep=,`
   g.mremove -f "$ALL_IN" --quiet
}
trap 'cleanup' 2 3 15



# set environment so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC


IN="$GIS_OPT_INPUT"
OUT="$GIS_OPT_OUTPUT"
WORKERS="$GIS_OPT_WORKERS"

if [ "$GIS_FLAG_Z" -eq 1 ] ; then
   Z_FLAG="-z"
else
   Z_FLAG=""
fi


NUM_MAPS=`echo "$IN" | tr ',' '\n' | wc -l`

MAPS_PER_CORE=`echo "$NUM_MAPS $WORKERS" | awk '
   function ceil(val) {
      return (val == int(val)) ? val : int(val)+1
   }
   {
      print ceil($1 / $2)
   }'`


ALL_IN=""
for CORE in `seq $WORKERS` ; do
   LO=`echo "$CORE $MAPS_PER_CORE" | awk '{print 1 + ($1 -1) * $2}'`
   HI=`echo "$CORE $MAPS_PER_CORE" | awk '{print $1 * $2}'`

   MAPS=`echo "$IN" | tr ',' '\n' | head -n "$HI" | tail -n "$MAPS_PER_CORE" | tr '\n' ',' | sed -e 's/,$//'`
   PATCH="tmp.rpatchmany.$$.$CORE"
   ALL_IN="$ALL_IN,$PATCH"

   r.patch $Z_FLAG input="$MAPS" output="$PATCH" &
done
wait


### final patch
ALL_IN=`echo $ALL_IN | sed -e 's/^,//'`
r.patch $Z_FLAG input="$ALL_IN" output="$OUT"

# remove temporary maps
cleanup
