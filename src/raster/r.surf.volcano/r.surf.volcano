#!/bin/sh
############################################################################
#
# MODULE:       r.surf.volcano
# AUTHOR:       M. Hamish Bowman, Dept. Marine Science, University of Otago
#			Dunedin, New Zealand
# PURPOSE:      Create an artificial surface resembling a seamount or cone volcano
#
# COPYRIGHT:    (c) 2009 Hamish Bowman, and the GRASS Development Team
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#		This program is distributed in the hope that it will be useful,
#		but WITHOUT ANY WARRANTY; without even the implied warranty of
#		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#		GNU General Public License for more details.
#
#############################################################################

#%Module
#% description: Creates an artificial surface resembling a seamount or cone volcano.
#% keywords: raster
#%End
#%Option
#% key: output
#% type: string
#% required: yes
#% key_desc: name
#% description: Name for output raster map
#% gisprompt: new,cell,raster
#%End
#%Option
#% key: peak
#% type: double
#% required: no
#% description: Height of cone
#% answer: 1000.0
#%End
#%Option
#% key: crater
#% type: double
#% required: no
#% label: Depth of crater below the cone
#% description: A larger (deeper) value here also means a wider crater.
#% answer: 0.0
#%End
#%Option
#% key: method
#% type: string
#% required: no
#% description: Mathematical function for creating the mountain
#% answer: polynomial
#% options: polynomial,gaussian,lorentzian,logarithmic,exponential
#% descriptions: polynomial;1/distance^n;gaussian;Gaussian function;lorentzian;Cauchy-Lorentz distribution;logarithmic;Logarithmic decay;exponential;Exponential decay
#%End
#%Option
#% key: friction
#% type: integer
#% required: no
#% options: 1-25
#% label: Polynomial friction of distance, (the 'n' in 1/d^n)
#% description: Higher values generate steeper slopes. (only used with the polynomial method)
#% answer: 6
#%End
## FIXME: ok, it isn't really kurtosis but it's similar and I couldn't
##        think of a better name.
#%Option
#% key: kurtosis
#% type: double
#% required: no
#% label: Slope steepness (used with all methods except polynomial)
#% description: For Gaussian: nearer to 0 is flatter, higher values generate steeper slopes. For Lorentzian, logarithmic, and exponential the opposite is true.
#% answer: 1.0
#%End
#%Flag
#% key: r
#% description: Roughen the surface
#%End
#%Option
#% key: sigma
#% type: double
#% required: no
#% label: Surface roughness factor
#% description: Nearer to 0 is smoother, higher values make a rougher surface.
#% answer: 1.0
#%End



if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

FRICTION="$GIS_OPT_FRICTION"
PEAK="$GIS_OPT_PEAK"
CRATER="$GIS_OPT_CRATER"
SIGMA="$GIS_OPT_SIGMA"
KURTOSIS="$GIS_OPT_KURTOSIS"
METHOD="$GIS_OPT_METHOD"


# test for overwrite as r.mapcalc doesn't
eval `g.findfile element=cell file="$GIS_OPT_OUTPUT" mapset=.`
if [ -n "$name" ] ; then
   # map already exists
   if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -ne 1 ] ; then
      g.message -e "option <output>: <$GIS_OPT_OUTPUT> exists."
      exit 1
   fi
fi


g.message -v "Finding cost from center of current region ..."
eval `g.region -gc`
r.mapcalc "volc.dist_units.$$ = \
   sqrt( (x() - $center_easting)^2 + (y() - $center_northing)^2 )"


g.message -v "Normalizing cost map ..."
eval `r.info -r "volc.dist_units.$$"`
if [ "$METHOD" = "polynomial" ] ; then
      # Normalize with 1 in the center and 0 at outer edge
      r.mapcalc "volc.dist_norm.$$ = ($max - volc.dist_units.$$) / $max"
else
      # Normalize with 0 in the center and 1 at outer edge
      r.mapcalc "volc.dist_norm.$$ = volc.dist_units.$$ / $max"
fi


# create peak map
case "$METHOD" in
   polynomial)
	g.message -v "Creating IDW surface ..."
	r.mapcalc "volc.peak.$$ = ($PEAK + abs($CRATER) ) \
	    * pow( volc.dist_norm.$$, $FRICTION )"
	;;

   gaussian)
	g.message -v "Creating Gaussian surface ..."
	#% description: Use a Gaussian curve instead of 1/(d^n) for radial basis function
	# normalized Gaussian curve:  f(x) = a * e^( (x-b)^2 / 2*(c^2) )
	#  parameters: a = 1/(sigma*sqrt(2pi)), b = mu, c = sigma
	#  mu is mean value and sigma^2 is variance.
	#  so we only need b,c. and b can be locked at 0 here. so user only needs
	#  to give sigma (width)
	#  thus r.mapcalc expr could look like
	#   f(distance) = ( 1 / ($SIGMA*sqrt(2*$PI)) ) * exp( -1* $DIST^2 / (2 * $SIGMA^2) )

	SIGMA_C=1.0
	# r.mapcalc doesn't have a pi(), so define it:
	PI=3.14159265358979323846

	## FIXME: the 10*kurtosis stuff is a completely bogus hack!
	r.mapcalc "volc.gauss.$$ = \
	   ( 1 / ( $SIGMA_C * sqrt(2 * $PI) ) ) \
	   * exp( -1* (10 * $KURTOSIS * volc.dist_norm.$$)^2 / (2 * $SIGMA_C^2) )"

	eval `r.info -r "volc.gauss.$$"`
	g.message -v "Normalizing Gaussian surface ..."
	r.mapcalc "volc.peak.$$ = \
	     ( ($PEAK + abs($CRATER) ) / $max ) * volc.gauss.$$"

	g.remove rast="volc.gauss.$$" --quiet
	;;

   lorentzian)
	#  Cauchy-Lorentz fn: f(distance, gamma, height) =
	#       height_of_peak * ( gamma^2 / ( distance^2 + gamma^2) )
	#  where gamma is the scale parameter giving half-width at half-maximum.
	g.message -v "Creating Lorentzian surface ..."
	r.mapcalc "volc.peak.$$ = ($PEAK + abs($CRATER) ) \
	    * ( ($KURTOSIS * 0.1)^2 / ( volc.dist_norm.$$ ^2 + ($KURTOSIS * 0.1)^2) )"
	;;

   exponential)
	# exponential:  1 / ((e^distance) -1)
	g.message -v "Creating exponential decay surface ..."

	r.mapcalc "volc.exp.$$ = 1 / (exp(volc.dist_norm.$$ / $KURTOSIS) - 0.9)"

	eval `r.info -r "volc.exp.$$"`
	g.message -v "Normalizing exponential surface ..."
	r.mapcalc "volc.peak.$$ = \
	     ( ($PEAK + abs($CRATER) ) / $max ) * volc.exp.$$"

	g.remove rast="volc.exp.$$" --quiet
	;;

   logarithmic)
	# logarithmic:  1 / ( (d+1)^2 * log(d+1) )
	g.message -v "Creating logarithmic decay surface ..."

	r.mapcalc "volc.log.$$ = 1 /  \
	   ( (volc.dist_norm.$$ + pow(1.15,$KURTOSIS))^2 \
	     * log((volc.dist_norm.$$) + pow(1.15,$KURTOSIS)) )"

	eval `r.info -r "volc.log.$$"`
	g.message -v "Normalizing logarithmic surface ..."
	r.mapcalc "volc.peak.$$ = \
	     ( ($PEAK + abs($CRATER) ) / $max ) * volc.log.$$"

	g.remove rast="volc.log.$$" --quiet
	;;

   *)
	g.message -e "Programmer error, method = <$METHOD>"
	exit 1
esac


if [ "$GIS_FLAG_R" -eq 0 ] ; then
   g.rename rast="volc.peak.$$,volc.surf.$$" --quiet
else
   # roughen it up a bit
   g.message -v "Creating random Gaussian mottle ..."
   r.surf.gauss out="volc.surf_gauss.$$" sigma="$SIGMA"

   g.message -v "Applying Gaussian mottle ..."
   r.mapcalc "volc.peak_rough.$$ = \
	volc.peak.$$ + (volc.surf_gauss.$$ * $PEAK/400 )"

   g.rename rast="volc.peak_rough.$$,volc.surf.$$" --quiet
   g.remove rast="volc.surf_gauss.$$,volc.peak.$$" --quiet

fi

g.remove rast="volc.dist_units.$$,volc.dist_norm.$$" --quiet

if [ "$CRATER" = "0.0" ] ; then
   g.rename rast="volc.surf.$$,$GIS_OPT_OUTPUT" --quiet
else
   g.message -v "Creating crater ..."
   r.mapcalc "volc.full.$$ = if( volc.surf.$$ > $PEAK, \
	2*$PEAK - volc.surf.$$, volc.surf.$$ )"

   g.rename rast="volc.full.$$,$GIS_OPT_OUTPUT" --quiet
   g.remove rast="volc.surf.$$" --quiet
fi


# test if it worked
eval `g.findfile element=cell file="$GIS_OPT_OUTPUT" mapset=.`
if [ -z "$name" ] ; then
   g.message -e "Surface creation failed"
   exit 1
fi

# write metadata
r.support map="$GIS_OPT_OUTPUT" \
    description="generated by r.surf.volcano" \
    source1="Peak height = $PEAK" \
    title="Artificial surface resembling a seamount or cone volcano"

if [ "$GIS_FLAG_R" -eq 1 ] ; then
   r.support map="$GIS_OPT_OUTPUT" \
      history="Surface roughness used a Gaussian deviate with sigma of $SIGMA."
fi


case "$METHOD" in
   polynomial)
	r.support map="$GIS_OPT_OUTPUT" \
	   source2="Polynomial surface with friction of distance = $FRICTION"
	;;
   gaussian)
	r.support map="$GIS_OPT_OUTPUT" \
	   source2="Gaussian surface with pseudo-kurtosis factor = $KURTOSIS"
	;;
   lorentzian)
	r.support map="$GIS_OPT_OUTPUT" \
	   source2="Lorentzian surface with pseudo-kurtosis factor = $KURTOSIS"
	;;
   exponential)
	r.support map="$GIS_OPT_OUTPUT" \
	   source2="Exponential decay surface with pseudo-kurtosis factor = $KURTOSIS"
	;;
   logarithmic)
	r.support map="$GIS_OPT_OUTPUT" \
	   source2="Logarithmic decay surface with pseudo-kurtosis factor = $KURTOSIS"
	;;
   *)
	g.message -e "Programmer error, method = <$METHOD>"
	exit 1
esac

#r.colors map="$GIS_OPT_OUTPUT" color=srtm --quiet
g.message -v "Done."

exit
