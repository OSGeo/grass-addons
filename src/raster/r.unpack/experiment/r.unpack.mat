#!/bin/sh
#  r.unpack.mat   --  unpack up a binary MAT-File(v4) map packed with r.pack.mat:
#     tar+gzip => r.in.mat + support files
#
#   (c) 2004 GRASS Development Team
#   AUTHOR: Hamish Bowman, Otago University, New Zealand
#
#   This program is free software under the GNU General Public
#   License (>=v2). Read the file COPYING that comes with GRASS
#   for details.
#

#%Module
#%  description: Unpacks a binary MAT-File map packed with r.pack.mat
#%End
#%option
#% key: input
#% type: string
#% gisprompt: file,file,file
#% description: Name of an existing pack file
#% required : yes
#%end
#%flag
#%  key: o
#%  description: Override projection (use location's projection)
#%end


if [ -z "$GISBASE" ] ; then
   echo "You must be in GRASS GIS to run this program." >&2
   exit 1
fi   
if [ "$1" != "@ARGS_PARSED@" ] ; then
   exec g.parser "$0" "$@"
fi

# check for tar  (is there a better way?)
if [ -z "`which tar`" ] ; then
   echo "ERROR: tar must be installed to use this program."
   exit 1
fi
# check for gzip
if [ -z "`which gzip`" ] ; then
   echo "ERROR: gzip must be installed to use this program."
   exit 1
fi


eval `g.gisenv`
MSET_DIR="$GISDBASE/$LOCATION_NAME/$MAPSET"


if [ ! -e "$GIS_OPT_INPUT" ] ; then
   echo "ERROR: file not found [$GIS_OPT_INPUT]"
   exit 1
fi

# remove .pack and path from $GIS_OPT_INPUT
MAP_NAME="`basename "$GIS_OPT_INPUT" | sed -e 's/\.pack$//'`"
echo "The imported map will be named [$MAP_NAME]."

eval `g.findfile element=cell file="$MAP_NAME"`
if [ ! -z "$file" ] ; then
   echo "ERROR: '$MAP_NAME' already exists."
   exit 1
fi


# create temporary directory to hold bits
TMP_DIR="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP_DIR" ] ; then
   echo "ERROR: unable to create temporary files" 1>&2
   exit 1
fi
rm -f "$TMP_DIR"
mkdir "$TMP_DIR"
if [ ! -d "$TMP_DIR" ] ; then
   echo "ERROR: unable to create temporary directory" 1>&2
   exit 1
fi


cp "$GIS_OPT_INPUT" "$TMP_DIR"/
cd "$TMP_DIR"/
tar xzf "`basename $GIS_OPT_INPUT`"


# check projection compatibility in a rather crappy way
if [ ! -z "`diff proj_info "$MSET_DIR"/../PERMANENT/PROJ_INFO`" ] ; then
    if [ $GIS_FLAG_O -eq 1 ] ; then
        echo "WARNING: Projection information does not match. Proceeding.."
    else
        echo "ERROR: Projection information does not match. Aborting."
        # clean up
        cd "$MSET_DIR"
        rm -rf "$TMP_DIR"
        exit 1
    fi
fi


r.in.mat input=map.mat output="$MAP_NAME"

for SUPPORT in colr hist cats ; do 
    if [ -e $SUPPORT ] ; then
        cp $SUPPORT "$MSET_DIR"/$SUPPORT/"$MAP_NAME"
    fi
done


# clean up
cd "$MSET_DIR"
rm -rf "$TMP_DIR"

echo Finished.
exit 0
