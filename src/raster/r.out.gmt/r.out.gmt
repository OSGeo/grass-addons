#!/bin/sh

############################################################################
#
# MODULE:       r.out.gmt
#
# AUTHOR(S):    M. Hamish Bowman, Otago University, New Zealand
#                heavily based on tutorial by Dylan Beaudette, UC Davis
#
# PURPOSE:      Output a GRASS raster to a GMT gridfile and color table 
#
# COPYRIGHT:    (c) 2005 by the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
# REQUIRES:     GMT: The Generic Mapping Tools 
#                 http://gmt.soest.hawaii.edu
#               awk
#
#############################################################################
#
# TODO: use GMT's xyz2grd to make grid files? see raster/r.out.bin/README
#       then you can do DCELL output.
#
#   xyz2grd -ZTLi  for CELL
#   xyz2grd -ZTLf  for FCELL
#   xyz2grd -ZTLd  for DCELL
#
#  and the -F may be quite important: it forces pixel registration 
#  (the default is grid registration). I am always confused by this, 
#  maybe grid registration is correct?
#  
# Dylan's tutorial: http://169.237.35.250/~dylan/grass_user_group/map1.html
#


#%Module
#% description: Exports a GRASS raster map into a GMT grid file and color table
#% keywords: raster, export, GMT
#%End
#%option
#% key: input
#% type: string
#% gisprompt: old,cell,raster
#% description: Name of input raster map
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% description: Base name of output files (taken from input map if not given)
#% required : no
#%END
#%flag
#% key: p
#% description: Display suggested GMT PostScript creation commands
#%end



if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

# check if we have awk
AWK=`which awk`
if [ "$AWK" = "" ] ; then
    echo "$PROG: awk required, please install awk/gawk first" 1>&2
    exit 1
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
export LC_NUMERIC=C


MAP_NAME="$GIS_OPT_INPUT"

if [ -z "$GIS_OPT_OUTPUT" ] ; then
    OUT_BASE=`echo "$GIS_OPT_INPUT" | cut -f1 -d'@'`
else
    OUT_BASE="$GIS_OPT_OUTPUT"
fi

OUTPUT_GRD="${OUT_BASE}.grd"
OUTPUT_CPT="${OUT_BASE}.cpt"
OUTPUT_PS="${OUT_BASE}.ps"

# what to do in case of user break:
exitprocedure()
{
    echo "User break!" 1>&2
    cleanup
    exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

cleanup()
{
    if [ "$MAP_TYPE" = "DCELL" ] ; then
	g.remove "tmp_gmt_$$" --quiet
    fi
}

MAP_TYPE=`r.info -t "$MAP_NAME" | cut -f2 -d'='`

case "$MAP_TYPE" in
    CELL)
	MAP_TAG="=bs" ;;
    FCELL)
	MAP_TAG="=bf" ;;
    DCELL)
	MAP_TAG="=bf"
	echo "WARNING: Converting from double precision to floating point map" 1>&2
	r.mapcalc "tmp_gmt_$$ = float($MAP_NAME)"
	MAP_NAME="tmp_gmt_$$"
	;;
esac

r.out.bin -h input="$MAP_NAME" output="$OUTPUT_GRD" 
if [ $? -ne 0 ] ; then
  echo "ERROR: creating binary grid file" 1>&2
  cleanup
  exit 1
fi

# get our geographic extents
eval `g.region -gu`
ns_extent=`g.region -eu | grep south | cut -f2 -d: | sed -e 's=^ =='`
ew_extent=`g.region -eu | grep west | cut -f2 -d: | sed -e 's=^ =='`

# preserve aspect ratio from UTM E,N coordinates:
aspect_ratio=`echo $ns_extent $ew_extent | awk '{printf("%f", $1 / $2)}'`

# setup the map width in inches
# this is going to affect how much information can be placed in the margins of the paper.
# commonly a printer will enforce a .25" margin...
map_width=7

# calculate the map length based on the original aspect ratio
map_length=`echo $map_width $aspect_ratio | awk '{printf("%f", $1 * $2)}'`

# calculate the y location (in paper units) for the field sheet title
field_sheet_title_y=`echo $map_length | awk '{printf("%f", $1 + 0.33)}'`

# compile the projection string, with width/length variables
#   linear projection, width inches / length inches
projection_string="X${map_width}i/${map_length}i"

# setup the X,Y offset from the bottom left corner, in inches
# might need to play around with these so that none of the image is cropped by the printer
#  x_offset=".25i"    
x_offset="c"	#have GMT horizontally center the map
#y_offset="0.7i"
y_offset="c"

# compute the scale in meters
# 39.369 inch/meter
#  (round to a whole number of some sort?)
scale=`echo $ew_extent $map_width | awk '{printf("%d", ($1 * 39.369) / $2)}'`


# compute default grid ticks
# default units are meters
if [ `echo $aspect_ratio | cut -f1 -d'.'` -ge 1 ] ; then
    MAX_EXTENT=$ns_extent
else
    MAX_EXTENT=$ew_extent
fi
# try to figure out something useful  (how to get awk to do log10()??)
tic_interval=`echo $MAX_EXTENT | awk '{printf("%d", int(($1/60)/100)*100 )}'`
annotated_tic_interval=`expr $tic_interval '*' 10`

# setup the comment at the bottom of the map
map_comment="1:$scale"



# create cpt color table from raster's colr file
eval `g.findfile elem=colr file="$GIS_OPT_INPUT" | grep "^file="`
if [ -z "$file" ] ; then
   g.message "Input map does not have explicit color rules defined. CPT file not created."
   OUTPUT_CPT=jet.cpt
else
   COLR_FILE="$file"
   
   echo "#" > "$OUTPUT_CPT"
   echo "# GMT colormap created by the `g.version` r.out.gmt script" >> "$OUTPUT_CPT"
   echo "# from base map [$GIS_OPT_INPUT]" >> "$OUTPUT_CPT"
   echo "# created by ${USER}@${HOSTNAME} at `date`" >> "$OUTPUT_CPT"
   echo "#" >> "$OUTPUT_CPT"
   echo "# COLOR_MODEL = RGB" >> "$OUTPUT_CPT"

   if [ `grep -c ':' "$COLR_FILE"` -eq 0 ] ; then
      g.message -w "Old-style colr files not yet supported. CPT file will be bogus."
      # e.g. streams@spearfish
   fi

   for line in `cat "$COLR_FILE" | tail -n+2 | grep -v "^nv" | tr ' ' '|'` ; do
       C_BEGIN="`echo "$line" | cut -f1 -d'|'`"
       C_END="`echo "$line" | cut -f2 -d'|'`"
   
       # translate 1 color value into 3
       if [ "`echo "$C_BEGIN" | tr ':' '\n' | wc -l`" -eq 2 ] ; then
   	RULE_CAT="`echo "$C_BEGIN" | cut -f1 -d:`"
   	RULE_COLOR="`echo "$C_BEGIN" | cut -f2 -d:`"
   	C_BEGIN="${RULE_CAT}:${RULE_COLOR}:${RULE_COLOR}:${RULE_COLOR}"
       fi
       if [ "`echo "$C_END" | tr ':' '\n' | wc -l`" -eq 2 ] ; then
   	RULE_CAT="`echo "$C_END" | cut -f1 -d:`"
   	RULE_COLOR="`echo "$C_END" | cut -f2 -d:`"
   	C_END="${RULE_CAT}:${RULE_COLOR}:${RULE_COLOR}:${RULE_COLOR}"
       fi     
   
       C_STRING="${C_BEGIN}:${C_END}"
       echo "$C_STRING" | tr ':' '\t' >> "$OUTPUT_CPT"
   done
   # copy color of null value, if any
   C_NULL="`grep "^nv" "$COLR_FILE" | cut -f2 -d':'`"
   if [ -n "$C_NULL" ] ; then
       if [ "`echo "$C_NULL" | tr ':' '\n' | wc -l`" -eq 1 ] ; then
   	C_STRING="N:${C_NULL}:${C_NULL}:${C_NULL}"
       else
   	C_STRING="N:${C_NULL}"
       fi
       
       echo "$C_STRING" | tr ':' '\t' >> "$OUTPUT_CPT"
   fi

fi


# show suggested PostScript creation commands
if [ $GIS_FLAG_P -eq 1 ] ; then
    echo "Suggested GMT PostScript creation commands follow:" 1>&2
    echo "==================================================" 1>&2
    echo 1>&2
    # setup basemap
    echo "psbasemap -J$projection_string \\
   -R${w}/${e}/${s}/${n} \\
   -Bpf${tic_interval}a${annotated_tic_interval}:\"Easting (m)\":/f${tic_interval}a${annotated_tic_interval}:\"Northing (m)\"::.\"$OUT_BASE\":WeSn \\
   -X$x_offset -Y$y_offset \\
   -U\"scale $map_comment\" \\
   --D_FORMAT='%.15g' \\
   -K -V > $OUTPUT_PS"

    echo 1>&2
    # render the grid with the translated color palette
    # note that we append a =bs after the grd filename- this instructs GMT to read it as an INT GRD
    # -J inherit the projection information from previous declaration
    # -R inherit the region information from previous declaration (important when regions of grd files do not match!!)
    # -K allows for further PS additions later ("K"eeps PostScript file open)
    # -O uses preset plotting grid ("O"verlays)
    echo grdimage "${OUTPUT_GRD}${MAP_TAG} -C${OUTPUT_CPT} \\
   -R -J -K -O -V >> $OUTPUT_PS"

    echo 1>&2
    echo "==================================================" 1>&2
fi


cleanup

echo "`basename $0` complete." 1>&2

exit 0
