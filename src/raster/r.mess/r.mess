#!/bin/sh
# 
#set -x
########################################################################
# 
# MODULE:       r.mess
# AUTHOR(S):    Paulo van Breugel <p.vanbreugel AT gmail.com>
# PURPOSE:      Calculate the multivariate environmental similarity 
#               surface (MESS) as proposed by Elith et al., 2010, 
#               Methods in Ecology & Evolution, 1(330â€“342). 
#
# NOTES:        This GRASS script should give results very close (but
#               due to rounding differences probably not exactly the 
#               same) to those calculated in Maxent. If you want to
#               compare, make sure to use the same points as used in
#               Maxent to calculate the MESS, which are, by default, 
#               all background points if I understand it correctly. See
#               [fill in url] for a discussion about the assumptions
#               made and the use of the input parameter 'digits'
#
# Disclaimer:   I use it in my work, but I am aware that it needs
#               improvements. Suggestions for improvements are most
#               welcome. In the meantime, use it at your own risk
#   
# COPYRIGHT: (C) 2013 Paulo van Breugel
#            http://ecodiv.org
#            http://pvanb.wordpress.com/
# 
#            This program is free software under the GNU General Public 
#            License (>=v2). Read the file COPYING that comes with GRASS 
#            for details. 
# 
########################################################################
#
#%Module 
#% description: Computes multivariate environmental similarity surface
#%End 

#%option
#% key: ref_rast
#% type: string
#% gisprompt: old,cell,raster
#% description: Reference distribution as raster
#% key_desc: name
#% required: no
#% multiple: no
#% guisection: reference distribution
#%end

#%option
#% key: ref_vect
#% type: string
#% gisprompt: old,vector
#% description: Reference distribution as point vector layer
#% key_desc: name
#% required: no
#% multiple: no
#% guisection: reference distribution
#%end

#%option
#% key: env_var
#% type: string
#% gisprompt: old,cell,raster
#% description: Input (predictor) raster map(s) 
#% key_desc: names
#% required: yes
#% multiple: yes
#%end

#%option
#% key: output
#% type: string
#% gisprompt: new,cell,raster
#% description: Root name of the output MESS data layers
#% key_desc: name
#% required: yes
#%end

#%option
#% key: digits
#% type: string
#% description: Precision of your input layers values
#% key_desc: string
#% answer: 0.0001
#% required: yes
#%end

##%flag  # not implemented yet
##% key: n
##% description: Keep individual environmental similarity layers (IES)
##% guisection: Additional statistics
##%end

#%flag
#% key: m
#% description: Calculate Most dissimilar variable (MoD)
#%end

#%flag
#% key: k
#% description: Calculate mean of IES layers
#%end

#%flag
#% key: l
#% description: Calculate median of IES layers
#%end

#%flag
#% key: n
#% description: Area with negative MESS
#%end


#%option
#% key: liblocs
#% type: string
#% description: Location R libraries
#% key_desc: folder
#% required: no
#%end

## Set easier variable names
OUTMAPS="${GIS_OPT_OUTPUT}"
export INMAPS="${GIS_OPT_ENV_VAR}"

#=======================================================================
## GRASS team recommandations
#=======================================================================

## Check if in GRASS
if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

## check for awk
if [ ! -x "$(which awk)" ] ; then
    g.message -e "<awk> required, please install <awk> or <gawk> first"
    exit 1
fi

## check for R
if [ ! -x "$(which R)" ] ; then
    g.message -e "<R> required, please install <R> first"
    exit 1
fi

## To parse the code into interactive menu
if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

## set environment so that awk works properly in all languages ##
unset LC_ALL
export LC_NUMERIC=C


## what to do in case of user break:
exitprocedure()
{
    echo "User break!"
    cleanup
    exit 1
}

## shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

#=======================================================================
## Config and general procedures
#=======================================================================

##fix this path
if [ -z "$PROCESSDIR" ] ; then
    PROCESSDIR="$HOME"
fi

#fix this path
if [ -z "$LOGDIR" ] ; then
    LOGDIR="$HOME"
fi
LOGFILE="$LOGDIR/r.mess.log"

echo "r.mess :" >> "$LOGFILE"

#=======================================================================
## Preparing input variables for use in R script
#=======================================================================

# Create vectors with names output maps [arrOUT]
# Create vector with names temporary layers [tmpLY]
# Create vector with names input layers without mapset name [arrIN]
# The 'removeThis' elements are to initiate the vector. How can I avoid this?

arrOUT="${OUTMAPS}_MESS"
tmpLY="removeThis"
arrIN="removeThis2"
counter=0
IFS=,
for nvar in ${INMAPS} ; do
    export arrOUT="$arrOUT;${OUTMAPS}_`echo $nvar | awk 'BEGIN{FS="@"}{print $1}'`"
    counter=`expr $counter + 1`
    export tmpLY="${tmpLY};tmp_mess_$$_$counter"
    export arrIN="${arrIN};`echo $nvar | awk 'BEGIN{FS="@"}{print $1}'`"
done

if [ -z "$GIS_OPT_REF_VECT" -a -z "$GIS_OPT_REF_RAST" ]; 
then
	g.message -e message='Missing input: map with the reference distribution (point vector layer -or- a raster layer)'
    exit 1
else
    if [ -n "$GIS_OPT_REF_VECT" -a -n "$GIS_OPT_REF_RAST" ]; then
        g.message message='You gave a vector and raster layer as reference distribution layer. !Using the raster layer!'
        export REF_LAY="${GIS_OPT_REF_RAST}"
        export REF_TYPE="R"
    else 
        if [ -n "$GIS_OPT_REF_RAST" ]; then
        export REF_LAY="${GIS_OPT_REF_RAST}"
        export REF_TYPE="R"
        else 
        export REF_LAY="${GIS_OPT_REF_VECT}"
        export REF_TYPE="V"        
       fi
    fi
fi

#=======================================================================
## testing if exising output maps already exist 
## and for missing input maps
#=======================================================================

# test for output raster map [1]
g.findfile element=cell file=${OUTMAPS}_MESS  > /dev/null
    if [ $? -eq 0 ] ; then
        g.message -e 'The output map '${OUTMAPS}'_MESS already exists'
    exit 1
fi

# test for output raster maps [2]
oIFS=$IFS
IFS=,
for nvar in $INMAPS ; do
    arrTEST=${OUTMAPS}_`echo $nvar | awk 'BEGIN{FS="@"}{print $1}'`
    g.findfile element=cell file=${arrTEST} > /dev/null
    if [ $? -eq 0 ] ; then 
        g.message -e 'The output map '${arrTEST}' already exists'
    exit 1
    fi
done
IFS=$oIFS
unset arrTEST

# test for missing input raster maps
oIFS=$IFS
IFS=,
for nvar in $INMAPS ; do
    tstIN=`echo $nvar | awk 'BEGIN{FS="@"}{print $1}'`
    g.findfile element=cell file=${tstIN} > /dev/null
    if [ $? -gt 0 ] ; then 
        g.message -e 'The map '${tstIN}' is missing'
    exit 1
    fi
done
IFS=$oIFS
unset tstIN

#=======================================================================
## Creating the R script
#=======================================================================

writeScript(){ 
cat > $1 << "EOF"

options(echo = TRUE)

# Install (if not present) and load required packages

tmp.pack <- tempdir()
libLocs <- Sys.getenv("GIS_OPT_LIBLOCS")	# Location R packages
if(libLocs!=""){
	libLocs <- c(.libPaths(), libLocs, tmp.pack)
}else{
	libLocs <- c(.libPaths(), tmp.pack)
}

if (!"XML" %in% installed.packages(lib.loc=libLocs)){
        install.packages("XML", dep=TRUE, repos='http://cran.us.r-project.org', tmp.pack)
        require(XML, lib.loc=libLocs)
}else{require(XML, lib.loc=libLocs)}

if (!"sp" %in% installed.packages(lib.loc=libLocs)){
        install.packages("sp", dep=TRUE, repos='http://cran.us.r-project.org', tmp.pack)
        require(sp, lib.loc=libLocs)
}else{require(sp, lib.loc=libLocs)}

if (!"spgrass6" %in% installed.packages(lib.loc=libLocs)){
        install.packages("spgrass6", dep=TRUE, repos='http://cran.us.r-project.org', tmp.pack)
        require(spgrass6, lib.loc=libLocs)
}else{require(spgrass6, lib.loc=libLocs)}

# Check grass version
grassversion <- as.numeric(system("g.version | cut -c7", intern=T))

## Get vector with variables
ipn	<- Sys.getenv("arrIN")			# variable names
ipn	<- unlist(strsplit(ipn,";"))[-1]
ipl	<- Sys.getenv("INMAPS")			# environmental layers
ipl	<- unlist(strsplit(ipl,","))
opl	<- Sys.getenv("arrOUT")			# output layers
opl	<- unlist(strsplit(opl,";"))
opi	<- opl[-1]						# base name individual layers
opc	<- opl[1]						# name of MESS layer
tml	<- Sys.getenv("tmpLY")			# temporary layers
tml	<- unlist(strsplit(tml,";"))[-1] 
vtl <- Sys.getenv("REF_LAY")    	# reference distribution raster layer
rtl <- Sys.getenv("REF_TYPE")		# raster or vector layer
flm	<- Sys.getenv("GIS_FLAG_M")
flk	<- Sys.getenv("GIS_FLAG_K")
fll	<- Sys.getenv("GIS_FLAG_L")
fln	<- Sys.getenv("GIS_FLAG_N")
digits	<- as.numeric(Sys.getenv("GIS_OPT_DIGITS"))	# Precision
rdigits <- nchar((1/digits)-1)
options(echo=TRUE, digits=rdigits+1, scipen=rdigits+1)


#-----------------------------------------------------------------------
# Create the r.mapcalc expressions to calculate the mess for the 
# individual layers. The main step is to define the graph function to 
# be used  -  
#-----------------------------------------------------------------------

if(rtl=="R"){
    
    # Reference distribution layer is raster 
    #-----------------------------------------------------------------------  
    
    flnm1 <- tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".txt")
    flnm2 <- tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".txt")
    for(i in 1:length(ipl)){
        
        # Import the environmental data ipl[i] in R. I could use r.stats to 
        # get frequency table rather then raw data. But I first need to find 
        # out how to deal with floating data in r.stats, as counts of each 
        # unique value is needed.
        # One option is to convert the floating layers to integer layers after
        # multiplying first with a number equal to the reciprocal of the value
        # given under the digits option. This may deal better with rounding errors too.
		
		fft <- system("g.findfile --quiet element=cell file=MASK", ignore.stdout = TRUE)
        if(fft==0){
           rname <- paste("MASK",paste(sample(c(0:9, letters, LETTERS), 12, replace=TRUE), collapse=""), sep="_")
           execGRASS("g.copy", rast=paste("MASK", rname, sep=","))
           system("g.remove -f rast=MASK")
        }

        # make compatible for both v6.4 and 7
        if(grassversion==7){
            execGRASS("r.mask", raster=vtl)
        }else{
            execGRASS("r.mask", input=vtl)
        }

        execGRASS("r.out.xyz", input=ipl[i], output=flnm1, flags="overwrite")
        system(paste("awk -F \"|\" '{print $3}' ", flnm1, " > ", flnm2, sep=""))
        spld <- scan(file=flnm2)
        unlink(c(flnm1, flnm2))
        spld <- round(spld, rdigits)

        # Make sure numbers < 2^31 (need better solution!!)
		envmin <- min(spld)
		envmax <- max(spld)
		ch <- max(abs(envmin), abs(envmax))
		a <- (2^31/10) - ch/digits
		b <- nchar(floor(2^31/(ch*10)))
		rdigits2 <- ifelse(a<=0, b ,rdigits)
		digits2 <- 10^(-rdigits2)

        # Calculate the frequency distribution 
        a  <- table(spld)
        Drange <- execGRASS("r.info", flags=c("r", "verbose"), map=ipl[i], intern=T)
        Dmin <- as.numeric(sub("min=", "", Drange[1]))
        Dmax <- as.numeric(sub("max=", "", Drange[2]))
        system("g.remove -f rast=MASK")

        # Create recode rules
        x1 <- c(Dmin, as.numeric(rownames(a)))#+digits)
        x2 <- c(envmin, as.numeric(rownames(a))[-1],Dmax)
        y1 <- c(0,cumsum(as.numeric(a))/sum(a)*100)
        xy1 <- format(cbind(x1,x2,y1), scientific=F, trim=T, nsmall=rdigits)
        xy2 <- apply(xy1, 1, function(x){paste(x, collapse=":")})
        tmp.rule <- tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".rules")
        write.table(xy2, file=tmp.rule, quote=F, row.names=F, col.names=F)
        
        # Restore mask
        if(fft==0){
          execGRASS("g.rename", rast=paste(rname,"MASK", sep=","), intern=TRUE)
        }
        
        # Create the recode layer and calculate the IES
        execGRASS("r.recode", input=ipl[i], output=tml[i], rules=tmp.rule)
        calcc <- paste(opi[i], " = if(", tml[i], "==0, (round(", ipl[i], "/",digits2,")*1.0-", round(envmin/digits2), ")/(", round(envmax/digits2)*1.0, "-", round(envmin/digits2)*1.0, ") *100.0, if(", tml[i], "<=50, 2.0 * ", tml[i], ", if(", tml[i], "<100, 2.0 * (100.0- ", tml[i], "), (", round(envmax/digits2)*1.0, "- round(", ipl[i], "/", digits2, ")*1.0)/(", round(envmax/digits2)*1.0, "-", round(envmin/digits2)*1.0, ") * 100.0)))", sep="")
        execGRASS("r.mapcalc", expression=calcc, flags="overwrite") 
        execGRASS("g.remove", rast=tml[i])
        unlink(tmp.rule)
    }

}else{

    # Reference distribution layer is vector 
    #-----------------------------------------------------------------------

    execGRASS("v.extract", flags="t", input=vtl, type="point", output=tmpMESS976543210)
    system(paste("v.db.addtable tmpMESS976543210 columns='", paste(ipn, " double precision", collapse=","), "'", sep=""))

    # make compatible for both v6.4 and 7
    if(grassversion==7){
	for(m in 1:length(ipn)){
	    system(paste("v.what.rast map=tmpMESS976543210 layer=1 raster=", ipl[m], " column=", ipn[m], sep=""))
	}
    }else{
	for(m in 1:length(ipn)){
	    system(paste("v.what.rast vector=tmpMESS976543210 layer=1 raster=", ipl[m], " column=", ipn[m], sep=""))
	}
    }
    
    spld <- paste(ipn, collapse=",")
    b <- execGRASS("v.db.select", parameters=list(map="tmpMESS976543210", columns=spld), intern=TRUE)
    con <- textConnection(b)
    spl <- na.omit(read.table(con, header=TRUE, sep="|"))
    
    # Check for point without values
    clpf <- na.action(spl)
    if(length(clpf)==1){print(paste("Please note that the point", clpf, "has no value. This is probably because it lies outside the current region"))}
    if(length(clpf)>1){print(paste("Please note that the points", paste(clpf, collapse=" and "), "have no values. This is probably because they lie outside the current region"))}
   
    close(con)
    system("g.remove vect=tmpMESS976543210")

    for(i in 1:length(ipl)){
        # Calculate the frequency distribution 
        a  <- table(spl[i])
        envmin <- min(spl[i])
        envmax <- max(spl[i])
        Drange <- system(paste("r.info -r --verbose map=", ipl[i], sep=""), intern=T)
        Dmin <- as.numeric(sub("min=", "", Drange[1]))
        Dmax <- as.numeric(sub("max=", "", Drange[2]))
        
        # Create recode rules
        x1 <- c(Dmin, as.numeric(rownames(a)))#+digits)
        x2 <- c(envmin, as.numeric(rownames(a))[-1],Dmax)
        y1 <- c(0,cumsum(as.numeric(a))/sum(a)*100)
        xy1 <- format(cbind(x1,x2,y1), scientific=F, trim=T, nsmall=rdigits)
        xy2 <- apply(xy1, 1, function(x){paste(x, collapse=":")})
        tmp.rule <- tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".rules")
        write.table(xy2, file=tmp.rule, quote=F, row.names=F, col.names=F)
        
        # Make sure numbers < 2^31 (need better solution!!)
		ch <- max(abs(envmin), abs(envmax))
		a <- (2^31/10) - ch/digits
		b <- nchar(floor(2^31/(ch*10)))
		rdigits2 <- ifelse(a<=0, b ,rdigits)
		digits2 <- 10^(-rdigits2)

        # Create the recode layer and calculate the IES
        execGRASS("r.recode", input=ipl[i], output=tml[i], rules=tmp.rule)
        calcc <- paste(opi[i], " = if(", tml[i], "==0, (round(", ipl[i], "/",digits2,")*1.0-", round(envmin/digits2), ")/(", round(envmax/digits2)*1.0, "-", round(envmin/digits2)*1.0, ") *100.0, if(", tml[i], "<=50, 2.0 * ", tml[i], ", if(", tml[i], "<100, 2.0 * (100.0- ", tml[i], "), (", round(envmax/digits2)*1.0, "- round(", ipl[i], "/", digits2, ")*1.0)/(", round(envmax/digits2)*1.0, "-", round(envmin/digits2)*1.0, ") * 100.0)))", sep="")
        execGRASS("r.mapcalc", expression=calcc, flags="overwrite") 
        execGRASS("g.remove", rast=tml[i])
        unlink(tmp.rule)
    }
}

#-----------------------------------------------------------------------
# Calculate MESS
#-----------------------------------------------------------------------

system(paste("r.series output=", opc, " input=", paste(opi, collapse=","), " method=minimum", sep=""))

#-----------------------------------------------------------------------
# Calculate other stats
#-----------------------------------------------------------------------

if(fln==1){
	execGRASS("r.mapcalc", expression=paste(opc, "_neg = if(", opc, "<0,1)", sep=""))
}

if(flm==1){
    system(paste("r.series output=", opc, "_MoD input=", paste(opi, collapse=","), " method=min_raster", sep=""))
    nuvto <- length(ipn)-1
    nuv <- cbind(seq(from=0, to=nuvto, by=1), ipn)
    reclvar <- apply(nuv,1,function(x){paste(x[1],x[2], sep=":")})
    tmpclas <- tempfile(pattern = "classification.rules.")
    sink(tmpclas)
    for(i in 1:length(reclvar)){
        cat(reclvar[i]); cat("\n")
    }
    sink()
    system(paste("r.category map=", opc, "_MoD rules=", tmpclas, sep=""))
    unlink(tmpclas)
}
if(flk==1){
    system(paste("r.series output=", opc, "_mean input=", paste(opi, collapse=","), " method=average", sep=""))
}
if(fll==1){
    system(paste("r.series output=", opc, "_median input=", paste(opi, collapse=","), " method=median", sep=""))
}
EOF
}

# RGrass script generation
# --------------------------
RGRASSSCRIPT="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$RGRASSSCRIPT" ] ; then
	g.message -e 'ERROR: unable to create temporary file for RGrass script' 1>&2
    exit 1
fi
writeScript "$RGRASSSCRIPT"


#=======================================================================
## RGrass call
#=======================================================================

# Message
g.message message='Calculating MESS layers.. this may take some time'

##using R to create MESS layers
# R --no-save --no-restore --no-site-file --no-init-file --args "$arrIN" "${INMAPS}" "$arrOUT" "$tmpLY" "$REF_LAY" "$GIS_FLAG_M" "$GIS_FLAG_K" "$GIS_FLAG_L" "$GIS_OPT_DIGITS" "$REF_TYPE" 
R --no-save --no-restore < "$RGRASSSCRIPT" >> "$LOGFILE" 2>&1
if [ $? -ne 0 ] ; then
	echo "ERROR: an error occurred during R script execution" 1>&2
    exit 1
fi

g.message "Finished - you can find the maps in your current mapset"

#=======================================================================


