#!/bin/sh

############################################################################
#
# MODULE:       r.cpt2grass
# AUTHOR(S):    M. Hamish Bowman, Otago University, New Zealand
# PURPOSE:      Convert a GMT color table into a GRASS color rules file
# COPYRIGHT:    (c) 2007 by Hamish Bowman, and the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
# SEE ALSO:     GMT: The Generic Mapping Tools 
#                 http://gmt.soest.hawaii.edu
#		  http://gmt.soest.hawaii.edu/gmt/doc/html/GMT_Docs/node61.html
#
# REQUIRES:	awk
#############################################################################

#%Module
#% description: Convert or apply a GMT color table to a GRASS raster map
#%End
#%option
#% key: input
#% gisprompt: old_file,file,file
#% type: string
#% description: Name of input GMT color table (.cpt file)
#% required : yes
#%END
#%option
#% key: map
#% gisprompt: old,cell,raster
#% type: string
#% description: Raster map to apply it to
#% required : no
#%END
#%option
#% key: output
#% gisprompt: new_file,file,file
#% type: string
#% description: Name for new rules file, or "-" for stdout
#% required : no
#%END
#%flag
#% key: s
#% description: Stretch color scale to match map data extent
#%end


if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

if [ -z "$GIS_OPT_MAP" ] && [ -z "$GIS_OPT_OUTPUT" ] ; then
    echo "ERROR: Nothing to do, please select either the map or output option" 1>&2
    exit 1
fi

if [ ! -e "$GIS_OPT_INPUT" ] ; then
    echo "ERROR: Input file [$GIS_OPT_INPUT] not found." 1>&2
    exit 1
fi

COLOR_MODEL=`grep '^# \?COLOR_MODEL' "$GIS_OPT_INPUT" | cut -f2 -d= | awk '{print $1}'`

case "$COLOR_MODEL" in
   RGB | HSV)
     if [ -n "$GRASS_VERBOSE" ] && [ "$GRASS_VERBOSE" -gt 1 ] ; then
        echo "Color model is $COLOR_MODEL" 1>&2
     fi
     ;;
   CMYK | *)
     echo "ERROR: Only the RGB and HSV color models are supported" 1>&2
     exit 1
     ;;
esac


# check if we have awk
AWK=`which awk`
if [ "$AWK" = "" ] ; then
    echo "ERROR: awk required, please install awk/gawk first" 1>&2
    exit 1
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
export LC_NUMERIC=C

TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "${TMP}" ] ; then
    echo "ERROR: Unable to create temporary files" 1>&2
    exit 1
fi


#### fn to convert hsv to rgb
# Converts HSV to RGB. Based on the Foley and Van Dam HSV algorithm used
#  by James Westervelt's (CERL) hsv.rgb.sh script from GRASS 4/5.
HSVtoRGB() {
   # Hue: 0-360 degrees
   H=$1
   # Satuaration: 0.0-1.0
   S=$2
   # Value: 0.0-1.0
   V=$3

   #if V == 0: black
   #if V == 1: white
   #else chromatic calculation

   awk -v H="$H" -v S="$S" -v V="$V" 'BEGIN {
#     if(V == 0.0) {printf("R=0\nG=0\nB=0\n"); exit}
#     if(V == 1.0) {printf("R=255\nG=255\nB=255\n"); exit}

     if(V == 0.0) {printf("black\n"); exit}
     if(V == 1.0) {printf("white\n"); exit}
  
     #print "chromatic: H=" H " S=" S " V=" V
   
     if(H >=360) {H -= 360}
     h = H/60.0
     i = int(h)
     f = h-i
     p = V * (1-S)
     q = V * (1-S*f)
     t = V * (1-S*(1-f))
   
     # init/fallback
     R = G = B = 0
     
     #switch/case not portable in (g)awk?

     # red
     if(i==0) {R = V}
     if(i==1) {R = q}
     if(i==2) {R = p}
     if(i==3) {R = p}
     if(i==4) {R = t}
     if(i==5) {R = V}
   
     # green
     if(i==0) {G = t}
     if(i==1) {G = V}
     if(i==2) {G = V}
     if(i==3) {G = q}
     if(i==4) {G = p}
     if(i==5) {G = p}
   
     # blue
     if(i==0) {B = p}
     if(i==1) {B = p}
     if(i==2) {B = t}
     if(i==3) {B = V}
     if(i==4) {B = V}
     if(i==5) {B = q}
   
      #printf("s=%.2f  h=%.2f i=%d  f=%.4f  p=%.4f  q=%.4f  t=%.4f\n", S, h, i, f, p, q, t)
   
#      printf("R=%d\nG=%d\nB=%d\n", R*255, G*255, B*255)
      printf("%d:%d:%d\n", R*255, G*255, B*255)
   }'
}


#### process cpt file

# B background is for values less than the first color rule, F foreground is for greater.
#  in GRASS we just consider that to be null, although we could define a color rule
#  max<->near infinity to be solidly that color. ??
# skip labels for now

echo "# GMT color map created with r.cpt2grass" > "$TMP"
echo "#  from [$GIS_OPT_INPUT] by $USER at `date`" >> "$TMP"
grep '^#' "$GIS_OPT_INPUT" >> "$TMP"


# null value color
case "$COLOR_MODEL" in
   RGB)
     grep '^N' "$GIS_OPT_INPUT" | \
       awk '{printf("nv %d:%d:%d\n", $2, $3, $4)}' >> "$TMP"
     ;;
   HSV)
     HSV=`grep '^N' "$GIS_OPT_INPUT" | awk '{print $2 " " $3 " " $4}'`
     RGB=`HSVtoRGB $HSV`
     #echo "HSV=[$HSV]  RGB=[$RGB]"
     echo "nv $RGB" >> "$TMP"
     ;;
esac


# do it in an awk script:
#if ^#, print
#if 8 nums
#if N nv

if [ $GIS_FLAG_S -eq 0 ] ; then
   # the data
   case "$COLOR_MODEL" in
      RGB)
       grep '^[0-9.-]' "$GIS_OPT_INPUT" | \
         awk '{printf("%s %d:%d:%d\n%s %d:%d:%d\n", $1, $2, $3, $4, $5, $6, $7, $8)}' >> "$TMP"
       ;;
      HSV)
       while read LINE ; do
          if [ `echo "$LINE" | grep -c '^[0-9.-]'` -lt 1 ] ; then
	     continue
	  fi
          ELEV1=`echo "$LINE" | awk '{print $1}'`
          H1=`echo "$LINE" | awk '{print $2}'`
          S1=`echo "$LINE" | awk '{print $3}'`
          V1=`echo "$LINE" | awk '{print $4}'`
          ELEV2=`echo "$LINE" | awk '{print $5}'`
          H2=`echo "$LINE" | awk '{print $6}'`
          S2=`echo "$LINE" | awk '{print $7}'`
          V2=`echo "$LINE" | awk '{print $8}'`

          RGB1=`HSVtoRGB "$H1" "$S1" "$V1"`
	  RGB2=`HSVtoRGB "$H2" "$S2" "$V2"`

          echo "$ELEV1 $RGB1" >> "$TMP"
	  echo "$ELEV2 $RGB2" >> "$TMP"
       done < "$GIS_OPT_INPUT"
       ;;
   esac

else
  # strech to fit data

  CPT_MIN=`grep -v '^[#FBN]' "$GIS_OPT_INPUT" | awk '{print $1}' | sort -n | head -n 1`
  CPT_MAX=`grep -v '^[#FBN]' "$GIS_OPT_INPUT" | awk '{print $5}' | sort -n | tail -n 1`

#  N_RULE_ROWS=`grep -cv '^[#FBN]' "$GIS_OPT_INPUT"`
#  N_RULES=`echo "$N_RULE_ROWS" | awk '{print $1 + 1}'`

  RANGE=`echo "$CPT_MIN $CPT_MAX" | awk '{print $2 - $1}'`  

# DEBUG:
#echo "RANGE=$RANGE   Cmin=$CPT_MIN  Cmax=$CPT_MAX"

  while read LINE ; do
     unset LINE_MIN LINE_MAX PERCENT_MIN PERCENT_MAX
     if [ `echo "$LINE" | grep -c '^[#FBN]'` -ne 0 ] ; then
       continue
     fi

     LINE_MIN=`echo "$LINE" | awk '{print $1}'`
     LINE_MAX=`echo "$LINE" | awk '{print $5}'`

     PERCENT_MIN=`echo "$LINE_MIN" | awk -v RANGE="$RANGE" -v CMAX="$CPT_MAX" \
        '{print 100 * (RANGE - (CMAX - $1)) / RANGE }'`
     PERCENT_MAX=`echo "$LINE_MAX" | awk -v RANGE="$RANGE" -v CMAX="$CPT_MAX" \
        '{print 100 * (RANGE - (CMAX - $1)) / RANGE }'`

# DEBUG:
#echo "LINE: [$LINE]"
#echo "  lmin=$LINE_MIN  lmax=$LINE_MAX  pmin=$PERCENT_MIN  pmax=$PERCENT_MAX "

     case "$COLOR_MODEL" in
       RGB)
        echo "$LINE" | awk -v PMIN="$PERCENT_MIN" -v PMAX="$PERCENT_MAX" \
          '{printf("%s%% %d:%d:%d\n%s%% %d:%d:%d\n", PMIN, $2, $3, $4, PMAX, $6, $7, $8)}' >> "$TMP"
        ;;
       HSV)
        H1=`echo "$LINE" | awk '{print $2}'`
        S1=`echo "$LINE" | awk '{print $3}'`
        V1=`echo "$LINE" | awk '{print $4}'`
        H2=`echo "$LINE" | awk '{print $6}'`
        S2=`echo "$LINE" | awk '{print $7}'`
        V2=`echo "$LINE" | awk '{print $8}'`

        RGB1=`HSVtoRGB "$H1" "$S1" "$V1"`
	RGB2=`HSVtoRGB "$H2" "$S2" "$V2"`

        echo "${PERCENT_MIN}% $RGB1" >> "$TMP"
	echo "${PERCENT_MAX}% $RGB2" >> "$TMP"
        ;;
     esac

  done < "$GIS_OPT_INPUT"
fi


#### apply new rules

uniq "$TMP" "${TMP}.u"

if [ -n "$GIS_OPT_MAP" ] ; then
   if [ `echo "$GRASS_VERSION" | cut -f1,2 -d.` = "6.2" ] ; then
     # 6.2's rules= doesn't take a filename
     r.colors map="$GIS_OPT_MAP" color=rules < "${TMP}.u"
   else
     # assume 6.3 or newer
     r.colors map="$GIS_OPT_MAP" rules="${TMP}.u"
   fi
fi

if [ -n "$GIS_OPT_OUTPUT" ] ; then
   if [ "$GIS_OPT_OUTPUT" = "-" ] ; then
      cat "${TMP}.u"
   else
      cp "${TMP}.u" "$GIS_OPT_OUTPUT"
   fi
fi

\rm "$TMP" "${TMP}.u"
