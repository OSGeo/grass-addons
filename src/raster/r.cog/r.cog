#!/bin/sh
#
############################################################################
#
# MODULE:       r.cog
#
# AUTHOR(S):    Hamish Bowman, Dunedin, New Zealand
#
# PURPOSE:      Find the center of gravity of a raster map, by area cover
#
# COPYRIGHT:    (c) 2012 Hamish Bowman, and the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#% description: Find the center of gravity of a raster map, by area cover.
#% keywords: raster, cluster
#%End
#%option
#% key: map
#% type: string
#% gisprompt: old,cell,raster
#% description: Name of input raster map
#% required : yes
#%end
#%option
#% key: cat
#% label: Specify category value(s) to work on
#% description: Example: 1,3,7-9,13
#%end
#%option
#% key: plane
#% description: Name for optional planar trend map at the center of gravity
#% type: string
#% gisprompt: new,cell,raster
#%end
#%flag
#% key: d
#% description: Draw a marker on the point using the d.mark addon module
#%end
#%flag
#% key: a
#% description: Display map trend (average azimuth and dip angle)
#%end
#%flag
#% key: g
#% description: Print in shell script style
#%end

##%flag
##% key: m
##% description: Use median instead of mean for z-center
##%end
## or trimmed mean?


if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

MAP="$GIS_OPT_MAP"
CAT=`echo "$GIS_OPT_CAT" | sed -e 's/,/ /g' -e 's/-/ thru /'`
#g.message -d message="cats = [$CAT]"

# check for input map
eval `g.findfile element=cell file="$MAP"`
if [ ! "$file" ] ; then
    g.message -e "Raster map <$MAP> does not exist."
    exit 1
fi


if [ -n "$CAT" ] ; then
   # r.reclass flattens it to all be = 1, so no slope or aspect
   #   using r.mapcalc to extract the cats could fix that, but parsing would be a pain
   if [ -n "$GIS_OPT_PLANE" ] ; then
      g.message -e "The cat and plane options are not (currently) compatible"
      exit 1
   fi
   if [ "$GIS_FLAG_A" -eq 1 ] ; then
      g.message -e "The cat and angle options are not (currently) compatible"
      exit 1
   fi
fi


cleanup()
{
  if [ -n "$CAT" ] ; then
      g.remove --quiet rast="$TMP_MAP"
  fi
  if [ "$GIS_FLAG_A" -eq 1 ] ; then
      g.remove --quiet rast="$TMP_MAP.slope,$TMP_MAP.dx,$TMP_MAP.dy"
  fi
}
trap "cleanup" 2 3 15


# -p needs -a
if [ -n "$GIS_OPT_PLANE" ] ; then
   if [ "$GIS_FLAG_A" -eq 0 ] ; then
      GIS_FLAG_A=1
   fi
fi


TMP_MAP="tmp.rcog.$$"
if [ -n "$CAT" ] ; then
   r.reclass in="$MAP" out="$TMP_MAP" rules=- << EOF
$CAT = 1
* = NULL
EOF
   MAP="$TMP_MAP"
fi

COG_XY=`r.out.xyz in="$MAP" out=- --quiet | cut -f1,2 -d'|' | \
  awk -F'|' \
    'BEGIN { sum_x=0.0; sum_y=0.0; i=0 }
       { sum_x += $1; sum_y += $2; i++ }
     END { if(i>0) { printf("%.15g|%.15g\n", sum_x/i, sum_y/i) } }'`

if [ "$GIS_FLAG_D" -eq 1 ] ; then
   if [ ! -x `which d.mark` ] ; then
      g.message -e "d.mark addon module not found. Please install."
      exit 1
   fi
   d.mark -m at=`echo "$COG_XY" | tr '|' ','`
fi

if [ -n "$CAT" ] ; then
   #d.rast $TMP_MAP
   eval `r.univar -g map="$GIS_OPT_MAP" zones="$TMP_MAP" | grep '^me'`
else
   eval `r.univar -g map="$MAP" | grep '^me'`
fi

#maybe use median or trimmed mean?  += 'r.univar -e'

COG_Z="$mean"
#g.message -d message="mean=$mean   median=$median"
#g.message -d message=" "

EAST=`echo "$COG_XY" | cut -f1 -d'|'`
NORTH=`echo "$COG_XY" | cut -f2 -d'|'`
if [ "$GIS_FLAG_G" -eq 0 ] ; then
   echo "Center of gravity: $EAST,$NORTH"
   echo "Average elevation: $COG_Z"
else
   echo -n "$COG_XY|$COG_Z"
fi


if [ "$GIS_FLAG_A" -eq 0 ] ; then
   if [ "$GIS_FLAG_G" -eq 1 ] ; then
      echo
   fi
   cleanup
   exit 0
fi


# calc mean slope and dip angle
r.slope.aspect elev="$MAP" \
  slope="$TMP_MAP.slope" \
  dx="$TMP_MAP.dx" \
  dy="$TMP_MAP.dy" \
  prec=double --quiet

## FIXME:
## {mean || median} slope is the wrong thing to use here. e.g. if you had some
##   terrain riddled with canyons and pinacles, but no overall gradient, the
##   mean slope would be quite high, but the overall region gradient would be
##   near zero.
## If all else fails we could use a 2D least-squares on the DEM, or perhaps run
##   v.surf.rst with very high smoothing and low tension ...?
#
# maybe the r.univar mean or median of the magnitude of the axes' 1st derivatives:
#   ??
#
#DIP_try1=`r.univar -eg map="$TMP_MAP.slope" | grep '^median=' | cut -f2 -d'='`
#
#GRASS_VERBOSE=0 \
#  r.mapcalc "$TMP_MAP.magnitude = sqrt(tmp.rcog.$$.dx^2 \
#                                     + tmp.rcog.$$.dy^2)"
#DIP=`r.univar -eg map="$TMP_MAP.magnitude" | grep '^median=' | cut -f2 -d'='`

DX=`r.univar -g map="$TMP_MAP.dx" | grep '^mean=' | cut -f2 -d'='`
DY=`r.univar -g map="$TMP_MAP.dy" | grep '^mean=' | cut -f2 -d'='`

# maybe use length along az not simply avg cell res() dist?
GRASS_VERBOSE=0 \
  r.mapcalc "$TMP_MAP.dz = nsres() * tan($TMP_MAP.slope)"


###  the problem here is that slope is always positive, so the dz's
###   are cumulative instead of cancelling each other out..

DZ=`r.univar -g map="$TMP_MAP.dz" | grep '^mean=' | cut -f2 -d'='`
#DZ=`r.univar -g map="$TMP_MAP.dz" | grep '^sum=' | cut -f2 -d'='`

eval `g.region -gu | grep res`
RES="$nsres"
PI=3.14159265358979323846

DIP=`echo "$DZ $RES" | awk -v PI="$PI" '{print atan2($1, $2) * (180/PI)}'`
AZ=`echo "$DX $DY" | awk -v PI="$PI" '{print atan2($2, $1) * (180/PI)}'`

if [ "$GIS_FLAG_G" -eq 0 ] ; then
   echo "Azimuth: $AZ"
   echo "Dip angle: $DIP"
else
   echo "|$AZ|$DIP"
fi

#g.message -d message=".  slope=$DIP   dx=$DX   dy=$DY"


if [ -z "$GIS_OPT_PLANE" ] ; then
   cleanup
   exit 0
fi


#### create a plane

# note we need to add 270 since r.plane is wierd
theta=`echo "$AZ" | awk '{print ($1 + 270.) % 360}'`

r.plane name="$GIS_OPT_PLANE" dip="$DIP"  azimuth="$theta" \
  east="$EAST" north="$NORTH" elev="$COG_Z" type=double --quiet
#r.colors "$GIS_OPT_PLANE" rast="$MAP"

cleanup
