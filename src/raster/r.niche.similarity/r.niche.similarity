#!/bin/sh
# 
#set -vx

########################################################################
# 
# MODULE:       r.niche.similarity
# AUTHOR(S):    Paulo van Breugel <p.vanbreugel AT gmail.com>
# PURPOSE:      Compute  degree of niche overlap using the statistics D
#               and I (as proposed by Warren et al., 2008) based on 
#               Schoeners D (Schoener, 1968) and Hellinger Distances 
#               (van der Vaart, 1998)
#
# COPYRIGHT: (C) 2013 Paulo van Breugel
#            http://ecodiv.org
#            http://pvanb.wordpress.com/
# 
#            This program is free software under the GNU General Public 
#            License (>=v2). Read the file COPYING that comes with GRASS 
#            for details. 
# 
########################################################################
#
#%Module 
#% description: Computes niche overlap or similarity
#%End 

#%option
#% key: maps
#% type: string
#% gisprompt: old,cell,raster
#% description: Input maps
#% key_desc: name
#% required: yes
#% multiple: yes
#% guisection: Suitability distribution maps
#%end

#%option
#% key: output_file
#% type: string
#% gisprompt: new
#% description: Name of output text file
#% key_desc: name
#% required: no
#%end

#%flag
#% key: i
#% description: Calculate I niche similarity
#% guisection: Statistics
#%end

#%flag
#% key: d
#% description: Calculate D niche similarity
#% guisection: Statistics
#%end


#=======================================================================
## GRASS team recommandations
#=======================================================================

## Check if in GRASS
if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

## check for awk
if [ ! -x "$(which awk)" ] ; then
    g.message -e "<awk> required, please install <awk> or <gawk> first"
    exit 1
fi

## To parse the code into interactive menu
if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

## set environment so that awk works properly in all languages ##
unset LC_ALL
export LC_NUMERIC=C


## what to do in case of user break:
exitprocedure()
{
    echo "User break!"
    cleanup
    exit 1
}
 
## shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

#=======================================================================
## function
#=======================================================================

cleanup()
{
   g.mremove -f rast="rnicheOVERLAP$$_*" --quiet
   g.mremove -f rast="rnicheEQUIV$$_*" --quiet
}
trap "cleanup" 2 3 15


#=======================================================================
## Check input
#=======================================================================

INMAPS=${GIS_OPT_MAPS}
OPF=${GIS_OPT_OUTPUT_FILE}

if [ $GIS_FLAG_I -eq 0 -a $GIS_FLAG_D -eq 0 ]; 
then
    g.message -e message='Please do not forget to select at least one of the statistics. Exiting'
    exit 1
fi

NLAY=`echo $INMAPS | tr ',' '\n' | wc -l`
if [ "$NLAY" -lt 2 ] ; then
   g.message -e "More than one map is required."
   exit 1
fi

#=======================================================================
## Test if file exists. If so, append _v1 to file name
#=======================================================================

k=1
OPFN=$OPF
while [ -f "$OPF" ]; do
   a1=`echo $OPFN | awk -F. '{print $1}'`
   a2=`echo $OPFN | awk -F. '{print $2}'`
   OPF=${a1}_v${k}.${a2}
   k=$((k + 1))
done
if [ $k -gt 1 ]; then
   g.message -w "There is already a file $OPFN
   Will use ${OPF} instead"
fi

#=======================================================================
## Calculate D and I and write to standard output (& optionally to file)
#=======================================================================

TEMP1=`g.tempfile pid=$$`

OIFS=$IFS
IFS=,
for nvar in ${INMAPS} ; do
    tmp1=$(echo $nvar | awk 'BEGIN{FS="@"}{print $1}')
    tmp2=`r.univar -g map=$tmp1 | awk -F\= '$1=="sum" { print $2 }'` 
    # Check if input layer contains values (which would result in 
    # unintelligent error messages and no result)
    if [ -z "$tmp2" ]; then 
        g.message -e "Layer $tmp1 does not contain values (=NULL). Please check"
        exit 1
    fi
    echo $nvar":"$tmp1":"$tmp2 >> $TEMP1
done
IFS=$OIFS

# Write text file with column headers
if [ -n "$OPF" ]; then 
        echo "raster1,raster2,statistic,value" > "$OPF"
fi

# Write D and I values to standard output and optionally to text file
i=1
while [ $i -lt $NLAY ]
do
    j=$((i + 1))
    SUM1=`awk 'NR=='$i $TEMP1 | awk -F: '{ print $3 }'`
    NAME1=`awk 'NR=='$i $TEMP1 | awk -F: '{ print $2 }'`
    MAP1=`awk 'NR=='$i $TEMP1 | awk -F: '{ print $1 }'`
    
    while [ $j -le $NLAY ]
        do
           SUM2=`awk 'NR=='$j $TEMP1 | awk -F: '{ print $3 }'`
           NAME2=`awk 'NR=='$j $TEMP1 | awk -F: '{ print $2 }'`
           MAP2=`awk 'NR=='$j $TEMP1 | awk -F: '{ print $1 }'`
           
               #=======================================================================
               ## Calculate D (Schoener's 1968)
               #=======================================================================

               if [ $GIS_FLAG_D -eq 1 ] ; then
                   TMPFILE1=rnicheOVERLAP$$_$$
                   r.mapcalc "$TMPFILE1 = abs(double($MAP1)/$SUM1 - double($MAP2)/$SUM2)"
                   NO=`r.univar -g map=$TMPFILE1 | awk -F\= '$1=="sum" { print $2 }'`
                   NOV=$(echo "1 - 0.5 * $NO" | bc)
                   g.remove --q rast=$TMPFILE1
                   if [ -n "$OPF" ] ; then 
                       echo "$NAME1,$NAME2,D,$NOV" >> "$OPF"
                   fi
                   echo "niche overlap (D) of $NAME1 and $NAME2: $NOV"
               fi
           
               #=======================================================================
               ## Calculate I (Warren et al. 2008), but note that the original formulation
               ## was corrected in erratum by Warren et al, using I = 1 - H^2 * 0.5
               ## The sqrt in the H formulation and this new ^2 cancel each other out,
               ## leading to the formulation used below.
               #=======================================================================
               
               if [ $GIS_FLAG_I -eq 1 ] ; then
                   TMPFILE2=rnicheEQUIV$$_$$
                   r.mapcalc "$TMPFILE2 = (sqrt(double($MAP1)/$SUM1) - sqrt(double($MAP2)/$SUM2))^2"
                   NE=`r.univar -g map=$TMPFILE2 | awk -F\= '$1=="sum" { print $2 }'`
                   NEQ=$(echo "1 - (0.5 * $NE)" | bc)
                   g.remove --q rast=$TMPFILE2
                   if [ -n "$OPF" ] ; then 
                       echo "$NAME1,$NAME2,I,$NEQ" >> "$OPF"
                   fi
                   echo "niche overlap (I) of $NAME1 and $NAME2: $NEQ"
               fi
               j=$((j + 1))
        done
     i=$((i + 1))
done

cleanup

exit








    
