#!/bin/sh
############################################################################
#
# MODULE:       r.out.kml
# AUTHOR(S):    Hamish Bowman, Dunedin, New Zealand
#		Ideas from Roger André and v.out.kml by Peter Loewe
# PURPOSE:      Export GRASS raster maps with a KML file.
#		Must be in geographic coordinates (lat/lon).
# COPYRIGHT:    (c) 2009 Hamish Bowman, and the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
# Restricted to LL WGS84 (epsg 4326) or convergence angle < 1px per 1280x1024
# TODO: Ensure vertical datum is EGM96  (r.info -d; r.support vdatum=)
# TODO: Add a -k flag to d.out.file to do KML output
#############################################################################

#%Module
#%  description: Creates KML and image files from a GRASS raster map.
#%End
#%option
#% key: map
#% type: string
#% gisprompt: old,cell,raster
#% description: Raster input map
#% required : yes
#%end
#%option
#% key: output
#% type: string
##% gisprompt: new_file,file,file
#% description: Base name of KML and image output files
#% required : no
#%end
#%option
#% key: format
#% type: string
#% options: png,jpeg,geotiff
#% answer: png
#% description: Graphics file format
#%end
#%flag
#% key: z
#% description: Create a KMZ file instead of KML and image files
#%end


if  [ -z "$GISBASE" ] ; then
   echo "You must be in GRASS GIS to run this program." 1>&2
   exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
   exec g.parser "$0" "$@"
fi


#### check if we have zip
if [ "$GIS_FLAG_Z" -eq 1 ] && [ ! -x "`which zip`" ] ; then
    g.message -e  "zip required for creating KMZ, please install first"
    exit 1
fi


MAP_NAME="$GIS_OPT_MAP"

g.findfile element=cell file="$MAP_NAME" > /dev/null
if [ $? -ne 0 ] ; then
     g.message -e "Map <$MAP_NAME> not found"
     exit 1
fi

MAP_TITLE=`r.info -m $MAP_NAME | cut -f2 -d=`

if [ -n "$GIS_OPT_OUTPUT" ] ; then
   OUT_NAME="$GIS_OPT_OUTPUT"
else
   OUT_NAME="$MAP_NAME"
fi


case "$GIS_OPT_FORMAT" in
   png)
     IMG_EXT=png
     #GDAL_FMT=PNG
     ;;
   jpeg)
     IMG_EXT=jpg
     #GDAL_FMT=JPEG
     if [ ! -x `which pnmtojpeg` ] ; then
        g.message -e "NetPBM tools required for JPEG export. Please install."
	exit 1
     fi
     ;;
   geotiff)
     IMG_EXT=tif
     #GDAL_FMT=GTiff
     ;;
esac


if [ -e "$OUT_NAME.kml" ] ||  [ -e "$OUT_NAME.$IMG_EXT" ] ; then
   if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -ne 1 ] ; then
      g.message -e "Output file already exists."
      exit 1
   fi
fi


IS_LL_WGS84=false
if [ `g.proj -p | grep -w '^name' | grep -c 'Latitude-Longitude'` -eq 1 ] ; then
   if [ `g.proj -p | grep -w '^datum' | grep -c 'wgs84'` -eq 1 ] ; then
      IS_LL_WGS84=true
   fi
fi

if [ "$IS_LL_WGS84" = "false" ] ; then
   # check convergence angle is less than (arbitrary) 1px per 1280x1024 (~= 0.09 degrees)
   # also test conv angle at 4 corners? (world wide scale image might be ok at 0,0 center, but horrible elsewhere)
   eval `g.region -gn`
   CONV_ANGLE_3INT=`echo $converge_angle | sed -e 's/\.//' | cut -b 1-3`
   if [ "$CONV_ANGLE_3INT" -gt 009 ] ; then
     g.message -e "Convergence angle too great for undistorted output, reproject first. ($converge_angle degrees)"
     exit 1
   fi
fi


if [ "$IS_LL_WGS84" = "true" ] ; then
   eval `g.region -g`
   NORTH=$n
   SOUTH=$s
   WEST=$w
   EAST=$e
else
   eval `g.region -gb`
   NORTH=$ll_n
   SOUTH=$ll_s
   WEST=$ll_w
   EAST=$ll_e
fi

cat << EOF > "$OUT_NAME.kml"
<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<GroundOverlay>
  <name>$MAP_NAME</name>
  <description>$MAP_TITLE</description>
  <visibility>1</visibility>
  <open>1</open>
  <Icon>
    <href>$OUT_NAME.$IMG_EXT</href>
  </Icon>
  <drawOrder>0</drawOrder>
  <LatLonBox>
    <north>$NORTH</north>
    <south>$SOUTH</south>
    <west>$WEST</west>
    <east>$EAST</east>
  </LatLonBox>
</GroundOverlay>
</kml>
EOF


case "$GIS_OPT_FORMAT" in
   png)
     # NULL transparency flag new for r.out.png in GRASS 6.5+
     if [ `r.out.png --interface-description | grep -c '<flag name="t">'` -eq 1 ] ; then
	TRANSP="-t"
     else
	g.message -w "NULL cell transparency requires a newer version of GRASS"
	TRANSP=""
     fi
     r.out.png input="$MAP_NAME" output="$OUT_NAME.$IMG_EXT" --quiet $TRANSP
     ;;
   jpeg)
     r.out.ppm input="$MAP_NAME" output="$OUT_NAME.ppm" --quiet
     pnmtojpeg --quality=85 "$OUT_NAME.ppm" > "$OUT_NAME.$IMG_EXT"
     \rm "$OUT_NAME.ppm"
     ;;
   geotiff)
     r.out.gdal input="$MAP_NAME" output="$OUT_NAME.$IMG_EXT"
     ;;
esac

# create KMZ if requested
if [ "$GIS_FLAG_Z" -eq 1 ] ; then
   zip -m "$OUT_NAME.kmz"  "$OUT_NAME.kml" "$OUT_NAME.$IMG_EXT"
fi


#done

