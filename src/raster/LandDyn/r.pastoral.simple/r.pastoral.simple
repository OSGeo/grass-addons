#!/bin/sh
#
############################################################################
#
# MODULE:       	r.pastoral.simple
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		Creates a series of iterative pastoral landuse maps from a catchment
#			created by r.catchment. This model does not take pastoral ecology or economy into account. 
#			Optionally outputs c factor as well
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: Creates a series of iterative pastoral landuse maps from a catchmentcreated by r.catchment. This model does not take pastoral ecology or economy into account. Optionally outputs c factor as well
#%END

#%option
#% key: inmap
#% type: string
#% gisprompt: old,cell,raster
#% description: Input catchment map (from r.cost.areas or r.buffer)
#% required : yes
#%END
#%option
#% key: rand
#% type: integer
#% description: percent of area to be grazed in any year (to be used in r.random)
#% answer: 50
#% required : yes
#%END
#%option
#% key: size
#% type: integer
#% description: size of grazing patches (set as resolution in g.region)
#% answer: 30
#% required : yes
#%END
#%option
#% key: effect
#% type: integer
#% description: Intensity of grazing (amount by which landcover is decreased after grazing)
#% answer: 1
#% options: 1,2,3,4,5
#% required : yes
#%END
#%option
#% key: loop
#% type: integer
#% description: number of iterations ("years") to run
#% answer: 10
#% required : yes
#%END
#%option
#% key: prfx
#% type: string
#% gisprompt: string
#% description: prefix for all output maps
#% answer: landcover
#% required : yes
#%END
#%flag
#% key: l
#% description: -l Suppress output of C factor map (output landuse map only)
#%END
#%flag
#% key: f
#% description: -f Output maps of random grazing patches at each iteration as well
#%END
#%flag
#% key: s
#% description: -s Output text file of land-use stats from the simulation (will be named "prefix"_luse_stats.txt, and will be overwritten if you run the simulation again with the same prefix)
#%END


if  [ -z "$GISBASE" ] ; then
 g.message -e  "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

inmap=$GIS_OPT_inmap
inmapa=$GIS_OPT_inmapa
rand=$GIS_OPT_rand
size=$GIS_OPT_size
loop=$GIS_OPT_loop
effect=$GIS_OPT_effect
prfx=$GIS_OPT_prfx
timer=$prfx".timer1"
txtout=$prfx"_luse_stats.txt"

TMP1=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP1" ] ; then
    g.message -e "ERROR: unable to create temporary file" 1>&2
    exit 1
fi

TMP2=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP2" ] ; then
    g.message -e "ERROR: unable to create temporary file for colors" 1>&2
    exit 1
fi

echo "0 grey" > $TMP2
echo "5 brown" >> $TMP2
echo "10 orange" >> $TMP2
echo "15 yellow" >> $TMP2
echo "21 green" >> $TMP2
echo "end" >> $TMP2

TMP3=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP3" ] ; then
    g.message -e "ERROR: unable to create temporary file for categories" 1>&2
    exit 1
fi

echo "0 = 0 badly overgrazed" > $TMP3
echo "1 = 1 overgrazed" >> $TMP3
echo "2 = 2 sparse grassland" >> $TMP3
echo "3 = 3 moderate grassland" >> $TMP3
echo "4 = 4 grassland" >> $TMP3
echo "5 = 5 grass and sparse shrubs" >> $TMP3
echo "6 = 6 grass and shrubs" >> $TMP3
echo "7 = 7 mainly shrubs" >> $TMP3
echo "8 = 8 developing maquis" >> $TMP3
echo "9 = 9 moderate maquis" >> $TMP3
echo "10 = 10 maquis" >> $TMP3
echo "11 = 11 moderately dense maquis" >> $TMP3
echo "12 = 12 dense maquis" >> $TMP3
echo "13 = 13 maquis and small trees" >> $TMP3
echo "14 = 14 young woodland and maquis" >> $TMP3
echo "15 = 15 mostly young open woodland" >> $TMP3
echo "16 = 16 young open woodland" >> $TMP3
echo "17 = 17 moderate open woodland" >> $TMP3
echo "18 = 18 maturing and moderate open woodland" >> $TMP3
echo "19 = 19 maturing open woodland" >> $TMP3
echo "20 = 20 mostly matured open woodland" >> $TMP3
echo "21 = 21 fully matured woodland" >> $TMP3
echo "end" >> $TMP3

TMP4=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP4" ] ; then
    echo "ERROR: unable to create temporary file for categories" 1>&2
    exit 1
fi

echo "0:1:0.5:0.5" > $TMP4
echo "2:5:0.10:0.10" >> $TMP4
echo "6:9:0.15:0.15" >> $TMP4
echo "10:13:0.18:0.18" >> $TMP4
echo "13:16:0.08:0.08" >> $TMP4
echo "17:20:0.06:0.06" >> $TMP4
echo "21:21:0.05:0.05" >> $TMP4
echo "end" >> $TMP4

TMP5=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP5" ] ; then
    echo "ERROR: unable to create temporary file for colors" 1>&2
    exit 1
fi

echo "0.5 grey" > $TMP5
echo "0.6 grey" >> $TMP5
echo "0.19 brown" >> $TMP5
echo "0.17 brown" >> $TMP5
echo "0.10 yellow" >> $TMP5
echo "0.05 green" >> $TMP5
echo "end" >> $TMP5



g.message message=''
g.message message='*************************'
g.message message='step 1 of 4: Calculating MASK'
g.message message='*************************'
g.message message=''


r.mask --quiet input=$inmap maskcats=*


g.message message=''
g.message message='*************************'
g.message message='step 2 of 4: Changing resolution to field size (will be reset)'
g.message message='*************************'
g.message message=''

g.region save=temp_region

g.region res=$size



g.message message=''
g.message message='*************************'
g.message message='step 3 of 4: Sarting land use evolution calculation. This will start a loop and may take some time. Please do not interrupt the process until it has finished'
g.message message='*************************'
g.message message=''


g.message message="iteration 1"

r.mapcalc "tmpinreclass = if ($inmap, 1, null())"

patches=$prfx"_patches1"


r.random --q input=tmpinreclass n=$rand"%" raster_output=$patches

if [ "$GIS_FLAG_f" -eq 1 ]; then

	g.message message="grazing patches map = $patches"

	fi

r.mapcalc "$timer = if (isnull($patches), 21, 21-$effect)"


	cat $TMP3 | r.reclass --q input=$timer output=temp_landuse1

	r.mapcalc "$prfx"_landuse1" = temp_landuse1"

	cat $TMP2 | r.colors --q map=$prfx"_landuse1" color=rules

	cat $TMP4 | r.recode --q input=$prfx"_landuse1" output=$prfx"_cfactor_1"

	cat $TMP5 | r.colors --q map=$prfx"_cfactor_1" color=rules


 	temparea=`eval r.stats -n -a fs=- input=$patches | cut -d'-' -f2`
	g.message message=''
	g.message message="Area of new randomized grazing patches = $temparea square meters"



g.message message="***********************"

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "Stats for $loop years of grazing at $rand% grazing of the landscape in $size square meter patches" > $txtout
g.message message='' >> $txtout
echo "Year 1:" >> $txtout
g.message message='' >> $txtout
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout
g.message message='' >> $txtout
r.stats -a -l -n input=$prfx"_landuse1" fs=, nv=* nsteps=255 >> $txtout

fi

step=1


while [ "$step" -lt "$loop" ]
do
	step=$(($step+1))
	g.message message="iteration $step"
	laststep=$(($step-1))

	

	outcfactor=$prfx"_cfactor_"$step
	tmplanduse="temp_landuse"$step
	outlanduse=$prfx"_landuse"$step
	outpatches=$prfx"_patches"$step
	newtimer=$prfx".timer"$step
	oldtimer=$prfx".timer"$laststep
	r.random --q input=tmpinreclass n=$rand"%" raster_output=$outpatches 	
	
	if [ "$GIS_FLAG_f" -eq 1 ]; then

	g.message message="grazing patches map = $outpatches"

	fi

r.mapcalc "$newtimer= if (isnull($outpatches) && $oldtimer <= 20, $oldtimer + 1, (if(isnull($outpatches), 21, (if ($oldtimer < $effect, 0, $oldtimer - $effect)))))"

	

	cat $TMP3 | r.reclass --q input=$newtimer output=$tmplanduse

	r.mapcalc "$outlanduse = $tmplanduse"

	cat $TMP2 | r.colors --q map=$outlanduse color=rules

	cat $TMP4 | r.recode --q input=$outlanduse output=$outcfactor

	cat $TMP5 | r.colors --q map=$outcfactor color=rules

 	temparea=`eval r.stats -n -a fs=- input=$outpatches | cut -d'-' -f2`
	g.message message=''
	g.message message="Area of new randomized grazing patches = $temparea square meters"
g.message message=''
g.message message=''
g.message message="************************"
g.message message=''

if [ "$GIS_FLAG_s" -eq 1 ]; then

g.message message='' >> $txtout
echo "Year $step:" >> $txtout
g.message message='' >> $txtout
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout
g.message message='' >> $txtout
r.stats -a -l -n input=$outlanduse fs=, nv=* nsteps=255 >> $txtout
	
fi

done


g.message message=''
g.message message="*************************"
g.message message="step 4 of 4: Cleaning up"
g.message message="*************************"
g.message message=''

if [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --q rast=temp_landuse*
g.mremove -f --q rast=$prfx"_cfactor*"
g.mremove -f --q rast=$prfx".timer*"
g.remove --q rast=tmpinreclass,MASK

elif [ "$GIS_FLAG_f" -eq 0 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --q rast=$prfx"_patches*"
g.mremove -f --q rast=temp_landuse*
g.mremove -f --q rast=$prfx"_cfactor*"
g.mremove -f --q rast=$prfx".timer*"
g.remove --q rast=tmpinreclass,MASK

elif [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 0 ] ; then

g.remove --q rast=tmpinreclass,MASK
g.mremove -f --q rast=temp_landuse*
g.mremove -f --q rast=$prfx".timer*"
else


g.mremove -f --q rast=$prfx"_patches*"
g.mremove -f --q rast=temp_landuse*
g.remove --q rast=tmpinreclass,MASK
g.mremove -f --q rast=$prfx".timer*"

fi


\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort
\rm -f $TMP5 $TMP5.sort


g.message message=''
g.message message="Resetting region"
g.message message=''

g.region -g region=temp_region
g.remove --q region=temp_region


g.message message=''
g.message message='DONE!'
g.message message=''
g.message message=''

