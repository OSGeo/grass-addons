#!/bin/sh
#
############################################################################
#
# MODULE:       	r.agropast
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		simulates the landuse activities of agropastoralists around sites (vector 
#			points) using cost distances. Module requires r.walk.
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: simulates the landuse activities of agropastoralists around sites (vector points) using cost distances. Module requires r.walk.
#%END
#%option
#% key: elev
#% type: string
#% gisprompt: old,cell,raster
#% description: Input elevation map (DEM)
#% required : yes
#%END
#%option
#% key: vect
#% type: string
#% gisprompt: old,vector,vector
#% description: Name of input vector site points map
#% required : yes
#%END
#%option
#% key: frict
#% type: string
#% gisprompt: old,cell,raster
#% description: Optional map of friction costs. If no map selected, default friction=1 making output reflect time costs only
#% answer:
#% required : no
#%END
#%option
#% key: a
#% type: double
#% description: Coefficients for walking energy formula parameters a,b,c,d
#% answer: 0.72
#% required : no
#%END
#%option
#% key: b
#% type: double
#% description:
#% answer: 6.0
#% required : no
#%END
#%option
#% key: c
#% type: double
#% description:
#% answer: 1.9998
#% required : no
#%END
#%option
#% key: d
#% type: double
#% description:
#% answer: -1.9998
#% required : no
#%END
#%option
#% key: lambda
#% type: double
#% description: Lambda value for cost distance calculation
#% answer: 0
#% required : yes
#%END
#%option
#% key: slope_factor
#% type: double
#% description: Slope factor determines travel energy cost per height step
#% answer: -0.2125
#% required : no
#%END

#%option
#% key: step_size
#% type: integer
#% description: Integer length of the catchment size step. (smaller values will yield more accurate results, but will take significantly longer. ie. there will be more iteration steps)
#% answer: 10
#% required : yes
#%END
#%option
#% key: prfx
#% type: string
#% gisprompt: string
#% description: prefix for all output maps
#% answer: agropast
#% required : yes
#%END

#%option
#% key: inituse
#% type: string
#% gisprompt: old,cell,raster
#% description: Optional initial landscape (Coded 0-21. If no map specified, an initial landscape of value 21 (mature woodland) is used)
#% required : no
#% guisection: model_parameters
#%END
#%option
#% key: fbmas
#% type: integer
#% description: Average mature woodland edible biomass (kg/ha/year)
#% answer: 350
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: sbmas
#% type: integer
#% description: Average shrubland edible biomass (kg/ha/year)
#% answer: 200
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: gbmas
#% type: integer
#% description: Average grassland edible biomass (kg/ha/year)
#% answer: 100
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: gweight
#% type: integer
#% description: Average weight of forage one goat for one year (kg)
#% answer: 584
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: sweight
#% type: integer
#% description: Average weight of forage for one sheep for year (kg)
#% answer: 894
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: number
#% type: integer
#% description: Number of herd animals you wish to have graze
#% answer: 30
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: gratio
#% type: integer
#% description: ratio of goats to sheep (ie. enter 1 for 1 goat to n sheep)
#% answer: 1
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: sratio
#% type: integer
#% description: ratio of sheep to goats (ie. enter 1 for n goats to 1 sheep)
#% answer: 1
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: effect
#% type: integer
#% description: Intensity of grazing (amount by which landcover is decreased after grazing)
#% answer: 1
#% options: 1,2,3,4,5
#% required : yes
#% guisection: model_parameters
#%END
#%option
#% key: dist
#% type: integer
#% description: Optional straight-line maximum distance for one-way flock movements away from the starting point (integer meters) (simulation will end when catchment exceeds this value in all four cardinal directions)
#% required : no
#% guisection: model_parameters
#%END
#%option
#% key: loop
#% type: integer
#% description: number of iterations ("years") to run
#% answer: 20
#% required : yes
#% guisection: model_parameters
#%END

#%flag
#% key: k
#% description: -k Use knight's move for calculating cost surface (slower but more accurate)
#%END
#%flag
#% key: c
#% description: -c Keep output cost surface
#%END
#%flag
#% key: f
#% description: -f Create C-factor maps (for RUSLE and USPED) from output landcover maps as well
#%END
#%flag
#% key: s
#% description: -s Output stats to comma delimited text files (two files will be created in the home directory with the prefix entered below. They will be over written if you run the module again with the same prefix)
#%END
#%flag
#% key: t
#% description: -t Keep timer map which is coded 0-21 for the various landcover types. Will only reflect cumulative landuse for entire run. Useful for input into another land-use simulation.
#%END



if  [ -z "$GISBASE" ] ; then
 g.message -e message="You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

#these are the variables for the cost surface model needed by r.walk
prfx=$GIS_OPT_prfx
elev=$GIS_OPT_elev
vect=$GIS_OPT_vect
input_frict=$GIS_OPT_frict
lmbda=$GIS_OPT_lambda
slpfct=$GIS_OPT_slope_factor
a=$GIS_OPT_a
b=$GIS_OPT_b
c=$GIS_OPT_c
d=$GIS_OPT_d
sigma=$GIS_OPT_sigma
cost=$prfx"_cost_surface"
frict=$prfx"_friction_in"

#these are variables needed for our purpose
inituse=$GIS_OPT_inituse
dist=$GIS_OPT_dist

effect=$GIS_OPT_effect
stepsize=$GIS_OPT_step_size

gweight=$GIS_OPT_gweight
sweight=$GIS_OPT_sweight
gratio=$GIS_OPT_gratio
sratio=$GIS_OPT_sratio

number=$GIS_OPT_number
loop=$GIS_OPT_loop

txtout=$prfx"_landcover_stats.txt"
txtout2=$prfx"_landuse_stats.txt"


g.region -g rast=$elev

TMP5=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP5" ] ; then
    g.message -e message="ERROR: unable to create temporary file" 1>&2
    exit 1
fi

TMP2=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP2" ] ; then
    g.message -e message="ERROR: unable to create temporary file" 1>&2
    exit 1
fi

TMP3=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP3" ] ; then
    g.message -e message="ERROR: unable to create temporary file" 1>&2
    exit 1
fi

TMP4=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP4" ] ; then
    g.message -e message="ERROR: unable to create temporary file" 1>&2
    exit 1
fi

echo ""
echo "*************************"
echo "step 1 : Calculating cost surface"
echo "*************************"
echo ""
echo "sigma=$sigma"
echo "a,b,c,d=$a,$b,$c,$d"
echo "slope_factor=$slpfct"
echo "lambda=$lmbda"

if [ -n "$GIS_OPT_frict" ]; then

r.mapcalc "$frict=$input_frict"

echo "Calculating costs using input friction map"

else


r.mapcalc "$frict=if(isnull($elev), null(), 1)"

echo "Calculating for time costs only"

fi


if [ "$GIS_FLAG_k" -eq 1 ]; then

echo "Using Knight's move"

r.walk --q elevation=$elev friction=$frict output=$cost start_points=$vect lambda=$lmbda percent_memory=100 nseg=4 walk_coeff=$a,$b,$c,$d slope_factor=$slpfct -k

else

r.walk --q elevation=$elev friction=$frict output=$cost start_points=$vect lambda=$lmbda percent_memory=100 nseg=4 walk_coeff=$a,$b,$c,$d slope_factor=$slpfct

fi

if [ -n "$GIS_OPT_frict" ]; then

echo ""

else

echo ""
g.remove --q rast=$frict

fi



echo ""
echo "*************************"
echo "step 2: Modeling agro-pastoral land-use over $loop years. This will start a loop and may take some time. Please do not interrupt the process until it has finished"
echo "*************************"
echo ""
echo "iteration step size=$stepsize"
echo ""

fbmas=$GIS_OPT_fbmas
sbmas=$GIS_OPT_sbmas
gbmas=$GIS_OPT_gbmas

#below we are setting up our succession sequence for a mediterranean environment... The absolute richness of the environment is controlled by the "biomass" input values for the three main stages of floristic growth (grassland, shrubland, and woodland), the values of which can be found in the ecological or rangeland science literature for specific mediterranean landscapes. All other stages are interpolated between the main three via linear regression. The number of main stages of a twenty year succession will need to be modified for other environments (and perhaps the twenty year time-limit should be expanded or contracted as well), as opposed to just changing the starting biomass values if one really wishes to model accurate succession in a non-mediterranean environment
: $(( a = ( $gbmas / 3 ) ))
: $(( b = ( 2 * ( $gbmas / 3 ) ) ))
: $(( c = ( 3 * ( $gbmas / 3 ) ) ))
d=$gbmas
: $(( e = ( $gbmas + ( ( $sbmas - $gbmas ) / 5 ) ) ))
: $(( f = ( $gbmas + ( 2 * ( ( $sbmas -$gbmas ) / 5 ) ) ) ))
: $(( g = ( $gbmas + ( 3 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
: $(( h = ( $gbmas + ( 4 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
: $(( i = ( $gbmas + ( 5 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
j=$sbmas
: $(( k = ( $sbmas + ( ( $fbmas - $sbmas ) / 11 ) ) ))
: $(( l = ( $sbmas + (2 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( m = ( $sbmas + (3 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( n = ( $sbmas + (4 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( o = ( $sbmas + (5 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( p = ( $sbmas + (6 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( q = ( $sbmas + (7 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( r = ( $sbmas + (8 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( s = ( $sbmas + (9 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( t = ( $sbmas + (10 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
u=$fbmas


# now we take our biomass numbers calculated above and shove them into a temp file that we will use to reclass our timer maps into landcover maps later on
echo "0 = 0 badly overgrazed" > $TMP3
echo "1 = $a overgrazed" >> $TMP3
echo "2 = $b sparse grassland" >> $TMP3
echo "3 = $c moderate grassland" >> $TMP3
echo "4 = $d grassland" >> $TMP3
echo "5 = $e grass and sparse shrubs" >> $TMP3
echo "6 = $f grass and shrubs" >> $TMP3
echo "7 = $g mainly shrubs" >> $TMP3
echo "8 = $h developing maquis" >> $TMP3
echo "9 = $i moderate maquis" >> $TMP3
echo "10 = $j maquis" >> $TMP3
echo "11 = $k moderately dense maquis" >> $TMP3
echo "12 = $l dense maquis" >> $TMP3
echo "13 = $m maquis and small trees" >> $TMP3
echo "14 = $n young woodland and maquis" >> $TMP3
echo "15 = $o mostly young open woodland" >> $TMP3
echo "16 = $p young open woodland" >> $TMP3
echo "17 = $q moderate open woodland" >> $TMP3
echo "18 = $r maturing and moderate open woodland" >> $TMP3
echo "19 = $s maturing open woodland" >> $TMP3
echo "20 = $t mostly matured open woodland" >> $TMP3
echo "21 = $u fully matured woodland" >> $TMP3
echo "end" >> $TMP3


# this creates a tempfile with color values for the output landcover maps
echo "0 grey" > $TMP2
echo "$gbmas brown" >> $TMP2
echo "$sbmas yellow" >> $TMP2
echo "$fbmas green" >> $TMP2
echo "end" >> $TMP2


# this creates a tempfile to recode our timer maps into c-factor maps later on
echo "0:1:0.5:0.5" > $TMP4
echo "2:5:0.10:0.10" >> $TMP4
echo "6:9:0.15:0.15" >> $TMP4
echo "10:13:0.18:0.18" >> $TMP4
echo "13:16:0.08:0.08" >> $TMP4
echo "17:20:0.06:0.06" >> $TMP4
echo "21:21:0.05:0.05" >> $TMP4
echo "end" >> $TMP4

# this creates a tempfile to color our c-factor maps later on

echo "0.5 grey" > $TMP5
echo "0.6 grey" >> $TMP5
echo "0.19 brown" >> $TMP5
echo "0.17 brown" >> $TMP5
echo "0.10 yellow" >> $TMP5
echo "0.05 green" >> $TMP5
echo "end" >> $TMP5

timer=$prfx"_timer"
#creating initial conditions map:
r.mapcalc "$timer=if(isnull ($elev),null(),21)"

#setting up distance info to be used with optional max distance cutoff

: $(( prof_dist = ( $dist - 10 ) ))

easting=`eval v.info --q map=$vect layer=1 | grep E: | cut -d":" -f2 | cut -c"2-7"`
northing=`eval v.info --q map=$vect layer=1 | grep N: | cut -d":" -f2 | cut -c"2-8"
`


#here we determine the max cost on the map to keep our loops from running infinately
max=`eval r.info -r map=$cost | grep "max=" | cut -d"=" -f2 | cut -d'.' -f1`
echo ""
echo "max travel cost across the landscape from originating point = $max"

#here we determine the average amount of forage consumed by one animal in our herd as determined by our herd structure and herd animal ecology
: $(( efkg = ( ( ($sratio * $sweight) + ( $gratio * $gweight) ) / 2 ) )) 


#we need one loop for the first year to get things going before we start the nested loop routine to do the rest of the years
echo ""
echo "Model year 1"
echo ""
step=0 #set up for loop

while [ "$step" -le "$max" ]
do


	step=$(($step+$stepsize)) #controlling loop

	tmplanduse="temp_use_1"
        cost_reclass="temp_class_1"
	tmpbiomas="temp_mass_1"

lastarea=$temparea

	echo "0 thru $step = $effect" | r.reclass --q input=$cost output=$cost_reclass --o

#creating a test landcover map from reclassed cost surface map	
	r.mapcalc "$tmplanduse=if(isnull($cost_reclass), null(), $timer)"
	
	cat $TMP3 | r.reclass --q --o input=$tmplanduse output=$tmpbiomas

	tempbmas=`eval r.sum --q rast=$tmpbiomas | cut -d'.' -f1`

	temparea=`eval r.stats -n -a fs=- input=$cost_reclass | cut -d'-' -f2 | cut -d'.' -f1`
		

#now we run through some equations to discover the affects of this year's simulation on our landscape and our herd population


: $(( bmas = ( ( ( $temparea / 100000000 ) * $tempbmas ) / 34 ) ))
# in above equation, .34 is an "efficiency factor" that is used to modify the total standing biomass to consumable biomass for mixed browse/graze rangelands (averaged from the values for each of those types), and is derived from field sudies done by rangeland scientists (because we can't use decimles in BASH math, I divide by 34 instead of multiplying by .34)

#here we detrermine exactly whats available for our herd to forage based on the intensity of their grazing in each pixel
: $(( ebmas = ($bmas / ( 5 + ( $effect + ( 9 / 4 ) ) ) ) ))

#here we find out exactly how many herd animals can be supported given the above conditions
: $(( num = ( $ebmas / $efkg ) ))


echo "current integer area = $temparea sq m, with $bmas kg of available forage, of which $ebmas kg can be consumed and which will support $num herd animals "

#-o "$temparea" -eq "$lastarea"
 if [ "$num" -ge "$number" ]
 then
   break  # Skip entire rest of loop.
 fi


done

tempfirst="temp_1_"$prfx
firstyear=$prfx"_landcover_1"

if [ -n "$GIS_OPT_inituse" ]; then

r.mapcalc "$timer=if(isnull($tmplanduse) && $inituse < 21, ($inituse + 1), if(isnull($tmplanduse), 21, if ($inituse < $effect, 0, ($inituse - $effect) ) ) )"

else

r.mapcalc "$timer=if(isnull($tmplanduse), 21, 21 - $effect)"

fi

cat $TMP3 | r.reclass --q --o input=$timer output=$tempfirst

r.mapcalc "$firstyear=$tempfirst"

cat $TMP2 | r.colors --q map=$firstyear color=rules

if [ "$GIS_FLAG_f" -eq 1 ]; then

	outcfactor=$prfx"_cfactor_1"

	cat $TMP4 | r.recode --q input=$timer output=$outcfactor

	cat $TMP5 | r.colors --q map=$outcfactor color=rules

fi

#below is output for text files of stats from this model run

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "General landcover stats for $loop years of grazing $num herd animals on the landscape in $size meter square patches" > $txtout
echo "" >> $txtout
echo "Year 1:" >> $txtout
echo "" >> $txtout
echo "Average biomass production (kg/ha/year),Landcover description,Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$firstyear fs=, nv=* nsteps=255 >> $txtout

echo "Landuse stats for $loop years of grazing a target herd size of $number herd animals on the landscape with a $gratio to $sratio goat/sheep ratio where goats need $gweight kg/year of fodder and sheep need $sweight kg/year of fodder with an average of $efkg kg/year per herd animal. " > $txtout2
echo "" >> $txtout2
echo "Year,Total area grazed (sq. m),Total available fodder,Total fodder actually grazed,Actual number of herd animals,Difference from last year's grazing extent (sq m)" >> $txtout2
echo "" >> $txtout2
echo "1,$temparea,$bmas,$ebmas,$num,0" >> $txtout2
fi

#Clean up all the temp maps created above
echo ""
g.mremove -f --q rast="temp_*"

echo ""
echo "__________________________________________________________________"
echo -n "Final area used this year in the pastoral catchment = $temparea which produced $ebmas kg's of consumable forage that supported $num herd animals"
echo "__________________________________________________________________"
echo ""

year=2 #set up for outer loop


while [ "$year" -le "$loop" ]
do
	echo ""
	echo "Model Year $year"
	echo ""
	lastyear=$(($year-1)) #control for some comparisons with output from last iteration
	lastarea=$temparea

step=0 #setup for inner loop

# Here is the inner loop to calculate the size of the catchment for this year in the outer loop
while [ "$step" -le "$max" ]
do
	
	step=$(($step+$stepsize)) #controlling loop

	tmplanduse="temp_use_"$year
        cost_reclass="temp_class_"$year
	tmpbiomas="temp_mass_"$year



	echo "0 thru $step = $effect" | r.reclass --q input=$cost output=$cost_reclass --o

#creating a test landcover map from reclassed cost surface map	
	r.mapcalc "$tmplanduse=if($cost_reclass == $effect, $timer, null())"
	
	cat $TMP3 | r.reclass --q --o input=$tmplanduse output=$tmpbiomas

	tempbmas=`eval r.sum --q rast=$tmpbiomas | cut -d'.' -f1`

	temparea=`eval r.stats -n -a fs=- input=$cost_reclass | cut -d'-' -f2 | cut -d'.' -f1`
		

#now we run through some equations to discover the affects of this year's simulation on our landscape and our herd population


: $(( bmas = ( ( ( $temparea / 100000000 ) * $tempbmas ) / 34 ) ))
# in above equation, .34 is an "efficiency factor" that is used to modify the total standing biomass to consumable biomass for mixed browse/graze rangelands (averaged from the values for each of those types), and is derived from field sudies done by rangeland scientists (because we can't use decimles in BASH math, I divide by 34 instead of multiplying by .34)

#here we detrermine exactly whats available for our herd to forage based on the intensity of their grazing in each pixel
: $(( ebmas = ($bmas / ( 5 + ( $effect + ( 9 / 4 ) ) ) ) ))

#here we find out exactly how many herd animals can be supported given the above conditions
: $(( num = ( $ebmas / $efkg ) ))

echo "current integer area = $temparea sq m, with $bmas kg of available forage, of which $ebmas kg can be consumed and which will support $num herd animals "

#-o "$temparea" -eq "$lastarea"
 if [ "$num" -ge "$number" ]
 then
   break  # Skip entire rest of loop.
 fi


done

: $(( dif = ($temparea - $lastarea) ))

tempyear="temp_"$year"_"$prfx
thisyear=$prfx"_landcover_"$year
lastluse="temp_lastyear"

r.mapcalc "$lastluse=$timer"

#here is the mapcalc statement we are using to control damage by grazing and yearly regeneration of ungrazed areas
r.mapcalc "$timer=if(isnull($tmplanduse) && $lastluse < 21, ($lastluse + 1), if(isnull($tmplanduse), 21, if ($lastluse < $effect, 0, ($lastluse - $effect) ) ) )"

cat $TMP3 | r.reclass --q --o input=$timer output=$tempyear

r.mapcalc "$thisyear=$tempyear"

cat $TMP2 | r.colors --q map=$thisyear color=rules

if [ "$GIS_FLAG_f" -eq 1 ]; then

	outcfactor=$prfx"_cfactor_"$year

	cat $TMP4 | r.recode --q input=$timer output=$outcfactor

	cat $TMP5 | r.colors --q map=$outcfactor color=rules

fi

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "Year $year:" >> $txtout
echo "" >> $txtout
echo "Average biomass production (kg/ha/year),Landcover description,Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$thisyear fs=, nv=* nsteps=255 >> $txtout

#echo "Year,Total area grazed (sq. m),Total available fodder,Total fodder actually grazed,Actual number of herd animals,Difference from last year's grazing extent (sq m)" >> $txtout2
#echo "" >> $txtout2
echo "$year,$temparea,$bmas,$ebmas,$num,$dif" >> $txtout2
fi

#Clean up all temp maps
echo "" 
g.mremove -f --q rast="temp_*"


if [ "$num" -lt "$number" ]; then

echo "************************************************************************"
echo ""
echo "Herd size not supported by total use of the provided landscape!!!!!!"
echo "Ending simulation with total herd size of $num herd animals at year $step"
echo "Try again with lower number of herd animals"


if [ "$GIS_FLAG_s" -eq 1 ]; then
	echo "" >> $txtout
	echo "Year $step: herd number not supported! Ending simulation" >> $txtout
	echo "" >> $txtout2
	echo "Herd number not supported by Year $step! Ending simulation" >> $txtout2
fi

break

fi

#Discovering if forest still exists at the four points in each of the cardinal directions that are "max distance" away from the originating point (site)
eastpoint=`eval r.transect --q map=$thisyear line=$easting,$northing,0,$dist | grep $prof_dist | cut -d" " -f2`

southpoint=`eval r.transect --q map=$thisyear line=$easting,$northing,90,$dist | grep $prof_dist | cut -d" " -f2`

westpoint=`eval r.transect --q map=$thisyear line=$easting,$northing,180,$dist | grep $prof_dist | cut -d" " -f2`

northpoint=`eval r.transect --q map=$thisyear line=$easting,$northing,270,$dist | grep $prof_dist | cut -d" " -f2`

#if forest no longer exists ineach of the four points, then the grazing catchment has exceeded the size limit and we will break out of the loop and end the simulation 
if [ "$eastpoint" -ne "$fbmas" -a "$southpoint" -ne "$fbmas" -a "$westpoint" -ne "$fbmas" -a "$northpoint" -ne "$fbmas" ]; then


echo "************************************************************************"
echo ""
echo "Maximum (straight line) grazing distance reached in each of the four cardinal directions!!!!!!"
echo "Ending simulation with total herd size of $num herd animals at year $step"

if [ "$GIS_FLAG_s" -eq 1 ]; then
	echo "" >> $txtout
	echo "Year $step: Maximum (straight line) grazing distance reached in each of the four cardinal directions! Ending simulation" >> $txtout
	echo "" >> $txtout2
	echo "Maximum (straight line) grazing distance reached in each of the four cardinal directions by Year $step! Ending simulation" >> $txtout2

fi

break

fi


echo ""
echo "__________________________________________________________________"
echo -n "Final area used this year in the pastoral catchment = $temparea which produced $ebmas kg's of consumable forage that supported $num herd animals"
echo "__________________________________________________________________"
echo ""


	year=$(($year+1)) #controlling outer loop

done



if [ "$GIS_FLAG_c" -eq 1 -a "$GIS_FLAG_t" -eq 0 ]; then


echo ""
echo "Cleaning up..."
echo ""

g.remove --q rast=$timer

\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort

echo ""
echo "DONE!"
echo ""
echo "cost surface kept:"
echo ""
echo "cost surface = $cost"
echo ""


elif [ "$GIS_FLAG_c" -eq 1 -a "$GIS_FLAG_t" -eq 1 ]; then

\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort

echo ""
echo "DONE!"
echo ""
echo "cost surface and timer map kept:"
echo ""
echo "cost surface = $cost"
echo "timer = $timer"
echo ""

elif [ "$GIS_FLAG_c" -eq 0 -a "$GIS_FLAG_t" -eq 1 ]; then

echo ""
echo "Cleaning up..."
echo ""

g.remove --q rast=$cost

\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort

echo ""
echo "DONE!"
echo ""
echo "timer map kept:"
echo ""
echo "timer = $timer"
echo ""

else

echo ""
echo "Cleaning up..."
echo ""

g.remove --q rast=$cost,$timer

\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort

echo ""
echo "DONE!"
echo ""

fi


