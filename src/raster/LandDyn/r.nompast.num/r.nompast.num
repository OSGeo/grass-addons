#!/bin/sh
#
############################################################################
#
# MODULE:       	r.nompast.num
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		Creates a series of iterative landuse maps from a catchment
#			created by r.catchment based on vegetational succession, herd ecology, and pastoral economics. 
#			This model holds the number of herd animals constant and calculates the area needed to support 
#			that number of animals. Optionally outputs c factor as well.
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: Creates a series of iterative landuse maps from a catchment created by r.catchment based on vegetational succession, herd ecology, and pastoral economics. This model holds the number of herd animals constant and calculates the area needed to support that number of animals.Optionally outputs c factor as well
#%END
#%option
#% key: inmap
#% type: string
#% gisprompt: old,cell,raster
#% description: Input catchment map (from r.catchment or r.buffer)
#% required : yes
#%END
#%option
#% key: inituse
#% type: string
#% gisprompt: old,cell,raster
#% description: Optional initial landscape (Coded 0-21. If no map specified, an initial landscape of value 21 (mature woodland) is used)
#% required : no
#%END
#%option
#% key: size
#% type: integer
#% description: size of grazing patches (to be used in g.region)
#% answer: 30
#% required : yes
#%END
#%option
#% key: effect
#% type: integer
#% description: Intensity of grazing (amount by which landcover is decreased after grazing)
#% answer: 1
#% options: 1,2,3,4,5
#% required : yes
#%END
#%option
#% key: fbmas
#% type: integer
#% description: Average mature woodland edible biomass (kg/ha/year)
#% answer: 350
#% required : yes
#%END
#%option
#% key: sbmas
#% type: integer
#% description: Average shrubland edible biomass (kg/ha/year)
#% answer: 200
#% required : yes
#%END
#%option
#% key: gbmas
#% type: integer
#% description: Average grassland edible biomass (kg/ha/year)
#% answer: 100
#% required : yes
#%END
#%option
#% key: gweight
#% type: integer
#% description: Average weight of forage one goat for one year (kg)
#% answer: 584
#% required : yes
#%END
#%option
#% key: sweight
#% type: integer
#% description: Average weight of forage for one sheep for year (kg)
#% answer: 894
#% required : yes
#%END
#%option
#% key: number
#% type: integer
#% description: Number of herd animals you wish to have graze
#% answer: 30
#% required : yes
#%END
#%option
#% key: gratio
#% type: integer
#% description: ratio of goats to sheep (ie. enter 1 for 1 goat to n sheep)
#% answer: 1
#% required : yes
#%END
#%option
#% key: sratio
#% type: integer
#% description: ratio of sheep to goats (ie. enter 1 for n goats to 1 sheep)
#% answer: 1
#% required : yes
#%END
#%option
#% key: loop
#% type: integer
#% description: number of iterations ("years") to run
#% answer: 20
#% required : yes
#%END
#%option
#% key: prfx
#% type: string
#% gisprompt: string
#% description: prefix for all output maps
#% answer: nompast_herdnum
#% required : yes
#%END
#%flag
#% key: l
#% description: -l Suppress output of C factor map (output landuse map only)
#% answer: 1
#%END
#%flag
#% key: f
#% description: -f Output maps of random grazing patches at each iteration as well
#%END
#%flag
#% key: s
#% description: -s Output text files of land-use stats from the simulation (one will be named "prefix"_luse_stats.txt, the other "prefix"_biomass.txt, and both will be overwritten if you run the simulation again with the same prefix)
#%END


if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

fbmas=$GIS_OPT_fbmas
sbmas=$GIS_OPT_sbmas
gbmas=$GIS_OPT_gbmas

#below we are setting up our succession sequence for a mediterranean environment... The absolute richness of the environment is controlled by the "biomass" input values for the three main stages of floristic growth (grassland, shrubland, and woodland), the values of which can be found in the ecological or rangeland science literature for specific mediterranean landscapes. All other stages are interpolated between the main three via linear regression. The number of main stages of a twenty year succession will need to be modified for other environments (and perhaps the twenty year time-limit should be expanded or contracted as well), as opposed to just changing the starting biomass values if one really wishes to model accurate succession in a non-mediterranean environment

: $(( a = ( $gbmas / 3 ) ))
: $(( b = ( 2 * ( $gbmas / 3 ) ) ))
: $(( c = ( 3 * ( $gbmas / 3 ) ) ))
d=$gbmas
: $(( e = ( $gbmas + ( ( $sbmas - $gbmas ) / 5 ) ) ))
: $(( f = ( $gbmas + ( 2 * ( ( $sbmas -$gbmas ) / 5 ) ) ) ))
: $(( g = ( $gbmas + ( 3 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
: $(( h = ( $gbmas + ( 4 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
: $(( i = ( $gbmas + ( 5 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
j=$sbmas
: $(( k = ( $sbmas + ( ( $fbmas - $sbmas ) / 11 ) ) ))
: $(( l = ( $sbmas + (2 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( m = ( $sbmas + (3 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( n = ( $sbmas + (4 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( o = ( $sbmas + (5 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( p = ( $sbmas + (6 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( q = ( $sbmas + (7 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( r = ( $sbmas + (8 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( s = ( $sbmas + (9 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( t = ( $sbmas + (10 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
u=$fbmas

TMP3=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP3" ] ; then
    echo "ERROR: unable to create temporary file for categories" 1>&2
    exit 1
fi

# now we take our biomass numbers calculated above and shove them into a temp file that we will use to reclass our timer maps into landcover maps later on

echo "0 = 0 badly overgrazed" > $TMP3
echo "1 = $a overgrazed" >> $TMP3
echo "2 = $b sparse grassland" >> $TMP3
echo "3 = $c moderate grassland" >> $TMP3
echo "4 = $d grassland" >> $TMP3
echo "5 = $e grass and sparse shrubs" >> $TMP3
echo "6 = $f grass and shrubs" >> $TMP3
echo "7 = $g mainly shrubs" >> $TMP3
echo "8 = $h developing maquis" >> $TMP3
echo "9 = $i moderate maquis" >> $TMP3
echo "10 = $j maquis" >> $TMP3
echo "11 = $k moderately dense maquis" >> $TMP3
echo "12 = $l dense maquis" >> $TMP3
echo "13 = $m maquis and small trees" >> $TMP3
echo "14 = $n young woodland and maquis" >> $TMP3
echo "15 = $o mostly young open woodland" >> $TMP3
echo "16 = $p young open woodland" >> $TMP3
echo "17 = $q moderate open woodland" >> $TMP3
echo "18 = $r maturing and moderate open woodland" >> $TMP3
echo "19 = $s maturing open woodland" >> $TMP3
echo "20 = $t mostly matured open woodland" >> $TMP3
echo "21 = $u fully matured woodland" >> $TMP3
echo "end" >> $TMP3


TMP2=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP2" ] ; then
    echo "ERROR: unable to create temporary file for colors" 1>&2
    exit 1
fi

# this creates a tempfile with color values for the output landcover maps

echo "0 grey" > $TMP2
echo "$gbmas brown" >> $TMP2
echo "$sbmas yellow" >> $TMP2
echo "$fbmas green" >> $TMP2
echo "end" >> $TMP2

TMP4=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP4" ] ; then
    echo "ERROR: unable to create temporary file for categories" 1>&2
    exit 1
fi

# this creates a tempfile to recode our timer maps into c-factor maps later on

echo "0:1:0.5:0.5" > $TMP4
echo "2:5:0.10:0.10" >> $TMP4
echo "6:9:0.15:0.15" >> $TMP4
echo "10:13:0.18:0.18" >> $TMP4
echo "13:16:0.08:0.08" >> $TMP4
echo "17:20:0.06:0.06" >> $TMP4
echo "21:21:0.05:0.05" >> $TMP4
echo "end" >> $TMP4

TMP5=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP5" ] ; then
    echo "ERROR: unable to create temporary file for colors" 1>&2
    exit 1
fi

# this creates a tempfile to color our c-factor maps later on

echo "0.5 grey" > $TMP5
echo "0.6 grey" >> $TMP5
echo "0.19 brown" >> $TMP5
echo "0.17 brown" >> $TMP5
echo "0.10 yellow" >> $TMP5
echo "0.05 green" >> $TMP5
echo "end" >> $TMP5



echo ""
echo "*************************"
echo "step 1 of 4: Calculating MASK"
echo "*************************"
echo ""

if [ -n "MASK" ]; then
g.remove --q rast=MASK
fi

inmap=$GIS_OPT_inmap
r.mask input=$inmap maskcats=* 



echo ""
echo "*************************"
echo "step 2 of 4: Changing resolution to field size (will be reset)"
echo "*************************"
echo ""

if [ -n "temp_region" ]; then
g.remove --q region=temp_region
fi
g.region save=temp_region
size=$GIS_OPT_size
g.region res=$size



echo ""
echo "*************************"
echo "step 3 of 4: Sarting land use evolution calculation. This will start a loop and may take some time. Please do not interrupt the process until it has finished"
echo "*************************"
echo ""

d.mon start=x0
d.monsize --quiet setmonitor=x0 setwidth=1000 setheight=750 

d.frame -c -s frame=f1 at=0,100,0,60 
echo "Current Landcover" | d.text -b size=3 color=black at=1,1 rotation=0 

d.frame -c -s frame=f2 at=50,100,64,100 

d.frame -c -s frame=f3 at=0,100,61,63

d.frame -c -s frame=f4 at=0,48,64,100 

d.frame -c -s frame=f5 at=48,50,64,100 


echo "Model Year 1"
echo ""


number=$GIS_OPT_number
loop=$GIS_OPT_loop
effect=$GIS_OPT_effect
prfx=$GIS_OPT_prfx
temp1=$prfx"_tmp1"
timer=$prfx"_timer1"
patches=$prfx"_patches1"
tmplus=$prfx"temp_landuse1"
lus=$prfx"_landuse1"
tmpinreclass=$prfx"_tmpinreclass"

gweight=$GIS_OPT_gweight
sweight=$GIS_OPT_sweight
gratio=$GIS_OPT_gratio
sratio=$GIS_OPT_sratio

txtout=$prfx"_landcover_stats.txt"
txtout2=$prfx"_landuse_stats.txt"

inituse=$GIS_OPT_inituse

r.mapcalc "$tmpinreclass = if ($inmap, 1, null())"



rand=1 #setting up loop

	while [ "$rand" -le 100 ]
	do
	
echo "testing grazing at $rand percent"

randpatches=$patches"_"$rand
	
#randomly sampling our catchment in increasing percentages

r.random --q input=$tmpinreclass n=$rand"%" raster_output=$randpatches

#creating a "timer" map that keeps track of successional values

if [ -n "$GIS_OPT_inituse" ]; then

r.mapcalc "$timer= if (isnull($randpatches) && $inituse <= 20, $inituse + 1, (if(isnull($randpatches), 21, (if ($inituse < $effect, 0, $inituse - $effect)))))"

else

r.mapcalc "$timer = if (isnull($randpatches), 21, 21-$effect)"

fi

#creating landcover map from timer map

	cat $TMP3 | r.reclass --q input=$timer output=$tmplus

r.mapcalc "$lus = $tmplus"
g.remove --q rast=$tmplus

	cat $TMP2 | r.colors --q map=$lus color=rules

d.frame -s frame=f2 
d.rast map=$lus
d.barscale bcolor=none tcolor=black at=0.0,0.0
d.frame -s frame=f5
d.erase
echo "new model randomization: $rand% grazed" | d.text size=90 color=black at=10,15
 


#creating and then removing a temp map to calculate total biomass available to herd animals

r.mapcalc "$temp1=if(isnull($randpatches), null(), $lus)"
	
	tempbmas=`eval r.sum --q rast=$temp1 | cut -d'.' -f1`

g.remove --q rast=$temp1

#finding the total area of all the randomly picked grazing patches combined
#commenting out following formula, will now use r.sum to get the area
#temparea=`eval r.stats --q -n -a fs=- input=$randpatches | cut -d'-' -f2 | cut -d'.' -f1`

tempsum=`eval  r.sum --q rast=$randpatches | cut -d'.' -f1`
: $(( ( temparea = $tempsum * $size )  ))

#now we run through some equations to discover the affects of this year's simulation on our landscape and our herd population


: $(( bmas = ( ( ( $temparea / 100000000 ) * $tempbmas ) / 34 ) ))
# in above equation, .34 is an "efficiency factor" that is used to modify the total standing biomass to consumable biomass for mixed browse/graze rangelands (averaged from the values for each of those types), and is derived from field sudies done by rangeland scientists (because we can't use decimles in BASH math, I divide by 34 instead of multiplying by .34)

: $(( efkg = ( ( ($sratio * $sweight) + ( $gratio * $gweight) ) / 2 ) )) 

: $(( ebmas = ($bmas / ( 5 + ( $effect + ( 9 / 4 ) ) ) ) ))

: $(( num = ( $ebmas / $efkg ) ))

 if [ "$num" -ge "$number" ]
 then
   break  # Skip entire rest of loop.
 fi

rand=$(($rand+1)) #controlling loop

	done


d.frame -s frame=f2 
d.erase
d.frame -s frame=f1 
d.erase
d.rast map=$lus
echo "Current Landcover (1 Year)" | d.text -b size=3 color=black at=1,1 rotation=0 
d.barscale bcolor=none tcolor=black at=0.0,0.0 
d.frame -s frame=f3
d.erase
d.legend -c -v -s map=$lus color=black lines=21 thin=1 labelnum=21 at=98,2,1,100 


if [ "$num" -lt "$number" ]; then

	echo ""
	echo "Percent of land grazed this year = $rand"
	echo ""
	echo "Area of new randomized grazing patches needed to support $number animals = $temparea square meters"
	echo ""
	echo "Total amount of effective biomass available for grazing this year = $bmas"
	echo ""
	echo "Average fodder consumption of herd per animal = $efkg"
	echo ""
	echo "Total amount of forage grazed this year = $ebmas"
	echo ""
echo "************************************************************************"
echo ""
echo "Herd size not supported by total use of catchment's landscape!!!!!!"
echo "Ending simulation with total herd size of $num herd animals at year 1"

	echo "" >> $txtout
	echo "Year 1: herd number not supported! Ending simulation" >> $txtout
	echo "" >> $txtout2
	echo "Herd number not supported by Year 1! Ending simulation" >> $txtout2



break  # Skip entire rest of module.

fi

if [ "$GIS_FLAG_f" -eq 1 ]; then

	g.rename --q rast=$randpatches,$patches
	echo "grazing patches map = $patches"

	fi

g.mremove -f --quiet rast=$patches"_*"

	cat $TMP4 | r.recode --q input=$timer output=$prfx"_cfactor1"

	cat $TMP5 | r.colors --q map=$prfx"_cfactor1" color=rules



d.frame -s frame=f4
echo "Year 1" | d.text -b size=5 color=black at=2,10
echo ""
echo "Percent of land grazed = $rand" | d.text size=3 color=black at=2,20
echo ""
echo "Area of grazed patches = $temparea sq m" | d.text size=3 color=black at=2,30
echo ""
echo "Number of herd animals supported = $number" | d.text size=3 color=black at=2,40
echo ""
echo "Total amount of biomass available this year = $bmas" | d.text size=3 color=black at=2,50
echo ""
echo "Average fodder consumption of herd per animal = $efkg" | d.text size=3 color=black at=2,60
echo ""
echo "Total amount of forage grazed this year = $ebmas" | d.text size=3 color=black at=2,70
echo ""
echo "***********************"

#below is output for text files of stats from this model run

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "General landcover stats for $loop years of grazing $num herd animals on the landscape in $size meter square patches" > $txtout
echo "" >> $txtout
echo "Year 1:" >> $txtout
echo "" >> $txtout
echo "Average biomass production (kg/ha/year),Landcover description,Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$prfx"_landuse1" fs=, nv=* nsteps=255 >> $txtout

echo "Biomass amounts for $loop years of grazing $number herd animals on the landscape in $size meter square patches with a $gratio to $sratio goat/sheep ratio where goats need $gweight kg/year of fodder and sheep need $sweight kg/year of fodder with an average of $efkg kg/year per herd animal. " > $txtout2
echo "" >> $txtout2
echo "Year,Percent of catchment grazed,Total area grazed (sq. m),Total available fodder,Total fodder actually grazed,Difference from last year's grazing extent (sq m)" >> $txtout2
echo "" >> $txtout2
echo "1,$rand,$temparea,$bmas,$ebmas,0" >> $txtout2
fi





step=2 #set up for outer loop


while [ "$step" -le "$loop" ]
do

	echo "Model Year $step"
	laststep=$(($step-1)) #control for some comparisons with output from last iteration

	outcfactor=$prfx"_cfactor"$step
	tmplanduse=$prfx"temp_landuse"$step
	outlanduse=$prfx"_landuse"$step
	outpatches=$prfx"_patches"$step
	temp=$prfx"_tmp"$step
	newtimer=$prfx"_timer"$step
	oldtimer=$prfx"_timer"$laststep

oldarea=$temparea
rand=1 #set up for inner loop



	while [ "$rand" -le 100 ]
	do

echo "testing grazing at $rand percent"

randpatches=$outpatches"_"$rand

#randomly sampling our catchment in increasing percentages

r.random --q input=$tmpinreclass n=$rand"%" raster_output=$randpatches
	
#modifying "timer" map with new data on landuse for this year

r.mapcalc "$newtimer= if (isnull($randpatches) && $oldtimer <= 20, $oldtimer + 1, (if(isnull($randpatches), 21, (if ($oldtimer < $effect, 0, $oldtimer - $effect)))))"

#creating landcover map from timer map

	cat $TMP3 | r.reclass --q input=$newtimer output=$tmplanduse

r.mapcalc "$outlanduse = $tmplanduse"
g.remove --q rast=$tmplanduse

	cat $TMP2 | r.colors --q map=$outlanduse color=rules

d.frame -s frame=f2 
d.rast map=$outlanduse
d.barscale bcolor=none tcolor=black at=0.0,0.0 
d.frame -s frame=f5
d.erase
echo "new model randomization: $rand% grazed" | d.text size=90 color=black at=10,15



#creating and then removing a temp map to calculate total biomass available to herd animals

r.mapcalc "$temp=if(isnull($randpatches), null(), $outlanduse)"

	tempbmas=`eval r.sum --q rast=$temp | cut -d'.' -f1`

g.remove --q rast=$temp

#finding the total area of all the randomly picked grazing patches combined
#commenting out following formula. Will now use r.sum to get the area
# 	temparea=`eval r.stats --q -n -a fs=- input=$randpatches | cut -d'-' -f2 | cut -d'.' -f1`

tempsum=`eval  r.sum --q rast=$randpatches | cut -d'.' -f1`
: $(( ( temparea = $tempsum * $size )  ))
	
#now we run through some equations to discover the affects of this year's simulation on our landscape and our herd population

: $(( bmas = ( ( ( $temparea / 100000000 ) * $tempbmas ) / 34 ) ))
# in above equation, .34 is an "efficiency factor" that is used to modify the total standing biomass to consumable biomass for mixed browse/graze rangelands (averaged from the values for each of those types), and is derived from field sudies done by rangeland scientists (because we can't use decimles in BASH math, I divide by 34 instead of multiplying by .34)

: $(( efkg = ( ( ($sratio * $sweight) + ( $gratio * $gweight) ) / 2 ) )) 

: $(( ebmas = ($bmas / ( 5 + ( $effect + ( 9 / 4 ) ) ) ) ))


: $(( num = ( $ebmas / $efkg ) ))

: $(( dif = ($temparea - $oldarea) ))




 if [ "$num" -ge "$number" ]
 then
   break  # Skip entire rest of loop.
 fi


	rand=$(($rand+1)) #controlling inner loop


	done

d.frame -s frame=f2 
d.erase
d.frame -s frame=f1
d.erase
d.rast map=$outlanduse
echo "Current Landcover ($step Years)" | d.text -b size=3 color=black at=1,1 rotation=0 
d.barscale bcolor=none tcolor=black at=0.0,0.0 
d.frame -s frame=f3
d.erase
d.legend -c -v -s map=$outlanduse color=black lines=21 thin=1 labelnum=21 at=98,2,1,100 

if [ "$num" -lt "$number" ]; then
	
	echo ""
	echo "Percent of land grazed this year = $rand"
	echo ""
	echo "Area of new randomized grazing patches needed to support $num animals = $temparea square meters"
	echo ""
	echo "Total amount of effective biomass available for grazing this year = $bmas"
	echo ""
	echo "Average fodder consumption of herd per animal = $efkg"
	echo ""
	echo "Total amount of forage grazed this year = $ebmas"
	echo ""
	echo "Total number of herd animals supported this year = $num"
	echo ""
	echo "Difference from grazed area last year = $dif"
	echo ""
echo "************************************************************************"
echo ""
echo "Herd size not supported by total use of catchment's landscape!!!!!!"
echo "Ending simulation with total herd size of $num herd animals at year $step"
echo "Try again with lower number of herd animals"


	echo "" >> $txtout
	echo "Year $step: herd number not supported! Ending simulation" >> $txtout
	echo "" >> $txtout2
	echo "Herd number not supported by Year $step! Ending simulation" >> $txtout2


break  # Skip entire rest of module.


fi

	step=$(($step+1)) #controlling outer loop


	if [ "$GIS_FLAG_f" -eq 1 ]; then

	g.rename --q rast=$randpatches,$outpatches
	echo "grazing patches map = $outpatches"

	fi


g.mremove -f --quiet rast=$outpatches"_*"


	cat $TMP2 | r.colors --q map=$outlanduse color=rules

	cat $TMP4 | r.recode --q input=$newtimer output=$outcfactor

	cat $TMP5 | r.colors --q map=$outcfactor color=rules

d.frame -s frame=f4
d.erase
echo "Year $step" | d.text -b size=5 color=black at=2,10
	echo ""
echo "Percent of land grazed = $rand" | d.text size=3 color=black at=2,20
echo ""
echo "Area of grazed patches = $temparea sq m" | d.text size=3 color=black at=2,30
echo ""
echo "Number of herd animals supported = $num" | d.text size=3 color=black at=2,40
echo ""
echo "Total amount of biomass available this year = $bmas" | d.text size=3 color=black at=2,50
echo ""
echo "Average fodder consumption of herd per animal = $efkg" | d.text size=3 color=black at=2,60
echo ""
echo "Total amount of forage grazed this year = $ebmas" | d.text size=3 color=black at=2,70
echo ""
echo "Difference from grazed area last year = $dif" | d.text -b size=3 color=black at=2,80
echo ""
echo "************************"
echo ""

#below is more output for text files of stats from this model run

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "" >> $txtout
echo "Year $step:" >> $txtout
echo "" >> $txtout
echo "Average biomass production (kg/year), Landcover description, Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$outlanduse fs=, nv=* nsteps=255 >> $txtout

echo "$step,$rand,$temparea,$bmas,$ebmas,$dif" >> $txtout2

	
fi




done


echo ""
echo "*************************"
echo "step 4 of 4: Cleaning up"
echo "*************************"
echo ""

if [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 1 ] ; then



g.mremove -f --quiet rast=$prfx"_cfactor*"
g.mremove -f --quiet rast=$prfx"_timer*"
g.mremove -f --quiet rast=$prfx"_tmpinreclass*"
g.remove --q rast=MASK

elif [ "$GIS_FLAG_f" -eq 0 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --quiet rast=$prfx"_patches*"
g.mremove -f --quiet rast=$prfx"_cfactor*"
g.mremove -f --quiet rast=$prfx"_timer*"
g.mremove -f --quiet rast=$prfx"_tmpinreclass*"
g.remove --q rast=MASK

elif [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 0 ] ; then

g.remove --q rast=MASK
g.mremove -f --quiet rast=$prfx"_timer*"
g.mremove -f --quiet rast=$prfx"_tmpinreclass*"

else


g.mremove -f --quiet rast=$prfx"_patches*"
g.remove --q rast=MASK
g.mremove -f --quiet rast=$prfx"_timer*"
g.mremove -f --quiet rast=$prfx"_tmpinreclass*"

fi


\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort
\rm -f $TMP5 $TMP5.sort


echo ""
echo "Resetting region"
echo ""

g.region -g region=temp_region
g.remove --q region=temp_region


echo ""
echo "DONE!"
echo ""
echo ""


d.mon -r

