#!/bin/sh
#
############################################################################
#
# MODULE:       	r.nompast.area
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		Creates a series of iterative landuse maps from a catchment
#			created by r.catchment based on vegetational succession, herd ecology, and pastoral economics. 
#			This model holds the percentage of the catchment to be grazed constant and calculates the 
#			number of herd animals that can be supported by that area. Optionally outputs c factor as well
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: Creates a series of iterative landuse maps from a catchment created by r.catchment based on vegetational succession, herd ecology, and pastoral economics. This model holds the percentage of the catchment to be grazed constant and calculates the number of herd animals that can be supported by that area. Optionally outputs c factor as well
#%END

#%option
#% key: inmap
#% type: string
#% gisprompt: old,cell,raster
#% description: Input catchment map (from r.catchment or r.buffer)
#% required : yes
#%END
#%option
#% key: inituse
#% type: string
#% gisprompt: old,cell,raster
#% description: Optional initial landscape (Coded 0-21. If no map specified, an initial landscape of value 21 (mature woodland) is used)
#% required : no
#%END
#%option
#% key: rand
#% type: integer
#% description: percent of area to be grazed in any year (to be used in r.random)
#% answer: 50
#% required : yes
#%END
#%option
#% key: size
#% type: integer
#% description: size of grazing patches (set as resolution in g.region)
#% answer: 30
#% required : yes
#%END
#%option
#% key: effect
#% type: integer
#% description: Intensity of grazing (amount by which landcover is decreased after grazing)
#% answer: 1
#% options: 1,2,3,4,5
#% required : yes
#%END
#%option
#% key: fbmas
#% type: integer
#% description: Average mature woodland edible biomass (kg/ha/year)
#% answer: 350
#% required : yes
#%END
#%option
#% key: sbmas
#% type: integer
#% description: Average shrubland edible biomass (kg/ha/year)
#% answer: 200
#% required : yes
#%END
#%option
#% key: gbmas
#% type: integer
#% description: Average grassland edible biomass (kg/ha/year)
#% answer: 100
#% required : yes
#%END
#%option
#% key: gweight
#% type: integer
#% description: Average weight of forage one goat for one year (kg)
#% answer: 584
#% required : yes
#%END
#%option
#% key: sweight
#% type: integer
#% description: Average weight of forage for one sheep for year (kg)
#% answer: 894
#% required : yes
#%END
#%option
#% key: gratio
#% type: integer
#% description: ratio of goats to sheep (ie. enter 1 for 1 goat to n sheep)
#% answer: 1
#% required : yes
#%END
#%option
#% key: sratio
#% type: integer
#% description: ratio of sheep to goats (ie. enter 1 for n goats to 1 sheep)
#% answer: 1
#% required : yes
#%END
#%option
#% key: loop
#% type: integer
#% description: number of iterations ("years") to run
#% answer: 20
#% required : yes
#%END
#%option
#% key: prfx
#% type: string
#% gisprompt: string
#% description: prefix for all output maps
#% answer: landcover
#% required : yes
#%END
#%flag
#% key: l
#% description: -l Suppress output of C factor map (output landuse map only)
#%END
#%flag
#% key: f
#% description: -f Output maps of random grazing patches at each iteration as well
#%END
#%flag
#% key: s
#% description: -s Output text files of land-use stats from the simulation (one will be named "prefix"_luse_stats.txt, the other "prefix"_biomass.txt, and both will be overwritten if you run the simulation again with the same prefix)
#%END


if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

fbmas=$GIS_OPT_fbmas
sbmas=$GIS_OPT_sbmas
gbmas=$GIS_OPT_gbmas



: $(( a = ( $gbmas / 3 ) ))
: $(( b = ( 2 * ( $gbmas / 3 ) ) ))
: $(( c = ( 3 * ( $gbmas / 3 ) ) ))
d=$gbmas
: $(( e = ( $gbmas + ( ( $sbmas - $gbmas ) / 5 ) ) ))
: $(( f = ( $gbmas + ( 2 * ( ( $sbmas -$gbmas ) / 5 ) ) ) ))
: $(( g = ( $gbmas + ( 3 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
: $(( h = ( $gbmas + ( 4 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
: $(( i = ( $gbmas + ( 5 * ( ( $sbmas - $gbmas ) / 5 ) ) ) ))
j=$sbmas
: $(( k = ( $sbmas + ( ( $fbmas - $sbmas ) / 11 ) ) ))
: $(( l = ( $sbmas + (2 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( m = ( $sbmas + (3 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( n = ( $sbmas + (4 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( o = ( $sbmas + (5 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( p = ( $sbmas + (6 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( q = ( $sbmas + (7 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( r = ( $sbmas + (8 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( s = ( $sbmas + (9 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
: $(( t = ( $sbmas + (10 * ( ( $fbmas - $sbmas ) / 11 ) ) ) ))
u=$fbmas

TMP3=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP3" ] ; then
    echo "ERROR: unable to create temporary file for categories" 1>&2
    exit 1
fi

echo "0 = 0 badly overgrazed" > $TMP3
echo "1 = $a overgrazed" >> $TMP3
echo "2 = $b sparse grassland" >> $TMP3
echo "3 = $c moderate grassland" >> $TMP3
echo "4 = $d grassland" >> $TMP3
echo "5 = $e grass and sparse shrubs" >> $TMP3
echo "6 = $f grass and shrubs" >> $TMP3
echo "7 = $g mainly shrubs" >> $TMP3
echo "8 = $h developing maquis" >> $TMP3
echo "9 = $i moderate maquis" >> $TMP3
echo "10 = $j maquis" >> $TMP3
echo "11 = $k moderately dense maquis" >> $TMP3
echo "12 = $l dense maquis" >> $TMP3
echo "13 = $m maquis and small trees" >> $TMP3
echo "14 = $n young woodland and maquis" >> $TMP3
echo "15 = $o mostly young open woodland" >> $TMP3
echo "16 = $p young open woodland" >> $TMP3
echo "17 = $q moderate open woodland" >> $TMP3
echo "18 = $r maturing and moderate open woodland" >> $TMP3
echo "19 = $s maturing open woodland" >> $TMP3
echo "20 = $t mostly matured open woodland" >> $TMP3
echo "21 = $u fully matured woodland" >> $TMP3
echo "end" >> $TMP3


TMP2=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP2" ] ; then
    echo "ERROR: unable to create temporary file for colors" 1>&2
    exit 1
fi

echo "0 grey" > $TMP2
echo "$gbmas brown" >> $TMP2
echo "$sbmas yellow" >> $TMP2
echo "$fbmas green" >> $TMP2
echo "end" >> $TMP2

TMP4=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP4" ] ; then
    echo "ERROR: unable to create temporary file for categories" 1>&2
    exit 1
fi

echo "0:1:0.5:0.5" > $TMP4
echo "2:5:0.10:0.10" >> $TMP4
echo "6:9:0.15:0.15" >> $TMP4
echo "10:13:0.18:0.18" >> $TMP4
echo "13:16:0.08:0.08" >> $TMP4
echo "17:20:0.06:0.06" >> $TMP4
echo "21:21:0.05:0.05" >> $TMP4
echo "end" >> $TMP4

TMP5=`g.tempfile pid=$$`
if [ $? -ne 0 ] || [ -z "$TMP5" ] ; then
    echo "ERROR: unable to create temporary file for colors" 1>&2
    exit 1
fi

echo "0.5 grey" > $TMP5
echo "0.6 grey" >> $TMP5
echo "0.19 brown" >> $TMP5
echo "0.17 brown" >> $TMP5
echo "0.10 yellow" >> $TMP5
echo "0.05 green" >> $TMP5
echo "end" >> $TMP5



echo ""
echo "*************************"
echo "step 1 of 4: Calculating MASK"
echo "*************************"
echo ""


r.mask input=$inmap maskcats=* 



echo ""
echo "*************************"
echo "step 2 of 4: Changing resolution to field size (will be reset)"
echo "*************************"
echo ""

g.region save=temp_region
size=$GIS_OPT_size
g.region res=$size



echo ""
echo "*************************"
echo "step 3 of 4: Sarting land use evolution calculation. This will start a loop and may take some time. Please do not interrupt the process until it has finished"
echo "*************************"
echo ""


echo "iteration 1"
echo ""



inmap=$GIS_OPT_inmap
rand=$GIS_OPT_rand
loop=$GIS_OPT_loop
effect=$GIS_OPT_effect
prfx=$GIS_OPT_prfx
temp1=$prfx"_tmp1"
timer=$prfx"_timer1"
patches=$prfx"_patches1"
tmplus=$prfx"temp_landuse1"
lus=$prfx"_landuse1"
tmpinreclass=$prfx"_tmpinreclass"

gweight=$GIS_OPT_gweight
sweight=$GIS_OPT_sweight
gratio=$GIS_OPT_gratio
sratio=$GIS_OPT_sratio

inituse=$GIS_OPT_inituse

txtout=$prfx"_luse_stats.txt"
txtout2=$prfx"_biomass.txt"


r.mapcalc "$tmpinreclass = if ($inmap, 1, null())"

r.random --q input=$tmpinreclass n=$rand"%" raster_output=$patches

if [ "$GIS_FLAG_f" -eq 1 ]; then

	echo "grazing patches map = $patches"

	fi


if [ -n "$GIS_OPT_inituse" ]; then


r.mapcalc "$timer= if (isnull($patches) && $inituse <= 20, $inituse + 1, (if(isnull($patches), 21, (if ($inituse < $effect, 0, $inituse - $effect)))))"


else


r.mapcalc "$timer = if (isnull($patches), 21, 21-$effect)"


fi


	cat $TMP3 | r.reclass --q input=$timer output=$tmplus

r.mapcalc "$lus = $tmplus"

	cat $TMP2 | r.colors --q map=$lus color=rules

	cat $TMP4 | r.recode --q input=$timer output=$prfx"_cfactor1"

	cat $TMP5 | r.colors --q map=$prfx"_cfactor1" color=rules

r.mapcalc "$temp1=if(isnull($patches), null(), $lus)"
tempbmas=`eval r.sum rast=$temp1 | cut -d'.' -f1`

 	temparea=`eval r.stats -n -a fs=- input=$patches | cut -d'-' -f2 | cut -d'.' -f1`

: $(( bmas = ( ( ( $temparea / 100000000 ) * $tempbmas ) / 34 ) ))
# in above equation, .34 is an "efficiency factor" that is used to modify the total standing biomass to consumable biomas, and is derived from field sudies done by rangeland scientists

: $(( efkg = ( ( ($sratio * $sweight) + ( $gratio * $gweight) ) / 2 ) )) 

: $(( ebmas = ($bmas / ( 5 + ( $effect + ( 9 / 4 ) ) ) ) ))

: $(( num = ( $ebmas / $efkg ) ))

	echo ""
	echo "Area of new randomized grazing patches = $temparea square meters"
	echo ""
	echo "Total amount of effective biomass available for grazing this year = $bmas"
	echo ""
	echo "Average fodder consumption of herd per animal = $efkg"
	echo ""
	echo "Total amount of forage grazed this year = $ebmas"
	echo ""
	echo "Total number of herd animals supported this year = $num"
	echo ""
echo "***********************"


if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "Stats for $loop years of grazing at $rand% randomized grazing of the landscape in $size meter square patches" > $txtout
echo "" >> $txtout
echo "Year 1:" >> $txtout
echo "" >> $txtout
echo "Average biomass production (kg/ha/year),Landcover description,Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$prfx"_landuse1" fs=, nv=* nsteps=255 >> $txtout

echo "Biomass amounts for $loop years of grazing at $rand% randomized grazing of the landscape in $size meter square patches with a $gratio to $sratio goat/sheep ratio where goats need $gweight kg/year of fodder and sheep need $sweight kg/year of fodder with an average of $efkg kg/year per herd animal. " > $txtout2
echo "" >> $txtout2
echo "Year,Total area grazed (sq. m),Total available fodder,Total fodder actually grazed,Number of herd animals supported,Difference from last year's herdsize" >> $txtout2
echo "" >> $txtout2
echo "1,$temparea,$bmas,$ebmas,$num,'n/a'" >> $txtout2
fi

g.remove --q rast=$temp1

step=1


while [ "$step" -lt "$loop" ]
do
	step=$(($step+1))
	echo "iteration $step"
	laststep=$(($step-1))

	

	outcfactor=$prfx"_cfactor"$step
	tmplanduse=$prfx"temp_landuse"$step
	outlanduse=$prfx"_landuse"$step
	outpatches=$prfx"_patches"$step
	temp=$prfx"_tmp"$step
	newtimer=$prfx"_timer"$step
	oldtimer=$prfx"_timer"$laststep
	

r.random --q input=$tmpinreclass n=$rand"%" raster_output=$outpatches 	
	
	if [ "$GIS_FLAG_f" -eq 1 ]; then

	echo "grazing patches map = $outpatches"

	fi

r.mapcalc "$newtimer= if (isnull($outpatches) && $oldtimer <= 20, $oldtimer + 1, (if(isnull($outpatches), 21, (if ($oldtimer < $effect, 0, $oldtimer - $effect)))))"

	

	cat $TMP3 | r.reclass --q input=$newtimer output=$tmplanduse

	r.mapcalc "$outlanduse = $tmplanduse"

	cat $TMP2 | r.colors --q map=$outlanduse color=rules

	cat $TMP4 | r.recode --q input=$newtimer output=$outcfactor

	cat $TMP5 | r.colors --q map=$outcfactor color=rules

r.mapcalc "$temp=if(isnull($patches), null(), $outlanduse)"
tempbmas=`eval r.sum rast=$temp | cut -d'.' -f1`

 	temparea=`eval r.stats -n -a fs=- input=$patches | cut -d'-' -f2 | cut -d'.' -f1`
	
: $(( bmas = ( ( ( $temparea / 100000000 ) * $tempbmas ) / 34 ) ))
# in above equation, .34 is an "efficiency factor" that is used to modify the total standing biomass to consumable biomas, and is derived from field sudies done by rangeland scientists

: $(( efkg = ( ( ($sratio * $sweight) + ( $gratio * $gweight) ) / 2 ) )) 

: $(( ebmas = ($bmas / ( 5 + ( $effect + ( 9 / 4 ) ) ) ) ))

oldnum=$num

: $(( num = ( $ebmas / $efkg ) ))

: $(( dif = ($num - $oldnum) ))

	echo ""
	echo "Area of new randomized grazing patches = $temparea square meters"
	echo ""
	echo "Total amount of effective biomass available for grazing this year = $bmas"
	echo ""
	echo "Average fodder consumption of herd per animal = $efkg"
	echo ""
	echo "Total amount of forage grazed this year = $ebmas"
	echo ""
	echo "Total number of herd animals supported this year = $num"
	echo ""
	echo "Difference from herdsize last year = $dif"
	echo ""
echo "************************"
echo ""

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "" >> $txtout
echo "Year $step:" >> $txtout
echo "" >> $txtout
echo "Average biomass production (kg/year), Landcover description, Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$outlanduse fs=, nv=* nsteps=255 >> $txtout

echo "$step,$temparea,$bmas,$ebmas,$num,$dif" >> $txtout2

	
fi

done


echo ""
echo "*************************"
echo "step 4 of 4: Cleaning up"
echo "*************************"
echo ""

if [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --q rast=$prfx"temp_landuse*"
g.mremove -f --q rast=$prfx"_cfactor*"
g.mremove -f --q rast=$prfx"_timer*"
g.mremove -f --q rast=$prfx"_tmpinreclass*"
g.mremove -f --q rast=$prfx"_tmp*"
g.remove --q rast=MASK

elif [ "$GIS_FLAG_f" -eq 0 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --q rast=$prfx"_patches*"
g.mremove -f --q rast=$prfx"temp_landuse*"
g.mremove -f --q rast=$prfx"_cfactor*"
g.mremove -f --q rast=$prfx"_timer*"
g.mremove -f --q rast=$prfx"_tmpinreclass*"
g.mremove -f --q rast=$prfx"_tmp*"
g.remove --q rast=MASK

elif [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 0 ] ; then

g.remove --q rast=MASK
g.mremove -f --q rast=$prefx"temp_landuse*"
g.mremove -f --q rast=$prfx"_timer*"
g.mremove -f --q rast=$prfx"_tmpinreclass*"
g.mremove -f --q rast=$prfx"_tmp*"
else


g.mremove -f --q rast=$prfx"_patches*"
g.mremove -f --q rast=$prfx"temp_landuse*"
g.remove --q rast=MASK
g.mremove -f --q rast=$prfx"_timer*"
g.mremove -f --q rast=$prfx"_tmpinreclass*"
g.mremove -f --q rast=$prfx"_tmp*"

fi


\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort
\rm -f $TMP5 $TMP5.sort


echo ""
echo "Resetting region"
echo ""

g.region -g region=temp_region
g.remove --q region=temp_region


echo ""
echo "DONE!"
echo ""
echo ""


