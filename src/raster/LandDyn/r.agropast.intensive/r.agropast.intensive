#!/bin/sh
#
############################################################################
#
# MODULE:       	r.agropast.intensive
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		Creates a series of iterative landuse maps from a pastoral catchment and an 
#			intensive agricultural catchment (both need to be created by 
#			r.catchment), and outputs c factor as well
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: Creates a series of iterative landuse maps from a pastoral catchment and an intensive agricultural catchment (both need to be created by r.catchment), and outputs c factor as well.
#%END
#%option
#% key: inmap
#% type: string
#% gisprompt: old,cell,raster
#% description: Input pastoral catchment map (from r.catchment or r.buffer)
#% required : yes
#%END
#%option
#% key: inmapa
#% type: string
#% gisprompt: old,cell,raster
#% description: Input agricultural catchment map (to be modelled as wheat agriculture with no grazing, from r.catchment or r.buffer)
#% required : yes
#%END
#%option
#% key: rand
#% type: integer
#% description: percent of area to be grazed in any year (to be used in r.random)
#% answer: 50
#% required : yes
#%END
#%option
#% key: size
#% type: integer
#% description: size of grazing patches (set as resolution in g.region)
#% answer: 15
#% required : yes
#%END
#%option
#% key: effect
#% type: integer
#% description: Intensity of grazing (amount by which landcover is decreased after grazing)
#% answer: 1
#% options: 1,2,3,4,5
#% required : yes
#%END
#%option
#% key: loop
#% type: integer
#% description: number of iterations ("years") to run
#% answer: 50
#% required : yes
#%END
#%option
#% key: prfx
#% type: string
#% gisprompt: string
#% description: prefix for all output maps
#% required : yes
#%END
#%option
#% key: lc_rules
#% type: string
#% gisprompt: string
#% description: path to reclass rules file for landcover map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/luse_reclass_rules.txt
#% required : yes
#%END
#%option
#% key: lc_color
#% type: string
#% gisprompt: string
#% description: path to color rules file for landcover map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/luse_colors.txt
#% required : yes
#%END
#%option
#% key: cfact_rules
#% type: string
#% gisprompt: string
#% description: path to recode rules file for c-factor map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/cfactor_recode_rules.txt
#% required : yes
#%END
#%option
#% key: cfact_color
#% type: string
#% gisprompt: string
#% description: path to color rules file for c-factor map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/cfactor_colors.txt
#% required : yes
#%END
#%flag
#% key: l
#% description: -l Suppress output of C factor map (output landuse map only)
#%END
#%flag
#% key: f
#% description: -f Output maps of random grazing patches at each iteration as well
#%END
#%flag
#% key: s
#% description: -s Output text file of land-use stats from the simulation (will be written to current Mapset and named "prefix"_luse_stats.txt, and will be overwritten if you run the simulation again with the same prefix)
#% answer: 1
#%END


if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

inmap=$GIS_OPT_inmap
inmapa=$GIS_OPT_inmapa
rand=$GIS_OPT_rand
size=$GIS_OPT_size
loop=$GIS_OPT_loop
effect=$GIS_OPT_effect
prfx=$GIS_OPT_prfx
timer=$prfx".timer1"

mapset=`eval g.gisenv get=MAPSET`
location=`eval g.gisenv get=LOCATION_NAME`
gisdbase=`eval g.gisenv get=GISDBASE`
txtout=$gisdbase"/"$location"/"$mapset"/"$prfx"_luse_stats.txt"

lc_rules=$GIS_OPT_lc_rules

lc_color=$GIS_OPT_lc_color

cfact_rules=$GIS_OPT_cfact_rules

cfact_color=$GIS_OPT_cfact_color


echo ""
echo "*************************"
echo "step 1 of 4: Calculating MASK and background files"
echo "*************************"
echo ""

r.mapcalc "temp_cat_1=if(isnull($inmapa), null(), 5)"
r.reclass --quiet input=temp_cat_1 output=temp_cat_2 rules=$lc_rules

r.mapcalc "temp_agricultral_luse=temp_cat_2"
g.remove --quiet rast=temp_cat_2,temp_cat_1

r.mapcalc "temp_background_1=if(isnull($inmap), 50)" 
r.reclass --quiet input=temp_background_1 output=temp_background_2 rules=$lc_rules
r.mapcalc "temp_background=temp_background_2"
g.remove --quiet rast=temp_background_2,temp_background_1

g.remove --quiet rast=MASK
r.mapcalc "MASK=if(isnull($inmapa), $inmap, null())"



echo ""
echo "*************************"
echo "step 2 of 4: Changing resolution to field size (will be reset)"
echo "*************************"
echo ""

g.region save=temp_region

g.region res=$size



echo ""
echo "*************************"
echo "step 3 of 4: Sarting land use evolution calculation. This will start a loop and may take some time. Please do not interrupt the process until it has finished"
echo "*************************"
echo ""


echo "iteration 1"

r.mapcalc "tmpinreclass = if ($inmap, 1, null())"

patches=$prfx"_patches1"


r.random --q input=tmpinreclass n=$rand"%" raster_output=$patches

if [ "$GIS_FLAG_f" -eq 1 ]; then

	echo "grazing patches map = $patches"

	fi

r.mapcalc "$timer = if (isnull($patches), 50, 50-$effect)"


	r.reclass --q input=$timer output=temp_landuse1 rules=$lc_rules

g.rename --quiet rast=MASK,$prfx"mask" 

	r.mapcalc "$prfx"_landuse1" = if(isnull($inmapa) && isnull($inmap), temp_background, if(isnull($inmapa) && ($inmap >= 0), temp_landuse1, temp_agricultral_luse))"

	r.colors --q map=$prfx"_landuse1" rules=$lc_color

	r.recode --q input=$prfx"_landuse1" output=$prfx"_cfactor_1" rules=$cfact_rules

	r.colors --q map=$prfx"_cfactor_1" rules=$cfact_color


 	temparea=`eval r.stats -n -a fs=- input=$patches | cut -d'-' -f2`
	echo ""
	echo "Area of new randomized grazing patches = $temparea square meters"





echo "***********************"

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "Stats for $loop years of grazing at $rand% grazing of the landscape in $size square meter patches" > $txtout
echo "" >> $txtout
echo "Year 1:" >> $txtout
echo "" >> $txtout
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$prfx"_landuse1" fs=, nv=* nsteps=255 >> $txtout

fi

step=1


while [ "$step" -lt "$loop" ]
do
	step=$(($step+1))
	echo "iteration $step"
	laststep=$(($step-1))

	

	outcfactor=$prfx"_cfactor_"$step
	tmplanduse="temp_landuse"$step
	outlanduse=$prfx"_landuse"$step
	outpatches=$prfx"_patches"$step
	newtimer=$prfx".timer"$step
	oldtimer=$prfx".timer"$laststep

g.rename --quiet rast=$prfx"mask",MASK

	r.random --q input=tmpinreclass n=$rand"%" raster_output=$outpatches 	
	
	if [ "$GIS_FLAG_f" -eq 1 ]; then

	echo "grazing patches map = $outpatches"

	fi

r.mapcalc "$newtimer= if (isnull($outpatches) && $oldtimer <= 49, $oldtimer + 1, (if(isnull($outpatches), 50, (if ($oldtimer < $effect, 0, $oldtimer - $effect)))))"

	

	r.reclass --q input=$newtimer output=$tmplanduse rules=$lc_rules

g.rename --quiet rast=MASK,$prfx"mask"

	r.mapcalc "$outlanduse =if(isnull($inmapa) && isnull($inmap), temp_background, if(isnull($inmapa) &! isnull($inmap), $tmplanduse, temp_agricultral_luse))"

	r.colors --q map=$outlanduse rules=$lc_color

	r.recode --q input=$outlanduse output=$outcfactor rules=$cfact_rules

	r.colors --q map=$outcfactor rules=$cfact_color

 	temparea=`eval r.stats -n -a fs=- input=$outpatches | cut -d'-' -f2`
	echo ""
	echo "Area of new randomized grazing patches = $temparea square meters"
echo ""
echo ""
echo "************************"
echo ""

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "" >> $txtout
echo "Year $step:" >> $txtout
echo "" >> $txtout
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout
echo "" >> $txtout
r.stats -a -l -n input=$outlanduse fs=, nv=* nsteps=255 >> $txtout
	
fi

done


echo ""
echo "*************************"
echo "step 4 of 4: Cleaning up"
echo "*************************"
echo ""

if [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --q rast=temp*
g.mremove -f --q rast=*mask
g.mremove -f --q rast=$prfx"_cfactor*"
g.mremove -f --q rast=$prfx".timer*"
g.remove --q rast=tmpinreclass,MASK

elif [ "$GIS_FLAG_f" -eq 0 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --q rast=$prfx"_patches*"
g.mremove -f --q rast=temp*
g.mremove -f --q rast=*mask
g.mremove -f --q rast=$prfx"_cfactor*"
g.mremove -f --q rast=$prfx".timer*"
g.remove --q rast=tmpinreclass,MASK

elif [ "$GIS_FLAG_f" -eq 1 -a "$GIS_FLAG_l" -eq 0 ] ; then

g.remove --q rast=tmpinreclass,MASK
g.mremove -f --q rast=temp*
g.mremove -f --q rast=*mask
g.mremove -f --q rast=$prfx".timer*"
else


g.mremove -f --q rast=$prfx"_patches*"
g.mremove -f --q rast=temp*
g.mremove -f --q rast=*mask
g.remove --q rast=tmpinreclass,MASK
g.mremove -f --q rast=$prfx".timer*"

fi


\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort
\rm -f $TMP5 $TMP5.sort


echo ""
echo "Resetting region"
echo ""

g.region -g region=temp_region
g.remove --q region=temp_region


echo ""
echo "DONE!"
echo ""
echo ""

