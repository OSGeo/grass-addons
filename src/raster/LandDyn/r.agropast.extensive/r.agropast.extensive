#!/bin/sh
#
############################################################################
#
# MODULE:       	r.agropast.extensive
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		Creates a series of iterative landuse maps from a pastoral catchment and an 
#			extensive (swiddening) agricultural catchment (both need to be created by 
#			r.catchment), and outputs c factor as well
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: Creates a series of iterative landuse maps from a pastoral catchment and an extensive (swiddening) agricultural catchment (both need to be created by r.catchment), and outputs c factor as well.
#%END

#%option
#% key: inmapa
#% type: string
#% gisprompt: old,cell,raster
#% description: Input extensive agricultural catchment map (will be modeled as swidden ag, from r.catchment or r.buffer)
#% required : yes
#%END
#%option
#% key: randa
#% type: integer
#% description: percent of area to be fields (to be used in r.random)
#% answer: 20
#% required : yes
#%END
#%option
#% key: sizea
#% type: integer
#% description: size of fields (set as resolution in g.region)
#% answer: 45
#% required : yes
#%END
#%option
#% key: inmapg
#% type: string
#% gisprompt: old,cell,raster
#% description: Input grazing catchment map (from r.catchment or r.buffer)
#% required : yes
#%END
#%option
#% key: randg
#% type: integer
#% description: percent of area to be grazed in any year (to be used in r.random)
#% answer: 50
#% required : yes
#%END
#%option
#% key: sizeg
#% type: integer
#% description: size of grazing patches (set as resolution in g.region)
#% answer: 15
#% required : yes
#%END
#%option
#% key: effect
#% type: integer
#% description: Intensity of grazing (amount by which landcover is decreased after grazing)
#% answer: 1
#% options: 1,2,3,4,5
#% required : yes
#%END
#%option
#% key: loop
#% type: integer
#% description: number of iterations ("years") to run
#% answer: 50
#% required : yes
#%END
#%option
#% key: prfx
#% type: string
#% gisprompt: string
#% description: prefix for all output maps
#% required : yes
#%END
#%flag
#% key: l
#% description: -l Suppress output of C factor map (output landuse map only)
#%END
#%flag
#% key: g
#% description: -g Output maps of random grazing patches and of random fields at each iteration as well
#%END
#%flag
#% key: s
#% description: -s Output text file of pastoral land-use stats from the simulation (will be written to current mapset named "prefix"_pastoraluse_stats.txt, and will be overwritten if you run the simulation again with the same prefix)
#% answer: 1
#%END
#%flag
#% key: m
#% description: -m Output text file of agricultural land-use stats (same deal as above, will be called "prefix"_aguse_stats.txt
#% answer: 1
#%END
#%flag
#% key: p
#% description: -p Output text file of combined agricultural and pastoral land-use stats (same deal as above, will be called "prefix"_ag_and_past_use_stats.txt
#% answer: 1
#%END

#%option
#% key: lc_rules
#% type: string
#% gisprompt: string
#% description: path to reclass rules file for landcover map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/luse_reclass_rules.txt
#% required : yes
#%END
#%option
#% key: lc_color
#% type: string
#% gisprompt: string
#% description: path to color rules file for landcover map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/luse_colors.txt
#% required : yes
#%END
#%option
#% key: cfact_rules
#% type: string
#% gisprompt: string
#% description: path to recode rules file for c-factor map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/cfactor_recode_rules.txt
#% required : yes
#%END
#%option
#% key: cfact_color
#% type: string
#% gisprompt: string
#% description: path to color rules file for c-factor map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/cfactor_colors.txt
#% required : yes
#%END


if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

inmapa=$GIS_OPT_inmapa
randa=$GIS_OPT_randa
sizea=$GIS_OPT_sizea
inmapg=$GIS_OPT_inmapg
randg=$GIS_OPT_randg
sizeg=$GIS_OPT_sizeg

loop=$GIS_OPT_loop
effect=$GIS_OPT_effect
prfx=$GIS_OPT_prfx
timer=$prfx".timer1"

mapset=`eval g.gisenv get=MAPSET`
location=`eval g.gisenv get=LOCATION_NAME`
gisdbase=`eval g.gisenv get=GISDBASE`
txtout=$gisdbase"/"$location"/"$mapset"/"$prfx"_ag_use_stats.txt"
txtout2=$gisdbase"/"$location"/"$mapset"/"$prfx"_pastoral_use_stats.txt"
txtout3=$gisdbase"/"$location"/"$mapset"/"$prfx"_ag_plus_past_use_stats.txt"

lc_rules=$GIS_OPT_lc_rules

lc_color=$GIS_OPT_lc_color

cfact_rules=$GIS_OPT_cfact_rules

cfact_color=$GIS_OPT_cfact_color


g.region --quiet save=temp_region





echo ""
echo "*************************"
echo "Sarting land use evolution calculation. This will start a loop and may take some time. Please do not interrupt the process until it has finished. If interrupted, all temporary files created thus far will not be deleted. Plese be sure to check that all temporary files are deleted from your mapset before restarting the simulation"
echo "*************************"
echo ""


echo "YEAR 1"

echo ""
echo "Part 1: agricultural simulation"
echo ""

#setting initial conditions of map area
	r.mapcalc "temp_background_1=if(isnull($inmapg), 50, null())" 

#adding text descriptions to raw landscape categories and setting colors
	r.reclass --quiet rules=$lc_rules input=temp_background_1 output=temp_background_2


	r.mapcalc "temp_background=if(isnull(temp_background_2), null(), temp_background_2)"
	g.remove --quiet rast=temp_background_2,temp_background_1

	r.colors --quiet map=temp_background rules=$lc_color

#creating c-factor map and setting colors
	r.recode input=temp_background output=temp_background_cfactor rules=$cfact_rules --quiet 

	r.colors map=temp_background_cfactor rules=$cfact_color


#updating raw landscape category numbers
r.mask --quiet input=$inmapa maskcats=*

g.region --quiet res=$sizea

r.mapcalc "tmpinreclassa = if ($inmapa, 5, null())"

fields1=$prfx"_fields1"

r.random input=tmpinreclassa n=$randa"%" raster_output=$fields1

if [ "$GIS_FLAG_g" -eq 1 ]; then

	echo "fields map = $fields1"

fi


	temparea=`eval r.stats -n --quiet -a fs=- input=$fields1 | cut -d'-' -f2`
	echo ""
	echo "Area of randomized fields = $temparea square meters"


	g.remove --quiet rast=MASK

echo "***********************"
echo ""
echo "Part 2: grazing simulation"
echo ""



r.mapcalc "MASK=if( if(isnull($prfx"_fields1") &! isnull($inmapg), 1, null()))"

timer=$prfx".timer1"

g.region --quiet res=$sizeg

r.mapcalc "tmpinreclassg = if ($inmapg, 1, null())"

patches=$prfx"_patches1"


r.random --quiet input=tmpinreclassg n=$randg"%" raster_output=$patches

if [ "$GIS_FLAG_g" -eq 1 ]; then

	echo "grazing patches map = $patches"

	fi

r.mapcalc "$timer = if (isnull($patches), 50, 50-$effect)"

#adding text descriptions to raw landscape categories and setting colors
	r.reclass --quiet rules=$lc_rules input=$timer output=temp_pastuse1

	r.mapcalc "$prfx"_past_luse1" = temp_pastuse1"

	r.colors --quiet map=$prfx"_past_luse1" rules=$lc_color

#creating c-factor map and setting colors
	r.recode --quiet input=$prfx"_past_luse1" output=$prfx"_past_cfactor_1" rules=$cfact_rules

	r.colors --quiet map=$prfx"_past_cfactor_1" rules=$cfact_color


 	temparea=`eval r.stats -n -a fs=- input=$patches | cut -d'-' -f2`
	echo ""
	echo "Area of new randomized grazing patches = $temparea square meters"



#here we grab some pastoral stats, if asked for...

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "Stats for $loop years of grazing at $randg% grazing of the catchment $inmapg in $sizeg square meter patches" > $txtout2
echo "" >> $txtout2
echo "Year 1:" >> $txtout2
echo "" >> $txtout2
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout2
echo "" >> $txtout2
r.stats -a -l -n input=$prfx"_past_luse1" fs=, nv=* nsteps=255 >> $txtout2

fi

g.remove --quiet  rast=MASK

#here we actually make the ag maps

g.region --quiet  res=$sizea

r.mask --quiet  input=$inmapa maskcats=*

r.patch --quiet  input=$fields1,$timer output=temp_landuse1_1



	r.reclass --quiet  input=temp_landuse1_1 output=temp_landuse1 rules=$lc_rules

	r.mapcalc "$prfx"_ag_luse1" = temp_landuse1"

	r.colors --quiet  map=$prfx"_ag_luse1" rules=$lc_color

	r.recode --quiet  input=$prfx"_ag_luse1" output=$prfx"_ag_cfactor_1" rules=$cfact_rules

	r.colors --quiet  map=$prfx"_ag_cfactor_1" rules=$cfact_color



#here we grab some ag stats, if asked for...

	if [ "$GIS_FLAG_m" -eq 1 ]; then

	r.mapcalc "tempmap_arable=if($prfx"_ag_luse1" >= 17, 1, null())"

 	arablearea=`eval r.stats -n --quiet -a fs=- input=tempmap_arable | cut -d'-' -f2`

	r.mapcalc "tempmap_fallow=if($prfx"_ag_luse1" > 0 && $prfx"_ag_luse1" < 17, 1, null())"

 	fallowarea=`eval r.stats -n --quiet -a fs=- input=tempmap_fallow | cut -d'-' -f2`

	g.remove --quiet rast=tempmap_arable,tempmap_fallow


echo "Stats for $randa"%" in $sizea patches (for a total of $temparea sq.m) agricultural use of input catchment $inmapa" > $txtout
echo "" >> $txtout
echo "Year,Area of potentially arable land (sq.m), Area of non arable fallow land (sq.m)" >> $txtout
echo "1,$arablearea,$fallowarea" >> $txtout
	fi



g.remove --quiet rast=MASK

g.region --quiet -g region=temp_region

echo "***********************"
echo ""
echo "Creating combined landcover and C-factor maps"
echo ""

	r.patch --quiet input=$prfx"_ag_luse1",$prfx"_past_luse1",temp_background output=$prfx"_agropast_luse1"

	r.patch --quiet input=$prfx"_ag_cfactor_1",$prfx"_past_cfactor_1",temp_background_cfactor output=$prfx"_agropast_cfactor_1"


#here we grab some combined pastoral and ag stats, if asked for...

if [ "$GIS_FLAG_p" -eq 1 ]; then

echo "Stats for $loop years of grazing at $randg% grazing of the catchment $inmapg in $sizeg square meter patches and $randa% farming of the ag catchment in $sizea square meter patches of the catchment $inmapa. " > $txtout3
echo "" >> $txtout3
echo "Year 1:" >> $txtout3
echo "" >> $txtout3
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout3
echo "" >> $txtout3
r.stats -a -l -n input=$prfx"_agropast_luse1" fs=, nv=* nsteps=255 >> $txtout3

fi

	
echo "************************"
echo ""

step=1


while [ "$step" -lt "$loop" ]
do
	step=$(($step+1))
	echo "YEAR $step"
	laststep=$(($step-1))

	
echo ""
echo "Part 1: agricultural simulation"
echo ""


	outfields=$prfx"_fields"$step



r.mask --quiet input=$inmapa maskcats=*

g.region --quiet res=$sizea


	r.random --quiet input=tmpinreclassa n=$randa"%" raster_output=$outfields 	
	
	if [ "$GIS_FLAG_g" -eq 1 ]; then

	echo "fields map = $outfields"

	fi


g.remove --quiet rast=MASK


echo "**************************"
echo ""
echo "Part 2: grazing simulation"
echo ""

r.mapcalc "MASK=if( if(isnull($outfields) &! isnull($inmapg), 1, null()))"

g.region --quiet res=$sizeg

	outcfactor=$prfx"_past_cfactor_"$step
	tmplanduse="temp_pastuse"$step
	outlanduse=$prfx"_past_luse"$step
	outpatches=$prfx"_patches"$step
	newtimer=$prfx".timer"$step
	oldtimer=$prfx"_agropast_luse"$laststep


	r.random --quiet input=tmpinreclassg n=$randg"%" raster_output=$outpatches 	
	
	if [ "$GIS_FLAG_g" -eq 1 ]; then

	echo "grazing patches map = $outpatches"

	fi

r.mapcalc "$newtimer= if (isnull($outpatches) && $oldtimer <= 49, $oldtimer + 1, (if(isnull($outpatches), 50, (if ($oldtimer < $effect, 0, $oldtimer - $effect)))))"

	
	r.reclass --quiet input=$newtimer output=$tmplanduse rules=$lc_rules

	r.mapcalc "$outlanduse = $tmplanduse"

	r.colors --quiet map=$outlanduse rules=$lc_color

	r.recode --quiet input=$outlanduse output=$outcfactor rules=$cfact_rules

	r.colors --quiet map=$outcfactor rules=$cfact_color


 	temparea=`eval r.stats -n -a fs=- input=$patches | cut -d'-' -f2`

	echo ""
	echo "Area of new randomized grazing patches = $temparea square meters"
echo ""
echo ""
echo "************************"
echo ""

#here we grab some pastoral stats, if asked for...

if [ "$GIS_FLAG_s" -eq 1 ]; then

echo "" >> $txtout2
echo "Year $step:" >> $txtout2
echo "" >> $txtout2
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout2
echo "" >> $txtout2
r.stats -a -l -n input=$outlanduse fs=, nv=* nsteps=255 >> $txtout2
	
fi

g.remove --quiet rast=MASK

#here we actually make the ag maps
	tmpcfactor="temp_ag_cfactor"$step
	outagcfactor=$prfx"_ag_cfactor"$step
	tmplanduse="temp_aguse"$step
	tmp2landuse="temp_aguse"$step"_$step"
	outaglanduse=$prfx"_ag_luse"$step
	tcs="temp_class"$step
	tcls=$prfx"agropast_luse"$laststep

g.region --quiet res=$sizea

r.mask --quiet input=$inmapa maskcats=*

r.patch --quiet input=$outfields,$newtimer output=$tmp2landuse	



	r.reclass --quiet input=$tmp2landuse output=$tmplanduse rules=$lc_rules

	r.mapcalc "$outaglanduse = $tmplanduse"

	r.colors --quiet map=$outaglanduse rules=$lc_color

	r.recode --quiet input=$outaglanduse output=$outagcfactor rules=$cfact_rules

	r.colors --quiet map=$outagcfactor rules=$cfact_color


	temparea=`eval r.stats -n --quiet -a fs=- input=$outfields | cut -d'-' -f2`
	echo ""
	echo "Field placement re-randomized. Still cultivating $temparea square meters"

#here we grab some ag stats, if asked for...

	if [ "$GIS_FLAG_m" -eq 1 ]; then

	r.mapcalc "tempmap_arable=if($outaglanduse >= 17, 1, null())"

	arablearea=`eval r.stats -n --quiet -a fs=- input=tempmap_arable  | cut -d'-' -f2`

	r.mapcalc "tempmap_fallow=if($outaglanduse > 0 && $outaglanduse < 17, 1, null())"

 	fallowarea=`eval r.stats -n --quiet -a fs=- input=tempmap_fallow | cut -d'-' -f2`

	g.remove --quiet rast=tempmap_arable,tempmap_fallow


echo "$step,$arablearea,$fallowarea" >> $txtout
	
    fi



g.remove --quiet rast=MASK

g.region --quiet -g region=temp_region

echo "***********************"
echo ""
echo "Creating combined landcover and C-factor maps"
echo ""

outcombluse=$prfx"_agropast_luse"$step
outcombcfactor=$prfx"_agropast_cfactor_"$step


	r.patch --quiet input=$outaglanduse,$outlanduse,temp_background output=$outcombluse

	r.patch --quiet input=$outagcfactor,$outcfactor,temp_background_cfactor output=$outcombcfactor


#here we grab some combined pastoral and ag stats, if asked for...

if [ "$GIS_FLAG_p" -eq 1 ]; then

echo "" >> $txtout3
echo "Year $step:" >> $txtout3
echo "" >> $txtout3
echo "Landcover class #, Landcover description, Area (sq. m)" >> $txtout3
echo "" >> $txtout3
r.stats -a -l -n input=$outcombluse fs=, nv=* nsteps=255 >> $txtout3

fi

	
echo "************************"
echo ""









done





echo ""
echo "*************************"
echo "step 4 of 4: Cleaning up"
echo "*************************"
echo ""

if [ "$GIS_FLAG_g" -eq 1 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --quiet rast=temp*
g.mremove -f --quiet rast=$prfx"_*_cfactor*"
g.mremove -f --quiet rast=$prfx".timer*"
g.remove --quiet rast=tmpinreclassa,tmpinreclassg,MASK

elif [ "$GIS_FLAG_g" -eq 0 -a "$GIS_FLAG_l" -eq 1 ] ; then


g.mremove -f --quiet rast=$prfx"_patches*"
g.mremove --quiet -f rast=$prfx"_fields*"
g.mremove -f --quiet rast=temp*
g.mremove -f --quiet rast=$prfx"_*_cfactor*"
g.mremove -f --quiet rast=$prfx".timer*"
g.remove --quiet rast=tmpinreclassa,tmpinreclassg,MASK

elif [ "$GIS_FLAG_g" -eq 1 -a "$GIS_FLAG_l" -eq 0 ] ; then

g.remove --quiet rast=tmpinreclassa,tmpinreclassg,MASK
g.mremove -f --quiet rast=temp_landuse*
g.mremove -f --quiet rast=$prfx".timer*"
else


g.mremove -f --quiet rast=$prfx"_patches*"
g.mremove --quiet -f rast=$prfx"_fields*"
g.mremove -f --quiet rast=temp*
g.remove --quiet rast=tmpinreclassa,tmpinreclassg,MASK
g.mremove -f --quiet rast=$prfx".timer*"

fi


\rm -f $TMP1 $TMP1.sort
\rm -f $TMP2 $TMP2.sort
\rm -f $TMP3 $TMP3.sort
\rm -f $TMP4 $TMP4.sort
\rm -f $TMP5 $TMP5.sort
\rm -f $TMP6 $TMP6.sort


g.remove --quiet region=temp_region


echo ""
echo "DONE!"
echo ""
echo ""

