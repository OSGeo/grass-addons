#!/bin/sh
#
############################################################################
#
# MODULE:       	r.intensive.cult
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		Creates a series of iterative agricultural landuse maps from a catchment
#			created by r.catchment. This model takes natural vegetational succession into account.
#			Optionally outputs c factor as well
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: Creates a series of iterative agricultural landuse maps from a catchment created by r.catchment. This model takes natural vegetational succession into account. Optionally outputs c factor as well
#%END

#%option
#% key: inmap
#% type: string
#% gisprompt: old,cell,raster
#% description: Input catchment map (from r.catchment)
#% required : yes
#%END

#%option
#% key: lc_rules
#% type: string
#% gisprompt: string
#% description: path to reclass rules file for landcover map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/luse_reclass_rules.txt
#% required : yes
#%END
#%option
#% key: lc_color
#% type: string
#% gisprompt: string
#% description: path to color rules file for landcover map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/luse_colors.txt
#% required : yes
#%END
#%option
#% key: cfact_rules
#% type: string
#% gisprompt: string
#% description: path to recode rules file for c-factor map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/cfactor_recode_rules.txt
#% required : yes
#%END
#%option
#% key: cfact_color
#% type: string
#% gisprompt: string
#% description: path to color rules file for c-factor map
#% answer: /usr/local/grass-6.3.cvs/scripts/rules/cfactor_colors.txt
#% required : yes
#%END

#%option
#% key: loop
#% type: integer
#% description: number of iterations to run
#% answer: 50
#% required : yes
#%END
#%option
#% key: prfx
#% type: string
#% gisprompt: string
#% description: prefix for all output maps
#% required : yes
#%END
#%flag
#% key: m
#% description: -m output some stats to a text file in your home directory
#% answer: 1
#%END
#%flag
#% key: s
#% description: -s Suppress output of landuse map (output C factor map only)
#%END
#%flag
#% key: f
#% description: -f Output maps of random fields at each iteration as well
#%END



if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi


lc_rules=$GIS_OPT_lc_rules

lc_color=$GIS_OPT_lc_color

cfact_rules=$GIS_OPT_cfact_rules

cfact_color=$GIS_OPT_cfact_color

prfx=$GIS_OPT_prfx

inmap=$GIS_OPT_inmap
temp1=$prfx"_temp1"
temp2=$prfx"_temp2"

loop=$GIS_OPT_loop



step=1

newmap=$prfx"_landcover"$step
cfact=$prfx"_cfactor_"$step
	
	r.mapcalc "$temp1=if(isnull($inmap), 50, 5)"

	r.reclass  input=$temp1 output=$temp2 rules=$lc_rules

	r.mapcalc "$newmap=$temp2"

g.remove --quiet rast=$temp2,$temp1

	r.colors --quiet map=$newmap rules=$lc_color

	r.recode --quiet input=$newmap output=$cfact rules=$cfact_rules

	r.colors --quiet map=$cfact rules=$cfact_color

	echo "Making map: $newmap"
	echo ""

while [ "$step" -lt "$loop" ]
do
	step=$(($step+1))

newlcmap=$prfx"_landcover"$step
newcfact=$prfx"_cfactor_"$step
	
g.copy rast=$newmap,$newlcmap
g.copy rast=$cfact,$newcfact

	echo "Making map: $newmap"
	echo ""
done

echo ""
echo "DONE!"
echo ""
echo ""

