#!/bin/bash
############################################################################
#
# MODULE:      r.game_of_life
#
# AUTHOR(S):   Hamish Bowman, Dunedin, New Zealand
#
# PURPOSE:     Raster demo: Conway's game of life in 2D or 3D raster with options
#		to try Thompson's HighLife version and a couple GRASS exclusive
#		flavours. (aka interesting mistakes)
#
# COPYRIGHT:   Script (c) 2007 Hamish Bowman, and the GRASS Development Team
#	       This program is free software under the GNU General Public
#	       License (>=v2). Read the file COPYING that comes with GRASS
#	       for details.
#
#############################################################################
#
#rules for classic Conway's version:  (taken from Wikipedia entry)
# 1. Any live cell with fewer than two live neighbours dies, as if by loneliness.
# 2. Any live cell with more than three live neighbours dies, as if by overcrowding.
# 3. Any live cell with two or three live neighbours lives, unchanged, to the next generation.
# 4. Any dead cell with exactly three live neighbours comes to life.
#
# The rules for Thompson's HighLife version are the same, but six
#  live neighbors around a dead cell and the cell comes to life
#
# mod 4 is live hard, die hard
# mod 6 is gregarious lifestyle
#
# 3D runs "gregarious lifestyle", displays an xganim movie; creates an
#    MPEG-1 animation; and finally constructs a 3D raster block, then
#    loads that block in NVIZ. It's up to the user to create NVIZ isosurfaces
#    and cutting planes (at eg 0.9) -- I can't script that.
#

#%Module
#% description: Conway's game of life in 2D or 3D raster
#% keywords: cellular automata, game of life, demo
#%end
#%option
#% key: type
#% type: string
#% description: Kind of life you want to live
#% options: 2d_life,2d_highlife,2d_life_mod4,2d_life_mod6,3d_life
#% answer: 2d_life
#% required : yes
#%end
#%option
#% key: size
#% type: integer
#% description: Size of computational box
#% answer: 256
#% required : no
#%end


if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." >&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

cleanup()
{
   g.remove rast=count.$PREV_IT
   echo "User break!" 1>&2
   exit 1
}

#### trap ctrl-c so that we can clean up tmp
trap 'cleanup' 2 3 15


BOXSIZE="$GIS_OPT_SIZE"

GRASS_WIDTH=$((BOXSIZE * 2))
GRASS_HEIGHT=$((BOXSIZE * 2))
export GRASS_WIDTH GRASS_HEIGHT


case "$GIS_OPT_TYPE" in
    2d_life)
        # Conway's original version
       RULES="if( count.\$PREV_IT < 2, 0, \
	 if( count.\$PREV_IT > 3, 0, \
	 if( count.\$PREV_IT == 2, life.\$PREV_IT, \
	 if( count.\$PREV_IT == 3, 1, -99 ) ) ) )"
       ;;
    2d_highlife)
        # Thompson's HighLife version
       RULES="if( count.\$PREV_IT < 2, 0, \
	 if( count.\$PREV_IT > 3 && life.\$PREV_IT != 0, 0, \
	 if( count.\$PREV_IT == 2, life.\$PREV_IT, \
	 if( count.\$PREV_IT == 3 || count.\$PREV_IT == 6, 1, 0 ) ) ) )"
       ;;
    2d_life_mod4)
       # Life Mod 4: Live hard, Die hard
       RULES="if( count.\$PREV_IT < 3, 0, \
         if( count.\$PREV_IT > 4, 0, \
         if( count.\$PREV_IT == 4, life.\$PREV_IT, \
         if( count.\$PREV_IT == 3, 1, -99 ) ) ) )"
       ;;
    2d_life_mod6 | 3d_life)
       # Life Mod 6: Gregarious lifestyle
       RULES="if( count.\$PREV_IT < 2, 0, \
	 if( count.\$PREV_IT > 3 && count.\$PREV_IT != 6, 0, \
	 if( count.\$PREV_IT == 2, life.\$PREV_IT, \
	 if( count.\$PREV_IT == 3 || count.\$PREV_IT == 6, 1, \
	 -99 ) ) ) )"
       ;;
esac


########## do it ###########

d.mon x0
d.font FreeSans

g.region n=$BOXSIZE s=0 w=0 e=$BOXSIZE res=1


if [ `g.mlist -r patt="life\.\|count\." | grep -vc '^$'` -gt 0 ] ; then
   echo "ERROR: Please remove the old raster maps from a past life first:" 1>&2
   g.mlist -r rast patt='life\.\|count\.'
   exit 1
fi

GRASS_VERBOSE=0
export GRASS_VERBOSE
REMOVE=1

if [ $GIS_OPT_TYPE = "3d_life" ] ; then
   g.findfile elem=grid3 file=3d_life > /dev/null
   if [ $? -eq 0 ] ; then
      echo "ERROR: please remove the old 3D raster maps from a past life first:" 1>&2
      g.mlist rast3d patt=3d_life
      exit 1
   fi

   # hardcoded to 256 iterations currently, 
   #g.region t=$BOXSIZE b=0 res3=1
   g.region t=256 b=0 res3=1

   # keep the 2d slices
   REMOVE=0
fi


# Create random surface for seed
#
## -i flag is new for grass 6.3-cvs
##r.surf.random -i out=life.000 min=0 max=2  # creates 0/1 map not 0-2!
#
# rand(int,int) has a problem being non-random for powers of 2
#r.mapcalc "life.000 = rand(0,2)"   #creates a 0/1 map
r.mapcalc "life.000 = int(rand(0.0,1.0)+0.5)"

PREV_IT=000


#for i in `seq 1 $((BOXSIZE -1))` ; do
for i in `seq 1 255` ; do
   CURR_IT=`echo $i | awk '{printf("%.3d", $1)}'`

   r.neighbors method=sum size=3 in="life.$PREV_IT" out="count.$PREV_IT"

   eval "r.mapcalc \"life.$CURR_IT = $RULES\""

   d.rast "life.$CURR_IT"
   echo $CURR_IT | d.text color=black

   if [ $REMOVE -eq 1 ] ; then
      g.remove rast="count.$PREV_IT,life.$PREV_IT"
   fi

   PREV_IT=$CURR_IT
   i=`expr $i + 1`

done


#### 3d family tree and visualization demos ####
# Consider time to be the third dimension if you like
if [ $GIS_OPT_TYPE = "3d_life" ] ; then
   # last count
   r.neighbors method=sum in="life.$PREV_IT" out="count.$PREV_IT"

   # construct 3D block
   LIFE_MAPS=`g.mlist rast pat=life.* sep=,`
   COUNT_MAPS=`g.mlist rast pat=count.* sep=,`
   echo "Constructing 3D raster block ..." 1>&2
   r.to.rast3 in="$LIFE_MAPS" out=3d_life

   # movies
   echo 1>&2
   echo "Running 'xganim' map animator ..." 1>&2
   xganim view1="$LIFE_MAPS" view2="$COUNT_MAPS"

   echo "Constructing MPEG-1 movie ..." 1>&2
   r.out.mpeg -qc view1="$LIFE_MAPS" view2="$COUNT_MAPS" out=life.mpg qual=5
   if [ $? -eq 0 ] ; then
      echo "  'life.mpg' created." 1>&2
   fi

   g.mremove -f -r rast="life\.*\|count\.*"

   # view in NVIZ
   echo 1>&2
   echo "Opening 3D raster block with NVIZ ..." 1>&2
   echo "  (set viewing height to $((BOXSIZE * 2)) then add isosurfaces" 1>&2
   echo "   and cutting planes from the Volumes panel)" 1>&2
   nviz volume=3d_life
fi


exit
