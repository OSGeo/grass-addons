#!/bin/sh
#
#####################################################################################
#
# MODULE:	r.broscoe
# AUTHOR(S):	Annalisa Minelli, Ivan Marchesini, Pierluigi De Rosa, Luca Scrucca
#
# PURPOSE:	Calculates APTDTM test and t test statistics 
#		for some values of threshold, on a single basin 
#		according to A. J. Broscoe theory (1959) 
#
# COPYRIGHT:	(C) 2008 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
# REQUIREMENTS: you need R installed with packages "stringr" and "tools".
#	For more information on R see the documentation available at
#	http://www.r-project.org/
#
# TODO: solve stability problems for low area threshold (cf. v.strahler) 
###################################################################################
#%Module
#%  description: Calculates statistics for some values of threshold, on a single basin according to A. J. Broscoe theory (1959)
#%  keywords: APTDTM test,adjusted t test,t test,mean stream drop
#%End
#%option
#% key: dem
#% type: string
#% key_desc: dem
#% gisprompt: old,cell,raster
#% description: Name of DEM raster map					
#% required : yes
#%END
#%option
#% key: thresholds
#% type: integer
#% description: Threshold values to calculate statistics on (separated by <space>)
#% required : yes
#%end
#%option
#% key: xcoor
#% type: double
#% description: x coord of outlet
#% required : yes
#%end
#%option
#% key: ycoor
#% type: double
#% description: y coord of outlet
#% required : yes
#%end
#%option
#% key: lt
#% type: integer
#% description: Lesser than (in meters), the program doesn't consider stream drops lesser than this
#% required : yes
#%END
#%option
#% key: result
#% type: string
#% gisprompt: new_folder,folder,output
#% key_desc: name
#% description: Name for the folder in /tmp where "drop"_threshold text files are stored
#% required: yes
#%end

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." >&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

dem=$GIS_OPT_DEM
thresholds=$GIS_OPT_THRESHOLDS
xcoor=$GIS_OPT_XCOOR
ycoor=$GIS_OPT_YCOOR
lt=$GIS_OPT_LT
result=$GIS_OPT_RESULT

### setup enviro vars ###
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

echo $LOCATION_NAME

res=`g.region -p | grep res | sed 1d | cut -f2 -d':' | tr -d ' ' `

rm -R /tmp/$result
mkdir /tmp/$result

#preparing text output header
echo "threshold	t	Pr	Radj	Pvalue">result
echo "threshold	maxord">thrVSmaxord

for j in $thresholds
do

g.remove vect=ordered_$j
rm orderedtxt_$j

echo "initializing statistics for threshold value=$j"

r.strahler.sh dem=$dem xcoor=$xcoor ycoor=$ycoor thr=$j output=ordered_$j textoutput=orderedtxt_$j --overwrite 

rm one
rm two
rm three
rm maxord

`cat orderedtxt_$j | sed 2d |sed 1d > one
sort -r -k 4,4 one > two
head -1 two > three
awk 'NR==1{print $4}' three > "maxord"`

maxord=`cat maxord`

echo "$j	$maxord" >> thrVSmaxord

   a=1
   until [ "$a" -gt "$maxord" ]
   do
      g.remove vect=ord1,ord1_pl,ord1_pl_3d
      g.remove vect=ord1_pl_3d_cat
      rm tmp
      rm ordcol
      rm textout

      v.extract input=ordered_$j output=ord1 type=line layer=1 new=-1 list=$a 

      v.build.polylines input=ord1 output=ord1_pl cats=no

      v.drape input=ord1_pl type=line rast=$dem method=nearest output=ord1_pl_3d

      v.category input=ord1_pl_3d output=ord1_pl_3d_cat type=line option=add cat=1 layer=1 step=1

      v.db.addtable map=ord1_pl_3d_cat table=ord1_pl_3d_cat layer=1 'columns=cat integer, sx double, sy double, sz double, ex double, ey double, ez double'

      v.to.db map=ord1_pl_3d_cat type=line layer=1 qlayer=1 option=start units=meters 'column=sx, sy, sz'

      v.to.db map=ord1_pl_3d_cat type=line layer=1 qlayer=1 option=end units=meters 'column=ex, ey, ez'
      
      #added to prevent r.category - in v.rast.stats - errors.. align on DEM doesn't work
      v.db.addcol map=ord1_pl_3d_cat columns="stats_min double precision"

      #v.rast.stats vector=ord1_pl_3d_cat raster=$dem colprefix=stats percentile=90 --verbose -c


     db_driver=`db.connect -p | grep driver | cut -f2 -d':'`
     db_database=`db.connect -p | grep database | cut -f2 -d':'`
     for i in `db.select table=ord1_pl_3d_cat database=$db_database driver=$db_driver 'sql=select cat from ord1_pl_3d_cat' | sed 1d`
     do
         sz=`echo "select sz from ord1_pl_3d_cat where cat=$i" | db.select | sed 1d`
         ez=`echo "select ez from ord1_pl_3d_cat where cat=$i" | db.select | sed 1d`
         #added to prevent r.category - in v.rast.stats - errors.. align on DEM doesn't work
         if [ "$sz" -gt "$ez" ]
          then
          v.db.update map=ord1_pl_3d_cat column=stats_min value=$ez where="cat=$i"
         else
          v.db.update map=ord1_pl_3d_cat column=stats_min value=$sz where="cat=$i"
         fi
         min=`echo "select stats_min from ord1_pl_3d_cat where cat=$i" | db.select | sed 1d`
	 if [  `echo "$ez - $min" | bc -l | cut -f1 -d'.'` -lt "$lt" ] || [ `echo "$sz - $min" | bc -l | cut -f1 -d'.'` -lt "$lt" ]
	   then
 	   if [ "$ez" -gt "$sz" ]
		then
		echo "$ez - $min" | bc -l | cut -f1 -d'.' >> tmp
		echo $a >> ordcol
	   else
		echo "$sz - $min" | bc -l | cut -f1 -d'.' >> tmp
		echo $a >> ordcol
	   fi
	 else 
	   echo "$ez - $min" | bc -l | cut -f1 -d'.' >> tmp
	   echo $a >> ordcol
	   echo "$sz - $min" | bc -l | cut -f1 -d'.' >> tmp
	   echo $a >> ordcol
	 fi
      done
   paste ordcol tmp > textout\_$a

   if [ "$a" -gt 1 ]
     then
     b=`echo "$a-1" | bc -l`
     cat textout\_$b textout\_$a > textout_temp
     rm textout\_$a textout\_$b
     mv textout_temp textout\_$a
   fi

   a=$(($a+1))
   done

   mv textout\_$maxord textout
   echo "plotting textout..."
   cat textout
   cp textout /tmp/$result/drop_$j.csv
done
echo "
cat('running R\n')
workdir=\"/tmp/$result/\"

nperm = 999
trim = 0.25/2

#############################################################################

setwd(workdir)
Bname = tolower(strsplit(workdir, \"/tmp/\")[[1]][2])
bacino = substr(Bname,1,nchar(Bname)-1)
files = list.files(path = workdir, glob2rx(\"drop_*.csv\"))
pdfile = paste(bacino, \".pdf\", sep = \"\")
csvfile = paste(bacino, \".csv\", sep = \"\")

thresholds = as.numeric(sub(\"drop_\", \"\", sub(\".csv\", \"\", files)))
ord = order(thresholds)
thresholds = thresholds[ord]
files = files[ord]

# t stat with equal variances
t.statistic <- function(data)
{
  m1 = with(data, mean(drop[order==1]))
  s1 = with(data, sd(drop[order==1]))
  n1 = with(data, length(drop[order==1]))
  m2 = with(data, mean(drop[data\$order>1]))
  s2 = with(data, sd(drop[order>1]))
  n2 = with(data, length(drop[order>1]))
  t = (m1-m2)/( sqrt( ((n1-1)*s1^2+(n2-1)*s2^2)/(n1+n2-2) * (1/n1 + 1/n2)) )
  return(t)
}

# difference trimmed mean statistic
ADTDTM.statistic <- function(data)
{
  m1 = with(data, mean(drop[data\$order==1], trim = trim))
  m2 = with(data, mean(drop[data\$order>1], trim = trim))
  t = (m1-m2)
  return(t)
}


# difftrmean.statistic <- function(data)
# { # difference on median
#   m1 = with(data, median(drop[data\$order==1]))
#   m2 = with(data, median(drop[data\$order>1]))
#   t = (m1-m2)
#   return(t)
# }

tab = matrix(NA, length(files), 10)
rownames(tab) = thresholds
colnames(tab) = c(\"n1\", \"n2\", \"Mean 1\", \"Mean >1\", \"diff\", \"sd 1\", \"sd >1\", \"TrMean 1\", \"Tr Mean >1\", \"diff\")

test_pvalue = matrix(NA, length(files), 3)
colnames(test_pvalue) = c(\"Tarboton t-test\", \"t-test (adjusted)\", \"Permutation test (adjusted)\")
rownames(test_pvalue) = thresholds

for(i in 1:length(files))
{
  data = read.table(files[i], header = FALSE, sep = \"\t\")
  names(data) = c(\"order\", \"drop\")
  
  
#   with(data, 
#        { ord = factor(ifelse(order == 1, 1, 2), labels = c(\"1\", \">1\"))
#          boxplot(drop ~ ord) 
#          points(1:nlevels(ord), as.vector(by(drop, ord, mean, trim = trim)), col = 2, pch = 3)
#        })
#   
#   with(data, c(mean(drop[data\$order==1]), mean(drop[data\$order>1])))
#   with(data, c(mean(drop[data\$order==1], trim = trim), mean(drop[data\$order>1], trim = trim)))
#   with(data, c(median(drop[data\$order==1]), median(drop[data\$order>1])))
  
  tab[i,1]  = sum(data\$order==1)
  tab[i,2]  = sum(data\$order>1)
  tab[i,3]  = with(data, mean(drop[data\$order==1]))
  tab[i,4]  = with(data, mean(drop[data\$order>1]))
  tab[i,5]  = tab[i,3] - tab[i,4]
  tab[i,6]  = with(data, sd(drop[data\$order==1]))
  tab[i,7]  = with(data, sd(drop[data\$order>1]))
  tab[i,8]  = with(data, mean(drop[data\$order==1], trim = trim))
  tab[i,9]  = with(data, mean(drop[data\$order>1], trim = trim))
  tab[i,10] = tab[i,8] - tab[i,9]

  t_test = with(data, t.test(drop[order==1], drop[order > 1],
                             var.equal = TRUE, alternative = \"two.sided\"))
  test_pvalue[i,1:2] = t_test\$p.value
  
  
  dStat = ADTDTM.statistic(data)
  permStat = rep(NA, nperm)
  for(j in 1:nperm)
     { permData = data
       perm = sample.int(nrow(data))
       permData\$order = data\$order[perm]
       permStat[j] = ADTDTM.statistic(permData)
      }
      
  # hist(permStat); abline(v=dStat, col = 2)
  
  test_pvalue[i,3] = (sum(abs(permStat) > abs(dStat))+1)/(nperm+1)
}

# adjust p-value using Benjamini-Hochberg method to control FDR
test_pvalue[,2] = p.adjust(test_pvalue[,2], method = \"BH\")
test_pvalue[,3] = p.adjust(test_pvalue[,3], method = \"BH\")

# Save results
write.csv(file = csvfile, cbind(tab,test_pvalue))

# Read save results
# out = read.csv(file = csvfile, check.names = FALSE)
# tab = out[,1:11]
# test_pvalue = out[,12:14]
# colnames(test_pvalue)[3] = \"APTDTM\"

pdf(file = pdfile, width = 8, height = 6)
par(mar = c(4,4,1,1), mgp = c(2.2, 0.5, 0), tcl = -0.3)
cols = c(\"grey30\", \"black\", \"cornflowerblue\")
pchs = c(2, 17, 19)
par(mar = c(4,4,1,1))
matplot(thresholds, test_pvalue, type = \"b\", log = \"x\", 
        xlab = \"Threshold\", ylab = \"p-value\", lty = 1, col = cols, pch = pchs, xaxt = \"n\", yaxt = \"n\")
axis(1, at = thresholds, cex.axis = 0.7, las = 3)
axis(2, at = sort(c(0.05, 0:10/10)), cex.axis = 0.7)
abline(h = 0.05, lty = 2)
legend(\"topleft\", legend = colnames(test_pvalue), col = cols, pch = pchs, lty = 1, inset = 0.05)
dev.off()
" > R_temp

echo 'source ("R_temp")' | R --vanilla --slave

rm R_temp one maxord ordcol textout three two tmp


