#!/bin/bash
#
################################################################################
#
# MODULE:		r.in.ign
# AUTHOR(S):		Vincent Bain
# PURPOSE:		Retrieve wmts channel from IGN, see http://api.ign.fr
#			Developed for internal use
# COPYRIGHT:		(C) 2014 by the GRASS Development Team and Toraval-Vincent Bain
#			This program is free software under the GNU General
#			Public License (>=v2). Read the file COPYING that comes
#			with GRASS for details.
#
# VERSION:		2.3
#			both png and jpeg tiles formats are now supported
#			Currently only works on PM (EPSG:3857) raster stacks
#			
################################################################################


#%Module
#% description: this module imports raster data from IGN wmts server. Available layers depend upon the user's contract. For more information see http://api.ign.fr/
#% keywords: raster, import, wms, wmts, ign
#%End

#%flag
#% key: m
#% description: output 3 separate-band rasters rather than a composite RGB raster 
#%end

#%flag
#% key: c
#% description: execute a GetCapabilities request on the server, to fetch available layers and exit
#%end

#%option
#% key:apikey
#% type: string
#% description: personal apiKey
#% required : yes
#%end

#%option
#% key:user
#% type: string
#% description: username for server connection
#% required : yes
#%end

#%option
#% key:password
#% type: string
#% description: password for server connection
#% required : yes
#%end

#%option
#% key:wmtslayer
#% type: string
#% description: wmts layer to request
#% answer: ORTHOIMAGERY.ORTHOPHOTOS
#% required : no
#%end

#%option
#% key:tiletype
#% type: string
#% description: tile format, choose between jpg and png
#% answer: jpg
#% required : no
#%end

#%option
#% key: output
#% type: string
#% gisprompt: new,cell,raster
#% description: raster map to import
#% required : no
#%end

#---------------------------------------------
# Get environnment
if  test "$GISBASE" = ""; then
	echo "You must be in GRASS GIS to run this program." 1>&2
	exit 1
fi

GIS_DBASE=`g.gisenv get=GISDBASE`
GIS_LOCATION_NAME=`g.gisenv get=LOCATION_NAME`
GIS_MAPSET=`g.gisenv get=MAPSET`
GIS_MAP_PATH="${GIS_DBASE}/${GIS_LOCATION_NAME}/${GIS_MAPSET}"

#---------------------------------------------

#---------------------------------------------
# Check for GDAL Tools

if [ ! -x "`which gdalwarp`" ] ; then
	g.message -e "gdalwarp required, please install GDAL Tools first"
	exit 1
fi
if [ ! -x "`which gdal_translate`" ] ; then
	g.message -e "gdal_translate required, please install GDAL Tools first"
	exit 1
fi
if [ ! -x "`which gcps2wld.py`" ] ; then
	g.message -e "gcps2wld required, please install GDAL Tools first"
	exit 1
fi

#---------------------------------------------

#---------------------------------------------
# Check for maptools
if [ ! -x "`which cs2cs`" ] ; then
	g.message -e "cs2cs required, install Maptools first"
	exit 1
fi
#---------------------------------------------

#---------------------------------------------
# Check for awk

if ! echo test | awk '{print $0}' > /dev/null 2>&1; then
	g.message -e "`basename $0`: awk required, please install awk/gawk first" 1>&2
	exit 1
fi
#---------------------------------------------

#---------------------------------------------
# Check for xmlstarlet

if [ ! -x "`which xmlstarlet`" ] ; then
	g.message -e "xmlstarlet required, install it first"
	exit 1
fi

#---------------------------------------------
#---------------------------------------------
# save command line
if [ "$1" != "@ARGS_PARSED@" ] ; then
    CMDLINE=`basename "$0"`
    for arg in "$@" ; do
        CMDLINE="$CMDLINE \"$arg\""
    done
    export CMDLINE
	exec g.parser "$0" "$@"
fi
#---------------------------------------------

#---------------------------------------------
# Functions handling user break
Cleanup()
{
	# cleaning temporary directory
	if [ -d "$GIS_MAP_PATH/.tmp/ign" ]; then
		rm -r "$GIS_MAP_PATH"/.tmp/ign/
	fi
}

Cleanexit()
{
	g.message -w "User break !"
	Cleanup
	exit 1
}
trap "Cleanexit" 2 3 15
#---------------------------------------------

#---------------------------------------------
# Setting up various variables 

	# s_srs to match current location proj
curproj=`eval g.proj -jf`

	# working directory
if [ ! -d "$GIS_MAP_PATH/.tmp/ign" ] ; then
	mkdir "$GIS_MAP_PATH/.tmp/ign"
fi

	# step parameter, corresponds to tiles dimensions, fixed to 256
pas=256
#---------------------------------------------

#---------------------------------------------
# Testing C flag 
if [ "$GIS_FLAG_C" -eq 1 ] ; then
	# fetch capabilities xml file on the server
		wget -q "http://${USER}:${PASSWORD}@wxs.ign.fr/${GIS_OPT_APIKEY}/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetCapabilities" -O capabilities.xml -O "$GIS_MAP_PATH"/.tmp/ign/capabilities.xml
	# clean file : IGN xml capabilities happened to be delivered as a one line file
		xmlstarlet fo "$GIS_MAP_PATH"/.tmp/ign/capabilities.xml > "$GIS_MAP_PATH"/.tmp/ign/fcapab.xml
	# extract available layers
	echo "Available layers on this server are :"
		xmlstarlet sel -N myns=http://www.opengis.net/wmts/1.0 -N ows=http://www.opengis.net/ows/1.1 -t -m myns:Capabilities/myns:Contents/myns:Layer -v ows:Identifier -n "$GIS_MAP_PATH"/.tmp/ign/fcapab.xml
	#exit
	Cleanup
	exit 0

fi
#---------------------------------------------

#---------------------------------------------	
# Defining which layers stack to query ('tilematrix' var): starting from largest zoom (zero level, i.e. resolution 156543.033928 m) we calculate output tiles resol (m) to fit current region resolution

eval `g.region -g`

resolzero=156543.033928041
tilematrix=0
resol=`echo "scale=12;$resolzero / 2^${tilematrix}" | bc`
# we seek finest resolution between ew and ns res
res=`echo "$ewres $nsres" | awk '{ if ( $2 > $1 ) { print $1} else { print $2}}'`

test2=`echo "$resol > $res" | bc`
while [ "$test2" -eq 1 ] ; do
((tilematrix++))
resol=`echo "scale=12;$resolzero / 2^${tilematrix}" | bc`
test2=`echo "$resol > $res" | bc`
done

#---------------------------------------------	
# pyramid origin (yet only PM implemented)
X0=-20037508
Y0=20037508

#---------------------------------------------	
# translating region extents in the correct projection
# pay attention to input correct corners in order to get correct translation...
nwxpm=`echo "$w $n" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $1}'`
nwypm=`echo "$w $n" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $2}'`

nexpm=`echo "$e $n" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $1}'`
neypm=`echo "$e $n" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $2}'`

swxpm=`echo "$w $s" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $1}'`
swypm=`echo "$w $s" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $2}'`

sexpm=`echo "$e $s" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $1}'`
seypm=`echo "$e $s" | cs2cs $curproj +to +init=epsg:3857 | awk -F" " '{print $2}'`

# current region projected in target projection system results in a tilted rectangle, care for it :
wpm=`echo "$nwxpm $swxpm" | awk '{ if ( $2 > $1 ) { print $1} else { print $2}}'`
epm=`echo "$nexpm $sexpm" | awk '{ if ( $2 > $1 ) { print $2} else { print $1}}'`
npm=`echo "$nwypm $neypm" | awk '{ if ( $2 > $1 ) { print $2} else { print $1}}'`
spm=`echo "$swypm $seypm" | awk '{ if ( $2 > $1 ) { print $1} else { print $2}}'`

#---------------------------------------------	
# calculate ul/lr corner row/col
widthi=`echo $wpm - $X0 | bc`
heighti=`echo $Y0 - $npm | bc`
coli=`echo "scale=12;$widthi / $resol / $pas" | bc`
rowi=`echo "scale=12;$heighti / $resol / $pas" | bc`

coli=`echo "${coli/.*/}"` # returns integer part, actually what we need
rowi=`echo "${rowi/.*/}"`
xi=`echo "scale=12;$X0 + $coli * $resol * $pas" | bc`
yi=`echo "scale=12;$Y0 - $rowi * $resol * $pas" | bc`

# calculate lower right row/col
widthf=`echo $epm - $X0 | bc`
heightf=`echo $Y0 - $spm | bc`
colf=`echo "scale=12;$widthf / $resol / $pas" | bc`
rowf=`echo "scale=12;$heightf / $resol / $pas" | bc`
colf=`echo "${colf/.*/}"` # returns integer part, actually what we need
rowf=`echo "${rowf/.*/}"`

iterx=$(( colf - coli ))
itery=$(( rowf - rowi ))
#---------------------------------------------


#---------------------------------------------	
# loop downloading tiles
for i in `seq 0 "$iterx"`; do
	colk=$(( coli + i ))
	for j in `seq 0 "$itery"`; do
		rowk=$(( rowi + j ))
		# let's feed the URL list file
		echo "\"https://${GIS_OPT_USER}:${GIS_OPT_PASSWORD}@wxs.ign.fr/${GIS_OPT_APIKEY}/geoportail/wmts?LAYER=${GIS_OPT_WMTSLAYER}&EXCEPTIONS=text/xml&FORMAT=image/${GIS_OPT_TILETYPE}&SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetTile&STYLE=normal&TILEMATRIXSET=PM&TILEMATRIX=${tilematrix}&TILEROW=${rowk}&TILECOL=${colk}&\"" "-O "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j".${GIS_OPT_TILETYPE}" >>"$GIS_MAP_PATH"/.tmp/ign/url.list
		((j++))
	done
	((i++))
done
#---------------------------------------------
echo "importing $(( ( iterx + 1 ) * ( itery + 1 ) )) tiles : $(( iterx + 1 )) cols x $(( itery + 1 )) rows"

echo "[R]etrieve or [c]ancel? (default [R])"
	read -s -n1 ans
	case $ans in
		r* | R*|'')
		;;
		c* | C*)
			g.message "Aborting"
			Cleanup
			exit 1
		;;
	esac

xargs -a "$GIS_MAP_PATH"/.tmp/ign/url.list -n 3 -P 64 wget -q 
errwget=$?
if [ $errwget -eq 6 ]; then
	g.message -w "Username/password authentication failure... bailing out !"
	Cleanup
	exit 1
elif [ $errwget -eq 8 ]; then
	g.message -w "Server issued an error response (possibly a bad layer request)... bailing out !"
	Cleanup
	exit 1
elif [ $errwget -ne 0 ] ; then
	while [ $errwget -ne 0 ] ; do 
	# let's check tiles directory and pick up missing tiles
	if [ -f "$GIS_MAP_PATH"/.tmp/ign/urlcorr.list ] ; then
		rm "$GIS_MAP_PATH"/.tmp/ign/urlcorr.list
	fi
	for i in `seq 0 "$iterx"`; do
		for j in `seq 0 $itery`; do
			if [ -f "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j"."${GIS_OPT_TILETYPE}" ] ; then
				size=`stat -c %s "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j".${GIS_OPT_TILETYPE}`
			else
				size=0
			fi
			if [ ! -f "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j"."${GIS_OPT_TILETYPE}" -o "$size" -eq 0 ] ; then
				cat "$GIS_MAP_PATH"/.tmp/ign/url.list | grep tile"c$i""l$j"."${GIS_OPT_TILETYPE}">>"$GIS_MAP_PATH"/.tmp/ign/urlcorr.list
			fi
			((j++))
		done
		((i++))
	done
	echo "missing tiles :"
	cat "$GIS_MAP_PATH"/.tmp/ign/urlcorr.list
	echo "[R]etrieve or [c]ancel? (default [R])"
	read -s -n1 ans
	case $ans in
		r* | R*|'')
			g.message "Retry..."
		xargs -a "$GIS_MAP_PATH"/.tmp/ign/urlcorr.list -n 3 -P 64 wget -q
		errwget=$?
		;;
		c* | C*)
		errorcount=1
		break
		;;
	esac
	done
fi

if [ $errwget -eq 0 ] ; then
	errorcount=0
fi
#---------------------------------------------

#---------------------------------------------
#georeferencing tiles
for i in `seq 0 "$iterx"`; do
	xk1=`echo "scale=12;$xi + $i * $pas * $resol" | bc`
	for j in `seq 0 "$itery"`; do
		yk1=`echo "scale=12;$yi - $j * $pas * $resol" | bc`
		xk2=`echo "scale=12;$xk1 + $pas * $resol" | bc`
		yk2=`echo "scale=12;$yk1 - $pas * $resol" | bc`
		
		# let's feed referencing files (xargs inputs)
		echo "-gcp 0 0 "$xk1" "$yk1" -gcp 256 256 "$xk2" "$yk2" -gcp 256 0 "$xk2" "$yk1" "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j".${GIS_OPT_TILETYPE} "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j".tif" >>"$GIS_MAP_PATH"/.tmp/ign/gdtr1.list
		
		echo "-of GTiff -a_srs "+init=epsg:3857" "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j".tif "$GIS_MAP_PATH"/.tmp/ign/tiler"c$i""l$j".tif" >>"$GIS_MAP_PATH"/.tmp/ign/gdtr2.list
		((j++))
	done
	((i++))
done
g.message "georeferencing initial tiles"
xargs -a "$GIS_MAP_PATH"/.tmp/ign/gdtr1.list -n 17 -P 64 gdal_translate

g.message "writing world files"
for i in `seq 0 "$iterx"`; do
	for j in `seq 0 "$itery"`; do
		gcps2wld.py "$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j".tif>"$GIS_MAP_PATH"/.tmp/ign/tile"c$i""l$j".tfw
		((j++))
	done
	((i++))
done

g.message "processing GeoTiff tiles"
xargs -a "$GIS_MAP_PATH"/.tmp/ign/gdtr2.list -n 6 -P 64 gdal_translate
#---------------------------------------------

#---------------------------------------------
# assembling tiles into a single image
g.message "merging tiles"
gdal_merge.py -o "$GIS_MAP_PATH"/.tmp/ign/tilepm.tif "$GIS_MAP_PATH"/.tmp/ign/tiler*.tif
#---------------------------------------------

#---------------------------------------------	
# projecting the image in t_srs=curproj
g.message "projecting image in current projection system"
gdalwarp -s_srs "+init=epsg:3857" -t_srs "$curproj +wktext" -rc -co "INTERLEAVE=PIXEL" -dstnodata 255 -dstalpha "$GIS_MAP_PATH"/.tmp/ign/tilepm.tif "$GIS_MAP_PATH"/.tmp/ign/tile.tif
#---------------------------------------------

#---------------------------------------------	
# set region resolution to resol
g.region res=$resol
#---------------------------------------------

#---------------------------------------------	
# retrieving the latter as a GRASS raster map
g.message "generating raster maps"
r.in.gdal input="$GIS_MAP_PATH"/.tmp/ign/tile.tif output="$GIS_OPT_OUTPUT"
#---------------------------------------------	

#---------------------------------------------	
# check if we have a multi-band or a single-band raster
eval `g.findfile element=cell file=$GIS_OPT_OUTPUT.1`

if [ "$file" ] ; then
	g.remove rast=$GIS_OPT_OUTPUT.alpha
	g.rename rast=$GIS_OPT_OUTPUT.1,$GIS_OPT_OUTPUT
	i.group -r group=$GIS_OPT_OUTPUT input=$GIS_OPT_OUTPUT.alpha,$GIS_OPT_OUTPUT.1
	i.group group=$GIS_OPT_OUTPUT input=$GIS_OPT_OUTPUT
	r.support map=$GIS_OPT_OUTPUT title="${GIS_OPT_WMTSLAYER} extracted from ign wmts service" history="${CMDLINE}"
else
	# optionnally make a composite rgb raster
	if [ "$GIS_FLAG_M" -eq 0 ] ; then
		g.message "compositing raster maps"
		r.composite output="$GIS_OPT_OUTPUT" red="$GIS_OPT_OUTPUT".red green="$GIS_OPT_OUTPUT".green blue="$GIS_OPT_OUTPUT".blue
		g.mremove -f rast="$GIS_OPT_OUTPUT".red,"$GIS_OPT_OUTPUT".green,"$GIS_OPT_OUTPUT".blue,"$GIS_OPT_OUTPUT".alpha
		i.group -r group=$GIS_OPT_OUTPUT input=$GIS_OPT_OUTPUT.alpha,$GIS_OPT_OUTPUT.red,$GIS_OPT_OUTPUT.green,$GIS_OPT_OUTPUT.blue
		i.group group=$GIS_OPT_OUTPUT input=$GIS_OPT_OUTPUT
		# write support data
		r.support map="$GIS_OPT_OUTPUT" title="${GIS_OPT_WMTSLAYER} extracted from ign wmts service" history="${CMDLINE}"
	else
		# write support data for each band
		for i in {red,green,blue} ; do
			r.support map="$GIS_OPT_OUTPUT".$i title="${GIS_OPT_WMTSLAYER} extracted from ign wmts service" history="${CMDLINE}"
		done
		g.remove rast=$GIS_OPT_OUTPUT.alpha
	fi
fi



if [ "$errorcount" -ne 0 ] ; then 
	g.message -w "Error(s) encountered while downloading tiles !"
else
	echo "$(( ( iterx + 1 ) * ( itery + 1 ) )) tiles imported : $(( iterx + 1 )) cols x $(( itery + 1 )) rows"
	g.message "Done."
fi

#---------------------------------------------	
# reset region resolution to previous
g.region ewres=$ewres nsres=$nsres
#---------------------------------------------

#---------------------------------------------	

Cleanup
exit 0
