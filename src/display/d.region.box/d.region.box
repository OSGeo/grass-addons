#!/bin/sh
############################################################################
#
# MODULE:       d.region.box
# AUTHOR:       Hamish Bowman
# PURPOSE:      draw a box around current region
# COPYRIGHT:    (c) 2006 Hamish Bowman, and the GRASS Development Team
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#% description: Draws a box around the current region in the display frame
#% keywords: display
#%end

#% option
#%  key: region
#%  description: Saved region to draw a box around instead of the current
#%  required: no
#%  type: string
#% end
#% option
#%  key: color
#%  type: string
#%  required: no
#%  key_desc: name
#%  label: Border color
#%  description: Either a standard color name or R:G:B triplet
#%  answer: black
#%  gisprompt: color,grass,color
#% end
#% option
#%  key: width
#%  type: integer
#%  required: no
#%  description: Border width
#%  answer: 0
#% end
#% flag
#%  key: f
#%  description: Non-persistant box (doesn't survive redraw or zoom)
#% end

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

# skip GUI if no args are given
if [ $# -gt 0 ] ; then
  if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
  fi
else
  GIS_FLAG_F=0
  GIS_OPT_COLOR=black
  GIS_OPT_WIDTH=0
fi


if [ -n "$GIS_OPT_REGION" ] ; then
   eval `g.findfile elem=windows file="$GIS_OPT_REGION"`
   if [ -z "$file" ] ; then
      echo "ERROR: Unable to find region '$GIS_OPT_REGION'" 1>&2
      exit 1
   fi

   eval `grep '^north:\|^south:\|^east:\|^west:' "$file" | sed -e 's/: */=/'`
   
   n="$north"
   s="$south"
   e="$east"
   w="$west"
else
   eval `g.region -g`
fi

TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: unable to create temporary files" 1>&2
    exit 1
fi

# another method to try: "d.grid -ng 400"

# create d.graph command file

if [ "$GIS_OPT_WIDTH" -ne 0 ] ; then
   echo "width $GIS_OPT_WIDTH" > "$TMP"
fi

cat << EOF >> "$TMP"
color $GIS_OPT_COLOR
polyline 
  $e $s
  $e $n
  $w $n
  $w $s
  $e $s
EOF

if [ $GIS_FLAG_F -eq 1 ] ; then
    d.graph -m < "$TMP"
else
    d.graph -m input="$TMP"
fi

exit $?
