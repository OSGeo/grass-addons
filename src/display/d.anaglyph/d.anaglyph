#!/bin/sh
############################################################################
#
# MODULE:       d.anaglyph
# AUTHOR(S):    M. Hamish Bowman, Dunedin, New Zealand
#		Based on the method by Peter Loewe
# PURPOSE:      Creates a sterographic 3D image suitable for viewing with
#		red/cyan glasses or by crossing your eyes.
#
# COPYRIGHT:    (c) 2013 Hamish Bowman, and the GRASS Development Team
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
############################################################################

# FIXME: ~~NVIZ's "x" viewing position does not preserve the map rotation, but
#	 the "y" viewing position does. So currently we use the "y" to tilt,
#	 but that would require everyone to also tilt their heads 90 degrees
#	 to see the 3D effect, so we use some inefficient rotations to get
#	 around that.~~  --update-- That's wrong, it's the *minor axis* which
#	 does not preserve the map rotation.
#    If it still goes wrong use the -r flag to recover.

#%Module
#% description: Creates a sterographic 3D image suitable for viewing with red/cyan glasses or by simply crossing your eyes.
#% keywords: raster
#%End
#%Option
#% key: input
#% type: string
#% required: yes
#% key_desc: name
#% description: Name of input raster map
#% gisprompt: old,cell,raster
#%End
#%Option
#% key: output
#% type: string
#% required: no
#% label: Name for output PNG image
#% description: If not given will be input map + ".png"
#% gisprompt: new,file,file
#%End
#%Option
#% key: style
#% type: string
#% required: no
#% description: Type of stereo image to create
#% options: anaglyph,stereogram,freeview
#% descriptions: anaglyph;For viewing with red/cyan glasses;stereogram;For viewing with a stereograph mirror viewer;freeview;For viewing with the unaided eye
#% answer: anaglyph
#%End
#%Option
#% key: size
#% type: integer
#% required: no
#% multiple: no
#% key_desc: width,height
#% label: Width and height of output image
#% description: When creating bifurcated sterogram pairs this option sets the size of each pane.
#% answer: 640,480
#%End
#%Option
#% key: viewing_height
#% type: double
#% required: no
#% multiple: no
#% key_desc: value
#% label: Viewing height (map units)
#% description: default: automatic based on map extent
#%End
#%Option
#% key: z_exaggeration
#% type: double
#% required: no
#% multiple: no
#% key_desc: value
#% description: Vertical exaggeration
#% answer: 2.0
#%End
#%Option
#% key: color_overlay
#% type: string
#% required: no
#% key_desc: name
#% description: Name of raster map to drape across surface
#% gisprompt: old,cell,raster
#% guisection: Raster overlay
#%End
#%Option
#% key: vpoints
#% type: string
#% required: no
#% multiple: yes
#% key_desc: name
#% description: Name of points vector overlay map
#% gisprompt: old,vector,vector
#% guisection: Vector overlay
#%End
#%Option
#% key: vpoints_size
#% type: integer
#% required: no
#% multiple: yes
#% options: 1-10000
#% key_desc: value
#% description: Vector points icon size (map units)
#% answer: 100
#% guisection: Vector overlay
#%End
#%Option
#% key: vpoints_mode
#% type: string
#% required: no
#% multiple: yes
#% options: surface,3D
#% key_desc: string
#% description: Vector points display mode
#% descriptions: surface;drape on raster surface;3D;place at 3D point's z-elevation
#% answer: surface
#% guisection: Vector overlay
#%End
#%Option
#% key: vlines
#% type: string
#% required: no
#% multiple: no
#% key_desc: name
#% description: Name of line vector overlay map
#% gisprompt: old,vector,vector
#% guisection: Vector overlay
#%End
#%Flag
#% key: f
#% description: Flatten terrain (anaglyph mode only)
#%End
#%Flag
#% key: e
#% description: Equalize contrast (anaglyph mode only)
#%End
#%Flag
#% key: c
#% description: Cross-eyed mode for bifurcated sterogram pair
#%End
#%Flag
#% key: g
#% description: Create fiducial marks for regular stereograms or a viewing guide for free-view stereograms
#%End
#%Flag
#% key: r
#% description: In case of spontaneous NVIZ flipping, rotate one of the frames back into position (debug)
#%End


if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    g.message -e "awk is required, please install awk or gawk first"
    exit 1
fi

# set environment so that awk works properly in all locales
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

if [ ! -x "`which pnmtopng`" ]\
   || [ ! -x "`which ppmtorgb3`" ] \
   || [ ! -x "`which rgb3toppm`" ] ; then
    g.message -e "The NetPBM tools are required, please install them first"
    exit 1
fi

TEMP_IMG="tmp_anaglyph_$$"

cleanup()
{
   if [ "$TEMP_IMG" != "$GIS_OPT_INPUT" ] ; then
      g.findfile element=cell file="$TEMP_IMG" > /dev/null
      if [ $? -eq 0 ] ; then
         g.remove "$TEMP_IMG" --quiet
      fi
   fi
   rm -f "$TEMPFILE" "${TEMPFILE}."*
   if [ -n "$WIND_OVERRIDE" ] ; then
      unset WIND_OVERRIDE
      g.remove region="tmp_anaglyph.$$" --quiet
   fi
}

# what to do in case of user break:
exitprocedure()
{
   g.message -e 'User break!'
   cleanup
   exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15


check_ret()
{
   if [ $? -ne 0 ] ; then
      g.message "There was a problem. Aborting."
      cleanup
      exit 1
   fi
}


TEMPFILE="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TEMPFILE" ] ; then
    g.message -e "Unable to create temporary files"
    exit 1
fi


INMAP="$GIS_OPT_INPUT"
if [ -z "$GIS_OPT_OUTPUT" ] ; then
   OUTFILE1="$GIS_OPT_INPUT.png"
else
   OUTFILE1="$GIS_OPT_OUTPUT"
fi

#ensure the extension
OUTFILE=`basename "$OUTFILE1" .png`.png

#is there a simpler way of testing for --overwrite?
if [ -e "$OUTFILE" ] ; then
   if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -ne 1 ] ; then
      g.message -e "File <$OUTFILE> already exists"
      exit 1
   fi
fi


SIZE="$GIS_OPT_SIZE"

if [ "$GIS_FLAG_E" -eq 1 ] ; then
   EFLAG="-e"
else
   EFLAG=""
fi

ZEXAG="$GIS_OPT_Z_EXAGGERATION"

if [ -n "$GIS_OPT_VPOINTS" ] ; then
   VPOINTS="vpoint=$GIS_OPT_VPOINTS vpoint_color=yellow"
   if [ -n "$GIS_OPT_VPOINTS_SIZE" ] ; then
      VPOINTS="$VPOINTS vpoint_size=$GIS_OPT_VPOINTS_SIZE"
   fi
   if [ -n "$GIS_OPT_VPOINTS_MODE" ] ; then
      VPOINTS="$VPOINTS vpoint_mode=$GIS_OPT_VPOINTS_MODE"
   fi
else
   VPOINTS=""
fi

if [ -n "$GIS_OPT_VLINES" ] ; then
   eval `g.region -gu`
   VLINES="vline=$GIS_OPT_VLINES vline_color=black vline_height=$nsres"
else
   VLINES=""
fi

if [ -n "$GIS_OPT_COLOR_OVERLAY" ] ; then
   DRAPE="color_map=$GIS_OPT_COLOR_OVERLAY"
else
   DRAPE=""
fi


OLDDIR="`pwd`"
cd `dirname "$TEMPFILE"`


#### dynamic viewpoint height calculations
# FIXME: figure out if it is map unit extent or number of cells which controls the flipping
eval `g.region -geu`
# various scales of the average map extent to use for the viewing height
avg_extent=`echo "$ns_extent $ew_extent" | awk '{print ($1 + $2)/2.0}'`

# need to adjust viewing height and vertical exaggeration in tandem, at zex=2 it's about right.
avg_extentN=`echo "$avg_extent $ZEXAG" | awk '{print $1 * (2 / $2)}'`

# TODO: at higher z-exag the viewpoint separation should be increased
extent1_25=`echo "$avg_extentN" | awk '{print 1.25 * $1}'`
extent1_45=`echo "$avg_extentN" | awk '{print 1.45 * $1}'`
#extent2=`echo "$avg_extentN" | awk '{print 2 * $1}'`
#extent3=`echo "$avg_extentN" | awk '{print 3 * $1}'`
extent_frac=`echo "$avg_extentN" | awk '{print 0.005 * $1}'`


if [ "$GIS_OPT_STYLE" = "anaglyph" ] ; then
   g.message "Preparing map ..."
   r.mapcalc "$TEMP_IMG = $INMAP"
   r.colors $EFLAG "$TEMP_IMG" color=grey --quiet
else
   TEMP_IMG="$INMAP"
fi
## FIXME: always do it for cleaner region widening exercise
## spearfish example at z-ex=4 + "-s" flips?


if [ "$GIS_FLAG_F" -eq 1 ] ; then
   #### flat image ####
   if [ -n "$GIS_OPT_VIEWING_HEIGHT" ] ; then
      height="$GIS_OPT_VIEWING_HEIGHT"
   else
      height="$extent1_45"
   fi
   g.message "Viewing height: $height `g.proj -g | grep units | cut -f2- -d=`"

   # really annoying: Nviz rotates to "landscape" orientation, so we have
   #  to check the region dimensions and sometimes rotate it back.
   TWIST=180
   LARGER=`echo "$ew_extent $ns_extent" | awk '{if ($1 > $2) { print "ew" } else { print "ns" }}'`
   if [ "ns" = "$LARGER" ] ; then
      TWIST=90
   fi

   if [ "$GIS_FLAG_R" -eq 1 ] ; then
      if [ "$TWIST" -eq 90 ] ; then
         TWIST=180
      else
         TWIST=90
      fi
   fi

   RENDER_OPTS="resolution_fine=1 perspective=15 twist=$TWIST \
      position=0.5,0.5 bgcolor=black $VLINES $VPOINTS $DRAPE"

   g.message "Rendering 3D scenes ..."
   m.nviz.image elevation_map="$TEMP_IMG" output="$TEMPFILE.right" \
     $RENDER_OPTS size="$SIZE" height="$height" zexag="$ZEXAG" \
     surface_position="$extent_frac,0,0"  --quiet &

   m.nviz.image elevation_map="$TEMP_IMG" output="$TEMPFILE.left" \
     $RENDER_OPTS size="$SIZE" height="$height" zexag="$ZEXAG" \
     surface_position="-$extent_frac,0,0"  --quiet

   check_ret
   wait

else
   #### 3D relief ####
   if [ -n "$GIS_OPT_VIEWING_HEIGHT" ] ; then
      height="$GIS_OPT_VIEWING_HEIGHT"
   else
      height="$extent1_25"
   fi
   g.message "Viewing height: $height `g.proj -g | grep units | cut -f2- -d=`"

   # setup internal region
   g.region save="tmp_anaglyph.$$"
   WIND_OVERRIDE="tmp_anaglyph.$$"
   export WIND_OVERRIDE
   if [ "$GIS_OPT_STYLE" = "anaglyph" ] ; then
      g.region rast="$TEMP_IMG"
   fi

   # really annoying: Nviz rotates along the shorter of the two axes, so
   #  we have to grow so that the region is taller than it is wide, so that
   #  we don't have to turn our heads sideways to get the 3D effect, and that
   #  the viewpoint doesn't spin out of control at the inflection mid-point.
   # Expand into the ether N-S since all-empty rows are quickly skipped while
   #  all-empty columns are not.
   LARGER=`echo "$ew_extent $ns_extent" | awk '{if ($1 > $2) { print "ew" } else { print "ns" }}'`
   if [ "ew" = "$LARGER" ] ; then
      BUFDIST=`echo "$ew_extent $ns_extent" | awk '{print int(0.5 + ($1 - $2)/2.0)}'`
      eval `g.region -gu`
      BUFDIST_EVEN=`echo "$BUFDIST $nsres" | awk '{print $1 + (10 * $2) - ($1 % $2)}'`
      g.region n="n+$BUFDIST_EVEN" s="s-$BUFDIST_EVEN"
   fi


   SPREAD=0.02
   # if you get very close to the map the left and right views become too
   #  far away from each other at the edges. (about 1cm seems to be the max)
   # if we make it too small (0.15<s<0.0175) then nviz flips one of the scenes.
   TWIST_L=-90
   LARGER=`echo "$height $avg_extent" | awk '{if ($1 > $2) { print "height" } else { print "map" }}'`
   if [ "map" = "$LARGER" ] ; then
      SPREAD=0.005
      TWIST_L=90
   fi

   # if it fails let the user control the rotation
   if [ "$GIS_FLAG_R" -eq 1 ] ; then
      if [ "$TWIST_L" -eq 90 ] ; then
         TWIST_L=-90
      else
         TWIST_L=90
      fi
   fi

   SPREAD_L=`echo "$SPREAD" | awk '{print 0.5 - $1}'`
   SPREAD_R=`echo "$SPREAD" | awk '{print 0.5 + $1}'`

   RENDER_OPTS="resolution_fine=1 perspective=15 bgcolor=black \
      $VLINES $VPOINTS $DRAPE"

   g.message "Rendering 3D scenes ..."

   m.nviz.image elevation_map="$TEMP_IMG" output="$TEMPFILE.right" \
     $RENDER_OPTS size="$SIZE" height="$height" zexag="$ZEXAG" \
     position="$SPREAD_R",0.5 twist=90 --quiet &

   m.nviz.image elevation_map="$TEMP_IMG" output="$TEMPFILE.left" \
     $RENDER_OPTS size="$SIZE" height="$height" zexag="$ZEXAG" \
     position="$SPREAD_L",0.5 twist="$TWIST_L" --quiet

   check_ret
   wait
fi


BASENM=`basename "$TEMPFILE"`

# try to find a nice TTF font in the fontcap (d.font -l)
find_a_font()
{
   FONTS="FreeSans Vera DroidSans LiberationSans-Regular DejaVuSans \
      Arial Courier_New Trebuchet_MS"
   VALID_FONT=""
   for FONT in $FONTS ; do
      d.font "$FONT" 2> /dev/null
      if [ $? -eq 0 ] ; then
         VALID_FONT="$FONT"
         break
      fi
   done
}

# make a spacer image.
# usage:  create_pbm <Width> <Height> <Black|White> <filename.pbm>
create_pbm()
{

   if [ "$3" = "black" ] ; then
      COLOR=1
   else
      COLOR=0
   fi

   cat << EOF > "$4"
P1
# block of black
$1 $2
EOF

   i=0
   while [ $i -lt $2 ] ; do
     seq 1 "$1" | sed "s/.*/$COLOR /" | tr -d '\n' >> "$4"
     i=`expr "$i" + 1`
   done
}


if [ "$GIS_OPT_STYLE" = "anaglyph" ] ; then
   # split into R,G,B components
   g.message "Creating anaglyph ..."
   ppmtorgb3 "$BASENM.left.ppm" &
   ppmtorgb3 "$BASENM.right.ppm"
   check_ret
   wait

   rgb3toppm "$BASENM.left.red" "$BASENM.right.grn" "$BASENM.right.blu" \
       > "$BASENM.anaglyph.ppm"
   check_ret
else
   # stereogram
   HEIGHT=`echo "$SIZE" | cut -f2 -d,`
   create_pbm 5 "$HEIGHT" white "$TEMPFILE.gutter.pbm"

   if [ "$GIS_OPT_STYLE" = "stereogram" ] ; then

      if [ "$GIS_FLAG_G" -eq 1 ] ; then
	 # fiducial mark overlay
	 WIDTH=`echo "$SIZE" | cut -f1 -d,`
	 GRASS_CAIROFILE="$TEMPFILE.fiducial1.ppm"
	 # work around off-by-one bug (see trac #72 comment:22)
	 GRASS_WIDTH=`expr "$WIDTH" + 1`
	 GRASS_HEIGHT=`expr "$HEIGHT" + 1`
	 GRASS_TRANSPARENT=TRUE
	 export GRASS_CAIROFILE GRASS_WIDTH GRASS_HEIGHT GRASS_TRANSPARENT
	 d.mon start=cairo --quiet
	 cat << EOF | d.graph
width 1
#move 50 2
#draw 50 0
move 50 0
polygon
  48.5858 0
  50 2
  51.4142 0
  48.5858 0

#move 50 98
#draw 50 100
move 50 100
polygon
  48.5858 100
  50 98
  51.4142 100
  48.5858 100

#move 0 50
#draw 2 50
move 0 50
polygon
  0 48.5858
  2 50
  0 51.4142
  0 48.5858

#move 98 50
#draw 100 50
move 100 50
polygon
  100 48.5858
  98 50
  100 51.4142
  100 48.5858

rotation 45
symbol extra/fiducial 20 50 50 black
EOF
	 d.mon stop=cairo --quiet
	 check_ret

	 mv "$BASENM.left.ppm" "$BASENM.left_orig.ppm"
	 mv "$BASENM.right.ppm" "$BASENM.right_orig.ppm"

	 # work around off-by-one bug (see trac #72 comment:22)
	 pnmcut -width "$WIDTH" -height "$HEIGHT" "$TEMPFILE.fiducial1.pgm" \
	   > "$TEMPFILE.fiducial.pgm"
	 pnmcut -width "$WIDTH" -height "$HEIGHT" "$TEMPFILE.fiducial1.ppm" \
	   > "$TEMPFILE.fiducial.ppm"

	 pnmcomp -alpha="$TEMPFILE.fiducial.pgm" "$TEMPFILE.fiducial.ppm" \
	   "$BASENM.left_orig.ppm" "$BASENM.left.ppm" &
	 pnmcomp -alpha="$TEMPFILE.fiducial.pgm" "$TEMPFILE.fiducial.ppm" \
	   "$BASENM.right_orig.ppm" "$BASENM.right.ppm"
	 check_ret
	 wait
      fi

      if [ "$GIS_FLAG_C" -ne 1 ] ; then
         pnmcat -leftright "$BASENM.right.ppm" "$TEMPFILE.gutter.pbm" \
            "$BASENM.left.ppm" > "$BASENM.anaglyph.ppm"
      else
         pnmcat -leftright "$BASENM.left.ppm" "$TEMPFILE.gutter.pbm" \
            "$BASENM.right.ppm" > "$BASENM.anaglyph.ppm"
      fi
      check_ret

   else
      # create a freeview stereogram
      if [ "$GIS_FLAG_G" -ne 1 ] ; then
	 # no guide, just the two images
         if [ "$GIS_FLAG_C" -ne 1 ] ; then
	    pnmcat -leftright "$BASENM.left.ppm" "$TEMPFILE.gutter.pbm" \
	       "$BASENM.right.ppm" > "$BASENM.anaglyph.ppm"
	 else
	    pnmcat -leftright "$BASENM.right.ppm" "$TEMPFILE.gutter.pbm" \
	       "$BASENM.left.ppm" > "$BASENM.anaglyph.ppm"
	 fi
	 check_ret
      else
	 # nest in a viewing guide
	 # thanks to: (public domain)
	 #   http://upload.wikimedia.org/wikipedia/commons/1/10/Stereo_Pair%2C_Lake_Palanskoye_Landslide%2C_Kamchatka_Peninsula%2C_Russia.jpg
	 SIDE_WIDTH=60
	 GUTTER_WIDTH=5
	 WIDTH=`echo "$SIZE" | cut -f1 -d,`
	 WIDTH2=`expr "$WIDTH" "*" 2 + $SIDE_WIDTH + $SIDE_WIDTH + $GUTTER_WIDTH`
	 HEIGHT=`echo "$SIZE" | cut -f2 -d,`

	 # dot guide at the top
	 GRASS_CAIROFILE="$TEMPFILE.dot.ppm"
	 GRASS_WIDTH="$WIDTH"
	 GRASS_HEIGHT=75
	 export GRASS_CAIROFILE GRASS_WIDTH GRASS_HEIGHT
	 d.mon start=cairo --quiet
	 d.erase black
	 echo "symbol basic/circle 25 50 50 white white" | d.graph
	 d.mon stop=cairo --quiet

	 # instructions at the bottom (use ppmlabel?)
	 GRASS_CAIROFILE="$TEMPFILE.text.ppm"
	 GRASS_WIDTH="$WIDTH2"
	 GRASS_HEIGHT=100
	 export GRASS_CAIROFILE GRASS_WIDTH GRASS_HEIGHT
	 d.mon start=cairo --quiet
	 d.erase black

	 VALID_FONT=""
	 find_a_font
	 if [ -n "$VALID_FONT" ] ; then
	    d.font "$VALID_FONT"
	 fi
	 cat << EOF | d.text at=50,67 align=cc size=25 color=white linespacing=2
To view the stereo pair, cross your eyes slightly until a third
white dot appears between the two. New center image is 3D!
EOF
	 d.mon stop=cairo --quiet

	 # left,right side border and middle sep
	 TOPHEIGHT=`expr "$HEIGHT" + 75`
	 create_pbm "$SIDE_WIDTH" "$TOPHEIGHT" black "$TEMPFILE.side.pbm"
	 create_pbm "$GUTTER_WIDTH" "$TOPHEIGHT" black "$TEMPFILE.gutter.pbm"

	 # construct it
	 pnmcat -topbottom "$TEMPFILE.dot.ppm" "$BASENM.right.ppm" \
	    > "$BASENM.dotright.ppm"
	 check_ret

	 pnmcat -topbottom "$TEMPFILE.dot.ppm" "$BASENM.left.ppm" \
	    > "$BASENM.dotleft.ppm"
	 check_ret

	 if [ "$GIS_FLAG_C" -ne 1 ] ; then
	    pnmcat -leftright "$TEMPFILE.side.pbm" "$BASENM.dotleft.ppm" \
	       "$TEMPFILE.gutter.pbm" "$BASENM.dotright.ppm" "$TEMPFILE.side.pbm" \
	       > "$BASENM.upper.ppm"
	 else
	    pnmcat -leftright "$TEMPFILE.side.pbm" "$BASENM.dotright.ppm" \
	       "$TEMPFILE.gutter.pbm" "$BASENM.dotleft.ppm" "$TEMPFILE.side.pbm" \
	       > "$BASENM.upper.ppm"
	 fi
	 check_ret

	 pnmcat -topbottom "$BASENM.upper.ppm" "$TEMPFILE.text.ppm" \
	    > "$BASENM.anaglyph.ppm"
	 check_ret
      fi
   fi
fi

pnmtopng "$BASENM.anaglyph.ppm" > "$OLDDIR/$OUTFILE"
check_ret

g.message "<$OUTFILE> created."

cleanup
