#!/bin/sh
############################################################################
#
# MODULE:       v.swathwidth
# AUTHOR(S):	David Finlayson, 2006
#		Hamish Bowman, Dept Marine Science, Univ. of Otago, NZ
#
# PURPOSE:	Creates a vector map representing the sea bottom coverage of
#               a multibeam survey
#
# COPYRIGHT:	(C) 2006-2009 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################
# April 2006 - First version of the script posted to GRASS
# Feb 2009 - update for GRASS 6.4 and rectangular buffers instead of circular buffers
#
#  This script requires GRASS 6.4 or newer (for v.out.ascii columns= opt)
#
# TODO: more realistic beam pattern (begun)
# TODO: Use r.los to calculate coverage over varying terrain instead of
#   simply basing the extent estimate on the depth directly below the ship.
#

#%Module
#%  description: Estimate multibeam bottom coverage (swath width) along a survey track line
#%End
#%option
#% key: trackline
#% type: string
#% gisprompt: old,vector,vector
#% description: Vector line representing survey track
#% required : yes
#%end
#%option
#% key: elevation
#% type: string
#% gisprompt: old,cell,raster
#% description: Raster DEM of survey area (negative values = below sea level)
#% required : yes
#%end
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output vector for result
#% required : yes
#%end
#%option
#% key: beamwidth
#% type: double
#% description: Beam width as a multiple of water depth
#% required : no
#% answer: 3
#%end
#%option
#% key: distance
#% type: double
#% description: Along track distance between swath width estimates
#% required : no
#% answer: 100
#%end

if [ -z "$GISBASE" ] ; then
   echo "You must be in GRASS GIS to run this program." >&2
   exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

#stay quiet
if [ -z "$GRASS_VERBOSE" ] ; then
   export GRASS_VERBOSE=0
fi

# setup temporary region
g.region save="tmp_vswathwidth.$$"
WIND_OVERRIDE="tmp_vswathwidth.$$"
export WIND_OVERRIDE
# Save the region and then reduce the size of the region as much as
# possible to save raster processing time
g.region rast="$GIS_OPT_ELEVATION"  # to get the resolution
g.region vect="$GIS_OPT_TRACKLINE" -a  # -a to preserve the resolution


# Convert the raster elevation DEM into units of "swath widths"
r.mapcalc "tmp_swath.$$ = if($GIS_OPT_ELEVATION < 0, -1 * $GIS_OPT_ELEVATION * $GIS_OPT_BEAMWIDTH, null())"

# Split the track line into segments where swath width will be visualized
v.to.points input="$GIS_OPT_TRACKLINE" output="tmp_point_$$" dmax="$GIS_OPT_DISTANCE"


# Add a column to hold the swath width values
v.db.addcol map="tmp_point_$$" layer=2 columns="width DOUBLE PRECISION"

# Load the swath width values into the table
v.what.rast vect="tmp_point_$$" rast="tmp_swath.$$" layer=2 column="width"



#### TODO: use 'v.mkgrid coor=x,y angle=' in a v.patch loop instead of circles
if [ 0 -eq 1 ] ; then
# slow, but more realistic beam pattern than circular buffers
# todo: find angle of track line at pt.

#create empty map
v.in.ascii -e out="tmp_patch_$$"

# column="width,trk_angle"
v.out.ascii "tmp_point_$$" layer=2 column="width" 2> /dev/null | \
   ( while read LINE ; do
      COOR=`echo "$LINE" | cut -f1,2 -d'|' | tr '|' ','`
      SW_WIDTH=`echo "$LINE" | cut -f4 -d'|'`
      TRK_ANGLE=`echo "$LINE" | cut -f3 -d'|'`   # -> column 5 once we have that working

      # how to do this???
      ## swath rectangle aspect ratio is arbitralily set to 10:1  (use distance opt??)
      #SW_HEIGHT=`echo "$SW_WIDTH" | awk '{print $1 * 0.10}'`
      SW_HEIGHT=`echo "$GIS_OPT_DISTANCE $GIS_OPT_BEAMWIDTH" | awk '{print $1 * $2/2}'`

      #echo "coor=[$COOR] | w,h=[$SW_WIDTH],[$SW_HEIGHT] | angle=[$TRK_ANGLE]"
      v.mkgrid map="tmp_swathbox_$$" coor="$COOR" position=coor grid=1,1 \
         box=$SW_WIDTH,$SW_HEIGHT angle="$TRK_ANGLE"

      g.rename vect="tmp_patch_$$,tmp_patch_$$a"
      v.patch in="tmp_patch_$$a,tmp_swathbox_$$" out="tmp_patch_$$"
      g.remove vect="tmp_patch_$$a,tmp_swathbox_$$"
    done )

#merge into a single area
v.clean input="tmp_patch_$$" out="tmp_patch_brk_$$" tool=break
v.centroids in="tmp_patch_brk_$$" out="tmp_patch_cn_$$" cat=1 step=0
v.dissolve in="tmp_patch_cn_$$" out="tmp_patch_solid_$$"
v.build.polylines in="tmp_patch_solid_$$" out="tmp_patch_solid2_$$"
v.generalize in="tmp_patch_solid2_$$" out="tmp_patch_smooth_$$" method=snakes
#g.rename vect="tmp_patch_smooth_$$,${GIS_OPT_OUTPUT}_rect"
fi
###################################



# To visualize the swath width, buffer the nodes of the trackline by swath width
v.buffer input="tmp_point_$$" output="tmp_circles_$$" type=point layer=2 bufcol="width"

# The output of v.buffer currently does not join together the areas of all of the buffer circles
# with a union command (I'm not sure what it is doing actually). The following code dissolves
# all of the little polygons created by v.buffer into as few shapes as possible (union of all 
# shapes). This section is basically written by Hamish via the mailing list. Thanks!

# Break polygons at intersections (flatten circles)
v.clean input="tmp_circles_$$" out="tmp_circles2_$$" tool=break

# Add centroids to each polygon to make areas
v.category input="tmp_circles2_$$" output="tmp_circles3_$$" step=0

# Disolve common boundaries (union of areas)
v.extract -d type=area in="tmp_circles3_$$" out="tmp_circles4_$$"

# Clean up
g.rename vect="tmp_circles4_$$,$GIS_OPT_OUTPUT"
g.mremove vect=tmp_*_$$ -f
g.remove rast="tmp_swath.$$"
unset WIND_OVERRIDE
g.remove region="tmp_vswathwidth.$$"

unset GRASS_VERBOSE
g.message message="Swath width map written to: <$GIS_OPT_OUTPUT>"

exit 0
