#!/bin/sh
############################################################################
#
# MODULE:       v.in.geodesic
# AUTHOR(S):    M. Hamish Bowman, Dunedin, New Zealand
# PURPOSE:      Creates a vector map containing a great circle line.
# COPYRIGHT:    (C) 2011 Hamish Bowman, and the GRASS Development Team
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
############################################################################
#%Module
#% description: Creates a vector map containing a great circle line.
#% keywords: vector, geodesic, great circle, transect
#%End
#%Option
#% key: map
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Name for output vector map
#% gisprompt: new,vector,vector
#%End
#%Option
#% key: coor
#% type: string
#% required: no
#% multiple: no
#% key_desc: east1,north1,east2,north2
#% description: Starting and ending coordinates
#%End
#%Option
#% key: line
#% type: string
#% required: no
#% multiple: no
#% key_desc: east,north,azimuth,distance
#% description: Transect definition
#%End

# fixme: geod uses as radius for +a distance etc. as well as output. (??)
##%Option
##% key: units
##% type: string
##% required: no
##% multiple: no
##% options: meters,kilometers,feet,miles,nautmiles
##% description: Units of distance used in transect
##% answer: meters
##%End

#%Option
#% key: nsteps
#% type: integer
#% required: no
#% multiple: no
#% description: Number of vertices to place along the line
#% answer: 100
#% options: 1-10000
#%End
#%Option
#% key: distance
#% type: double
#% required: no
#% multiple: no
#% description: Distance between vertices in meters
#%End



if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

# save command line
if [ "$1" != "@ARGS_PARSED@" ] ; then
    CMDLINE="`basename $0`"
    for arg in "$@" ; do
        CMDLINE="$CMDLINE \"$arg\""
    done
    export CMDLINE
    exec g.parser "$0" "$@"
fi

#### check if we have geod
if [ ! -x "`which geod`" ] ; then
    g.message -e "\"geod\" from PROJ.4 is required, please install it first"
    exit 1
fi

#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    g.message -e "\"awk\" is required, please install it first"
    exit 1
fi

#### set environment so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC


if [ -z "$GIS_OPT_COOR" ] && [ -z "$GIS_OPT_LINE" ] ; then
    g.message -e "Either \"coor\" or \"line\" option must be given"
    exit 1
fi

if [ -n "$GIS_OPT_COOR" ] && [ -n "$GIS_OPT_LINE" ] ; then
    g.message -e "Only one of \"coor\" or \"line\" must be given"
    exit 1
fi

#nsteps always present currently
#if [ -n "$GIS_OPT_NSTEPS" ] && [ -n "$GIS_OPT_DISTANCE" ] ; then
#    g.message -e "Only one of \"nsteps\" or \"distance\" must be given"
#    exit 1
#fi

#are we in LatLong location?
g.proj -p | grep -i name | grep -i Lon  > /dev/null
if [ $? -eq 1 ] ; then
   g.message -e "This module only operates in Lat-Long locations"
   exit 1
fi


#### setup temporary file
# (if needed)
#TEMPFILE="`g.tempfile pid=$$`"
#if [ $? -ne 0 ] || [ -z "$TEMPFILE" ] ; then
#   g.message -e "Unable to create temporary file" 
#   exit 1
#fi


# fixme: geod uses as radius for +a distance etc. as well as output. (??)
#case "$GIS_OPT_UNITS" in
#   meters)
#      UNITS=m
#      ;;
#   kilometers)
#      UNITS=km
#      ;;
#   feet)
#      UNITS=ft
#      ;;
#   miles)
#      UNITS=mi
#      ;;
#   nautmiles)
#      UNITS=kmi
#      ;;
#   *)
#      g.message -e "A programming error occurred."
#      exit 1
#      ;;
#esac

# get ellipsoid parameters in +proj4 terms
PROJ4_ELLPS=`g.proj -j | grep '^+ellps=\|^+a=\|^+b=\|^+rf=\|^+es=' | tr '\n' ' '`

if [ -n "$GIS_OPT_COOR" ] ; then
   LON1=`echo "$GIS_OPT_COOR" | cut -f1 -d','`
   LAT1=`echo "$GIS_OPT_COOR" | cut -f2 -d','`
   LON2=`echo "$GIS_OPT_COOR" | cut -f3 -d','`
   LAT2=`echo "$GIS_OPT_COOR" | cut -f4 -d','`
elif [ -n "$GIS_OPT_LINE" ] ; then
   LON1=`echo "$GIS_OPT_LINE" | cut -f1 -d','`
   LAT1=`echo "$GIS_OPT_LINE" | cut -f2 -d','`
   AZIM=`echo "$GIS_OPT_LINE" | cut -f3 -d','`
   DIST=`echo "$GIS_OPT_LINE" | cut -f4 -d','`
fi


#### TODO:
# convert D:M:S to Dm's" with sed  (azimuth too) (see m.proj code)
# convert non-lat/lon to lat/lon with m.proj


if [ -n "$GIS_OPT_DISTANCE" ] ; then
   # default to region resolution? (avg nsres,ewres)
   STEP="+del_S=$GIS_OPT_DISTANCE"
else
   STEP="+n_S=$GIS_OPT_NSTEPS"
fi


if [ -n "$GIS_OPT_COOR" ] ; then

   geod $PROJ4_ELLPS +lon_1="$LON1" +lat_1="$LAT1" \
       +lon_2="$LON2" +lat_2="$LAT2" "$STEP" -f "%.9f" | \
     awk '{print $2,$1}' | \
     v.in.lines input=- output="$GIS_OPT_MAP" --quiet

elif [ -n "$GIS_OPT_LINE" ] ; then

   geod $PROJ4_ELLPS +lon_1="$LON1" +lat_1="$LAT1" \
       +S="$DIST" +A="$AZIM" "$STEP" -f "%.9f" | \
     awk '{print $2,$1}' | \
     v.in.lines input=- output="$GIS_OPT_MAP" --quiet
   #  +units="$UNITS"
fi

# convert output back to local projection with m.proj if needed.


# assign our new line a cat number
v.edit -1 map="$GIS_OPT_MAP" type=line tool=catadd id=1 cat=1 --quiet

# save command line history
v.support map="$GIS_OPT_MAP" cmdhist="$CMDLINE"

LINE_LEN=`v.to.db -p "$GIS_OPT_MAP" option=length \
   units=meters --quiet | cut -f2 -d'|' `
#   units="$GIS_OPT_UNITS" --quiet | cut -f2 -d'|' `

g.message message="Line length:  $LINE_LEN m"  # $GIS_OPT_UNITS
g.message message="`basename $0` complete."

