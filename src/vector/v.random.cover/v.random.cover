#!/bin/sh
############################################################################
#
# MODULE:       v.random.cover
# AUTHOR:       M. Hamish Bowman, Dept. Marine Science, Otago Univeristy,
#                 New Zealand
# PURPOSE:      Randomly generate a 2D points map constrained to an area
#		See also 'r.random cover= vector_output='
#
# COPYRIGHT:    (c) 2008 Hamish Bowman, and the GRASS Development Team
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#% description: Randomly generate a 2D points map constrained to a specified area.
#% keywords: vector, statistics
#%End
#%option
#% key: cover
#% type: string
#% gisprompt: old,vector,vector
#% key_desc: name
#% description: Name of vector map containing cover area
##   "containment area"? "specified area"?
#%required: yes
#%end
#%option
#% key: cat
#% type: integer
#% label: Category number(s) of cover area
#% description: Example: 1,3,7-9,13
#% required: yes
#%end 
#%option
#% key: layer
#% type: integer
#% description: Layer number of cover area
#% answer: 1
#% required: no
#%end
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% key_desc: name
#% description: Name for output vector map
#% required: yes
#%end
#%option
#% key: n
#% type: integer
#% description: Number of points to be created
#% required: yes
#%end
#%Option
#% key: raster
#% type: string
#% required: no
#% key_desc: name
#% description: Name of raster map to be sampled
#% gisprompt: old,cell,raster
#%End
#%Option
#% key: column
#% type: string
#% required: no
#% description: Column name to contain raster samples
#% answer: sampled
#%End


if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

# --quiet causes an error with GRASS <= 6.2.2  (6.2.3 is ok)
GRASS_VERBOSE=0
export GRASS_VERBOSE


#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    echo "ERROR: awk required, please install awk or gawk first" 1>&2
    exit 1
fi

# set environment so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

#### setup temporary file
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    g.message -e "Unable to create temporary files"
    exit 1
fi

cleanup()
{
   g.mremove -f vect="vranda_*_$$"
   g.remove region="vrandarea.$$"
   \rm "$TMP"
}

# what to do in case of user break:
exitprocedure()
{
   echo 'User break!' 1>&2
   cleanup
   exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15


if [ "$GIS_OPT_N" -lt 1 ] ; then
    echo "ERROR: Need at least one point" 1>&2
    exit 1
fi

# extract the area of interest
v.extract in="$GIS_OPT_COVER" out="vranda_cover_$$" \
   layer="$GIS_OPT_LAYER" list="$GIS_OPT_CAT"

#preset to 0 as a failsafe
areas=0
eval `v.info -t map="vranda_cover_$$" | grep areas`

if [ "$areas" -lt 1 ] ; then
    echo "ERROR: No bounding area" 1>&2
    cleanup
    exit 1
fi

# clone current region
g.region save="vrandarea.$$"
WIND_OVERRIDE="vrandarea.$$"
export WIND_OVERRIDE

# set the resolution
g.region vect="vranda_cover_$$"


# proportion of in-area to region area
NS_EXT=`g.region -emu | grep north | cut -f2 -d':' | awk '{print $1}'`
EW_EXT=`g.region -emu | grep east | cut -f2 -d':' | awk '{print $1}'`
REGION_AREA=`echo "$NS_EXT" "$EW_EXT" | awk '{print $1 * $2}'`

v.report map="vranda_cover_$$" option=area units=meters > "$TMP"
if [ $? -ne 0 ] ; then
    g.message -e "v.report failed"
    cleanup
    exit 1
fi

AREA_COLUMN=`head -n 1 "$TMP" | tr '|' '\n' | grep -wn area | cut -f1 -d':'`
BOUND_AREA=`cut -f${AREA_COLUMN} -d'|' "$TMP" | grep -v '^area$' | tr '\n' ' '`

# for use with multiple cats
BOUND_AREA_TOT=0
for i in $BOUND_AREA ; do
   BOUND_AREA_TOT=`echo "$BOUND_AREA_TOT" "$i" | awk '{print $1 + $2}'`
done
#debug: echo "[$BOUND_AREA] -> {$BOUND_AREA_TOT}"


# plus 20%
N_MULT=`echo "$REGION_AREA" "$BOUND_AREA_TOT" | awk '{print 1.2 * ($1 / $2)}'`
N_ESTIMATE=`echo "$GIS_OPT_N" "$N_MULT" | awk '{printf("%.0f", $1 * $2)}'`

# calc what 20% of n is in case we need more
N_20=`echo "$GIS_OPT_N" | awk '{printf("%.0f", $1 * 0.2)}'`
if [ "$N_20" -lt 1 ] ; then
   N_20="1"
fi

#debug: echo "N_ESTIMATE = [$N_ESTIMATE]"
v.random out="vranda_pass1_$$" n="$N_ESTIMATE"

# select just points in area
v.select ainput="vranda_pass1_$$" atype=point binput="vranda_cover_$$" \
   btype=area operator=overlap output="vranda_pts1_$$"

# do we have enough?
eval `v.info -t "vranda_pts1_$$" | grep points`

while [ "$points" -lt "$GIS_OPT_N" ] ; do
  echo "Not enough points, additional pass required ..." 1>&2
   # too few: add 20% more
   v.random out="vranda_pass2_$$" n="$N_20" --overwrite
   v.select ainput="vranda_pass2_$$" atype=point binput="vranda_cover_$$" \
      btype=area operator=overlap output="vranda_pts2_$$" --overwrite

   # if no new points to add, skip patching to save a little wear&tear
   eval `v.info -t "vranda_pts2_$$" | grep points`
   if [ "$points" -eq 0 ] ; then
      continue
   fi

   v.patch -a in="vranda_pts2_$$" out="vranda_pts1_$$" --o
   eval `v.info -t "vranda_pts1_$$" | grep points`
done

v.category option=del in="vranda_pts1_$$" out="vranda_nocat_$$"
v.category option=add in="vranda_nocat_$$"  out="vranda_cat_$$" cat=1 step=1

# too many: extract only what we need
if [ "$points" -gt "$GIS_OPT_N" ] ; then
   v.extract in="vranda_cat_$$" out="$GIS_OPT_OUTPUT" list="1-${GIS_OPT_N}"
else
   g.rename vect="vranda_cat_$$,$GIS_OPT_OUTPUT"
fi

cleanup
eval `v.info -t "$GIS_OPT_OUTPUT" | grep points`
echo "Created <$GIS_OPT_OUTPUT> with $points random points" 1>&2


# optionally upload values at those sites sampled from a raster map
if [ -n "$GIS_OPT_RASTER" ] ; then
   # restore starting region
   unset WIND_OVERRIDE

   RAST_TYPE=`r.info -t "$GIS_OPT_RASTER"`
   if [ $? -ne 0 ] ; then
      # map not found
      exit
   fi

   eval `echo $RAST_TYPE`
   case "$datatype" in
      CELL)
        COL_TYPE="integer"
	;;
      FCELL | DCELL)
        COL_TYPE="double precision"
	;;
   esac

   v.db.addtable map="$GIS_OPT_OUTPUT" \
      columns="cat integer, $GIS_OPT_COLUMN $COL_TYPE"
   if [ $? -ne 0 ] ; then
      # problem creating table
      exit
   fi

   v.what.rast vector="$GIS_OPT_OUTPUT" \
      raster="$GIS_OPT_RASTER" column="$GIS_OPT_COLUMN"
   if [ $? -ne 0 ] ; then
      # problem populating table
      exit
   fi

   echo "Raster values from <$GIS_OPT_RASTER> uploaded to column <$GIS_OPT_COLUMN>" 1>&2
fi

