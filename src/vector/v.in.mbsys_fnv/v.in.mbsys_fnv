#!/bin/sh
#
############################################################################
#
# MODULE:       v.in.mbsys_fnv
#
# AUTHOR(S):    Hamish Bowman
#
# PURPOSE:      Import MB-System .fnv nav data into GRASS vector points/lines/areas
#
# COPYRIGHT:    (c) 2009 Hamish Bowman, and the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#% description: Imports MB-System navigation data from a .fnv file.
#% keywords: vector, import
#%End
#%option
#% key: input
#% type: string
#% gisprompt: old_file,file,input
#% description: Name of input file
#% required : yes
#%end
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Name for output vector map
#% required : yes
#%end
#%option
#% key: type
#% type: string
#% options: track,port_trk,stbd_trk,scanlines,swath,track_pts,all_pts
#% descriptions: track;ship's track;port_trk;port-side outward track;stbd_trk;starboard-side outward track;scanlines;lines perpendicular to direction of travel;swath;coverage area;track_pts;ship's track as points;all_pts;ship's track, port, and stbd track points
#% answer: track
#% description: Type of feature to import as
#% required : yes
#%end
#%option
#% key: cat
#% type: integer
#% options: 1-999999999
#% answer: 1
#% description: Category value to use for track lines and swath area
#% required : no
#%end


if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

#
#### import .fnv nav data
#
# they are created with:
#    mblist -F %d -I %s  -O tMXYHScRPr=X=Y+X+Y
# 
# t  for a time string (yyyy mm dd hh mm ss)
# M for unix (epoch) time in decimal seconds since 1/1/70 00:00:00
# X  for longitude (decimal degrees)
# Y  for latitude (decimal degrees)
# H for heading (degrees)
# S  for speed (km/hr)
# c for sonar tranducer depth (m)
# R  for roll in degrees
# P  for pitch in degrees
# r  for heave in meters
# = special character: this causes the value indicated by the next
#    character to derive from the  port-most non-null beam or pixel.
#    This applies only to numeric values associated with beams or
#    pixels such as depth, longitude, or latitude.
# X  for longitude (decimal degrees)
# = special character
# Y  for latitude (decimal degrees)
# + special character: this causes the value indicated by the next
#    character to derive from the starboard-most non-null beam or pixel.
#    This applies only to numeric values associated with beams or pixels
#    such as depth, longitude, or latitude.
# X  for longitude (decimal degrees)
# + special character
# Y  for latitude (decimal degrees)
#
# for example:
#  2003 01 17 00 57 25.466000      1042765045.466000        169.094199      -46.740662     260.10  10.94   0.078    2.834  -0.75    0.08            169.094547              -46.741980
#
####
#

if [ ! -e "$GIS_OPT_INPUT" ] ; then
    g.message -e "File <$GIS_OPT_INPUT> does not exist."
    exit 1
fi


#### check if in lat/long location
#are we in LatLong location?
g.proj -p | grep -i name | grep -i Lon  > /dev/null
if [ $? -eq 1 ] ; then
    g.message -e "This module only operates in LatLong/WGS84 locations"
    exit 1
fi

#### set temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    g.message -e "Unable to create temporary files"
    exit 1
fi
cleanup()
{
   g.message -v "Cleaning up temporary files ..."
   \rm -f "$TMP" "$TMP"*.trk "${TMP}"_*

   g.mremove -f vect="tmp_v_in_fnv_$$_[1-2]"
}

#### trap ctrl-c so that we can clean up tmp
trap 'cleanup' 2 3 15


SCAN_COLUMN_DEF="timestamp VARCHAR(30), unix_time DOUBLE PRECISION, \
    center_lon DOUBLE PRECISION, center_lat DOUBLE PRECISION, \
    headng_deg DOUBLE PRECISION, velo_km_hr DOUBLE PRECISION, \
    tdrdepth_m DOUBLE PRECISION, roll_degr DOUBLE PRECISION, \
    pitch_degr DOUBLE PRECISION, heave_m DOUBLE PRECISION"

PT_COLUMN_DEF="port_lon DOUBLE PRECISION, port_lat DOUBLE PRECISION, \
    stbd_lon DOUBLE PRECISION, stbd_lat DOUBLE PRECISION"

LINE_COLUMN_DEF="cat INTEGER, filename VARCHAR(255), start_time VARCHAR(30), \
    end_time VARCHAR(30), start_lat DOUBLE PRECISION, \
    start_lon DOUBLE PRECISION, end_lat DOUBLE PRECISION, \
    end_lon DOUBLE PRECISION"



cat "$GIS_OPT_INPUT" | cut -f3-4 > "$TMP.trk"
cat "$GIS_OPT_INPUT" | cut -f12,14 > "$TMP.port.trk"
cat "$GIS_OPT_INPUT" | cut -f16,18 > "$TMP.stbd.trk"

if [ -z "$GRASS_VERBOSE" ] ; then
    GRASS_VERBOSE=0
    export GRASS_VERBOSE
    VERBOSE_PRESET=false
else
    VERBOSE_PRESET=true
fi


#### import vector coordinates ####

case "$GIS_OPT_TYPE" in
    track)
	v.in.mapgen -f in="$TMP.trk" out="tmp_v_in_fnv_$$_1"
	v.category in="tmp_v_in_fnv_$$_1" out="$GIS_OPT_OUTPUT" \
	    option=add cat="$GIS_OPT_CAT" step=0
	;;
    port_trk)
	v.in.mapgen -f in="$TMP.port.trk" out="tmp_v_in_fnv_$$_1"
	v.category in="tmp_v_in_fnv_$$_1" out="$GIS_OPT_OUTPUT" \
	    option=add cat="$GIS_OPT_CAT" step=0
	;;
    stbd_trk)
	v.in.mapgen -f in="$TMP.stbd.trk" out="tmp_v_in_fnv_$$_1"
	v.category in="tmp_v_in_fnv_$$_1" out="$GIS_OPT_OUTPUT" \
	    option=add cat="$GIS_OPT_CAT" step=0
	;;
    scanlines)
	awk 'BEGIN { R=0 } 
	   { R++; 
	   print "L 3 1\n " $16 " " $17 "\n " $8 " " $9 "\n " $18 " " $19 "\n 1 " R}' \
	   "$GIS_OPT_INPUT" > "${TMP}_scanlines.vasc"
	v.in.ascii -n in="${TMP}_scanlines.vasc" out="$GIS_OPT_OUTPUT" \
	    format=standard
	;;
    swath)
	#swath area
	NPTS=`cat "$TMP.trk" | wc -l`
	NPTS_DOUBLED=`expr $NPTS \* 2 + 1`
	NTPS_MIDDLE=`expr $NPTS / 2`

	echo "B $NPTS_DOUBLED" > "${TMP}_swath.vasc"
	cat "$TMP.port.trk" >> "${TMP}_swath.vasc"
	tac "$TMP.stbd.trk" >> "${TMP}_swath.vasc"
	head -n 1 "$TMP.port.trk" >> "${TMP}_swath.vasc"
	echo "C 1 1" >> "${TMP}_swath.vasc"
	head -n $NTPS_MIDDLE  "$TMP.trk" | tail -n 1 >> "${TMP}_swath.vasc"
	echo " 1 $GIS_OPT_CAT" >> "${TMP}_swath.vasc"

	v.in.ascii -n format=standard in="${TMP}_swath.vasc" out="$GIS_OPT_OUTPUT"  #out="tmp_v_in_fnv_$$_1"

	# TODO: cleanup spaghetti
	#v.clean in="tmp_v_in_fnv_$$_1" out="tmp_v_in_fnv_$$_2" tool=break
	#v.centroids in="tmp_v_in_fnv_$$_2" out="tmp_v_in_fnv_$$_3" cat="$GIS_OPT_CAT" step=0
	#v.dissolve in="tmp_v_in_fnv_$$_3" out="tmp_v_in_fnv_$$_4"
	# and yet... something's wrong.
	;;
    track_pts)
	tr -s '\t' '|' < "$GIS_OPT_INPUT" | v.in.ascii \
	    out="$GIS_OPT_OUTPUT" x=3 y=4 fs='|' \
	    columns="$SCAN_COLUMN_DEF, $PT_COLUMN_DEF"
	;;
    all_pts)
	 awk 'BEGIN { R=0 } 
           {R++; print R "\tcenter\t" $8 "\t" $9 "\n" R "\tport\t" $16 "\t" $17 "\n" R "\tstbd\t" $18 "\t" $19 }' \
           "$GIS_OPT_INPUT" > "${TMP}_all.pts"

	v.in.ascii in="${TMP}_all.pts" out="$GIS_OPT_OUTPUT" x=3 y=4 fs=tab \
	    columns='scanline INTEGER, side VARCHAR(6), lon DOUBLE PRECISION, lat DOUBLE PRECISION'
	;;
esac

if [ $? -ne 0 ] ; then
    g.message -e "Import failed."
    cleanup
    exit 1
fi



#### attach attributes ####

START_TIME=`head -n 1 "$GIS_OPT_INPUT" | cut -f1`
END_TIME=`tail -n 1 "$GIS_OPT_INPUT" | cut -f1`
START_LAT=`head -n 1 "$TMP.trk" | cut -f2`
END_LAT=`tail -n 1 "$TMP.trk" | cut -f2`
START_LON=`head -n 1 "$TMP.trk" | cut -f1`
END_LON=`tail -n 1 "$TMP.trk" | cut -f1`

# Start/end points for port & stbd tracks refer to the ship's start/end points,
#  not the outward beam's (that data is stored in the coords if you really
#  want at it).
# Line length is only given for the ship's track as the outward beams can
#   bounce all around the place.

case "$GIS_OPT_TYPE" in
    track | port_trk | stbd_trk | swath)
	v.db.addtable map="$GIS_OPT_OUTPUT" columns="$LINE_COLUMN_DEF"
	echo "DELETE FROM $GIS_OPT_OUTPUT" | db.execute

	echo "INSERT INTO  $GIS_OPT_OUTPUT  VALUES \
	  ($GIS_OPT_CAT, '`basename $GIS_OPT_INPUT`', '$START_TIME', \
	   '$END_TIME', $START_LAT, $START_LON, $END_LAT, $END_LON)" \
	   | db.execute

	# add bounding box
	v.db.addcol map="$GIS_OPT_OUTPUT" columns="\
	   bbox_north DOUBLE PRECISION, bbox_south DOUBLE PRECISION, \
	   bbox_east DOUBLE PRECISION, bbox_west DOUBLE PRECISION"
	eval `v.info -g "$GIS_OPT_OUTPUT"`
	echo "UPDATE $GIS_OPT_OUTPUT SET \
	   bbox_north = $north, bbox_south = $south, \
	   bbox_east = $east, bbox_west = $west" | db.execute
	;;
esac
case "$GIS_OPT_TYPE" in
    track | port_trk | stbd_trk)
    	v.db.addcol map="$GIS_OPT_OUTPUT" columns="side varchar(6)"
	;;
esac


if [ $? -ne 0 ] ; then
    g.message -e "Import failed."
    cleanup
    exit 1
fi


case "$GIS_OPT_TYPE" in
    track)
	v.db.update map="$GIS_OPT_OUTPUT" column="side" value='center'
    	v.db.addcol map="$GIS_OPT_OUTPUT" columns="length_m DOUBLE PRECISION"
	v.to.db map="$GIS_OPT_OUTPUT" type=line option=length \
	    units=meters column=length_m
	TRK_LENGTH=`v.db.select -c map="$GIS_OPT_OUTPUT" col=length_m`
	v.support -r map="$GIS_OPT_OUTPUT" \
	    map_name="Ship's track for `basename $GIS_OPT_INPUT`" \
	    comment="Track began $START_TIME and travelled $TRK_LENGTH meters"
	;;
    port_trk)
	v.db.update map="$GIS_OPT_OUTPUT" column="side" value='port'
	v.support -r map="$GIS_OPT_OUTPUT" \
	    map_name="Port beam extent of `basename $GIS_OPT_INPUT`" \
	    comment="Outward end of port beam beginning $START_TIME"
	;;
    stbd_trk)
	v.db.update map="$GIS_OPT_OUTPUT" column="side" value='stbd'
	v.support -r map="$GIS_OPT_OUTPUT" \
	    map_name="Starboard beam extent of `basename $GIS_OPT_INPUT`" \
	    comment="Outward end of stbd beam beginning $START_TIME"
	;;
    scanlines)
	# 1 entry per line of .fnv. No need for endpoints, already encoded.
	# includes time, roll, pitch, etc, and we add line width with v.to.db.
	v.db.addtable map="$GIS_OPT_OUTPUT" \
	   columns="cat INTEGER, $SCAN_COLUMN_DEF"
	echo "DELETE FROM $GIS_OPT_OUTPUT" | db.execute

	awk -F'\t' -v NAME="$GIS_OPT_OUTPUT" 'BEGIN{ R = 0 }
	   { R++;
	     printf("INSERT INTO %s VALUES (%d, ^%s^, %.3f, %s, %s, %s, %s, %s, %s, %s, %s);\n",
		    NAME, R, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) }' \
	     "$GIS_OPT_INPUT" | tr '^' \' | db.execute

	v.db.addcol map="$GIS_OPT_OUTPUT" columns="width_m DOUBLE PRECISION"

	if [ "$VERBOSE_PRESET" = "true" ] ; then
	    v.to.db map="$GIS_OPT_OUTPUT" type=line option=length \
		units=meters column=width_m
	else
	    GRASS_VERBOSE=2 \
	      v.to.db map="$GIS_OPT_OUTPUT" type=line option=length \
		units=meters column=width_m
	fi

	v.support -r map="$GIS_OPT_OUTPUT" \
	    map_name="Scanlines for `basename $GIS_OPT_INPUT`" \
	    comment="Track began at $START_TIME"
	;;
    swath)
	v.db.addcol map="$GIS_OPT_OUTPUT" columns="area_sq_m DOUBLE PRECISION"
	v.to.db map="$GIS_OPT_OUTPUT" type=centroid option=area \
	    units=meters column=area_sq_m
	v.support -r map="$GIS_OPT_OUTPUT" \
	    map_name="Swath coverage for `basename $GIS_OPT_INPUT`" \
	    comment="Track began at $START_TIME"
	;;
    track_pts)
	v.support -r map="$GIS_OPT_OUTPUT" \
	    map_name="Ship's track for `basename $GIS_OPT_INPUT`" \
	    comment="Track began at $START_TIME"
	;;
    all_pts)
	v.db.dropcol map="$GIS_OPT_OUTPUT" column="lat"
	v.db.dropcol map="$GIS_OPT_OUTPUT" column="lon"
	v.support -r map="$GIS_OPT_OUTPUT" \
	    map_name="Ship's track & beam ends for `basename $GIS_OPT_INPUT`" \
	    comment="Track began at $START_TIME"
	;;
esac

EXITCODE=$?

cleanup
exit $EXITCODE



#d.varea Coastline

#d.vect fnv_track_port_test col=red
#d.vect fnv_track_stbd_test col=green
#d.vect fnv_track_test col=grey

#d.vect fnv_swath fcol=200:220:250 color=none type=area

#d.vect all_pts col=grey  where="side = 'center'"
#d.vect all_pts col=green where="side = 'stbd'"
#d.vect all_pts col=red   where="side = 'port'"

