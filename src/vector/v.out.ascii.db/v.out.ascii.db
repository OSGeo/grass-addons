#!/bin/sh
#
############################################################################
#
# MODULE:       v.out.ascii.db
#
# AUTHOR(S):    Hamish Bowman, University of Otago, New Zealand
#
# PURPOSE:      output point coordinates with optional columns from database
#
# COPYRIGHT:    (c) 2005-2006 Hamish Bowman and the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
# updates:
#   30 March 2006 (HB): Added support for 'where='
#
#############################################################################

#%Module
#% description: Export vector point data with selected attributes
#%End
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: name of existing vector file
#% required : yes
#%end
#%option
#% key: output
#% type: string
#% gisprompt: new_file,file,file
#% description: name for output ASCII file (omit for display to stdout)
#% required : no
#%end
#%option
#% key: columns
#% type: string
#% description: attribute columns to export ("cat" is always included)
#% required : yes
#% multiple: yes
#%end
#%option
#% key: where
#% type: string
#% description: WHERE conditions of SQL statement without 'where' keyword
#% required : no
#% multiple: yes
#%end

## temp disabled:
##%option
##% key: fs
##% type: string
##% description: output field separator
##% required : no
##% answer: |
##%end

if [ -z "$GISBASE" ] ; then
   echo "You must be in GRASS GIS to run this program." 1>&2
   exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  # echo "g.parser \"$0\" \"$@\""
   exec g.parser "$0" "$@"
fi

# set up tempfiles
COOR_TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$COOR_TMP" ] ; then
    echo "ERROR: unable to create temporary files" 1>&2
    exit 1
fi
ATTR_TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$ATTR_TMP" ] ; then
    echo "ERROR: unable to create temporary files" 1>&2
    exit 1
fi

# restrict fs to one char
#FS=`echo "$GIS_OPT_fs" | awk '{printf("%c", $1)}'`

INPUT="$GIS_OPT_input"
if [ -n "$GIS_OPT_where" ] ; then
   v.extract in="$GIS_OPT_input" out=tmp_voutascdb_$$ where="$GIS_OPT_where" 1>&2
   INPUT=tmp_voutascdb_$$
fi

# extract
v.out.ascii "$INPUT" > "$COOR_TMP"

#assume layer =1
TABLE="`v.db.connect -g "$INPUT" | head -1 | cut -f2 -d' '`"
DATABASE="`v.db.connect -g "$INPUT" | head -1 | cut -f4 -d' '`"
DRIVER="`v.db.connect -g "$INPUT" | head -1 | cut -f5 -d' '`"

INNAME=`echo "$INPUT" | cut -f1 -d'@'`
if [ "$TABLE" != "$INNAME" ] ; then
   echo "Multiple tables: using first one [$TABLE]" 1>&2
fi

db.select -c table="$TABLE" database="$DATABASE" driver="$DRIVER" \
   sql="select cat,$GIS_OPT_columns from $TABLE" > "$ATTR_TMP"

# number of cat column from coor export
N="`head -1 "$COOR_TMP" | tr '|' '\n' | wc -l | awk '{print $1}'`"
if [ $N -lt 1 ] ; then
   echo "No point coordinates found in vector map (use v.type or v.to.points)" 1>&2
   exit 1
fi

# sort both by cat
sort -n --field-separator='|' --key=$N "$COOR_TMP" > "$COOR_TMP".s
sort -n --field-separator='|' "$ATTR_TMP" > "$ATTR_TMP".s

if [ -n "$GIS_OPT_output" ] ; then
    join -t '|' -1 $N -2 1 "$COOR_TMP".s "$ATTR_TMP".s > "$GIS_OPT_output"
    echo "`basename $0` done." 1>&2
else  # to stdout
    join -t '|' -1 $N -2 1 "$COOR_TMP".s "$ATTR_TMP".s
fi

#cleanup
rm -f "$COOR_TMP" "$ATTR_TMP" "$COOR_TMP".s "$ATTR_TMP".s
if [ -n "$GIS_OPT_where" ] ; then
   g.remove vect=tmp_voutascdb_$$ 1>&2
fi
