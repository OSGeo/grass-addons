#!/bin/sh
#
############################################################################
#
# MODULE:       v.points.cog
#
# AUTHOR(S):    Hamish Bowman
#
# PURPOSE:      Condense points or centroids sharing a common attribute into a single point
#
# COPYRIGHT:    (c) 2010 Hamish Bowman, and the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#% description: Condense points or centroids sharing a common attribute into a single point.
#% keywords: vector, cluster
#%End
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Name of input vector map
#% required : yes
#%end
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Name for output vector map
#% required : yes
#%end
#%option
#% key: column
#% type: string
#% description: Column containing common attribute
#% required : yes
#%end
#%option
#% key: layer
#% type: integer
#% answer: 1
#% description: Layer number
#% required: no
#%end

##%option
##% key: type
##% type: string
##% description: Feature type(s)
##% options: point,centroid
##% answer: point
##% required: no
##% multiple: yes
##%end


if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

MAP="$GIS_OPT_INPUT"
COLUMN="$GIS_OPT_COLUMN"
LAYER="$GIS_OPT_LAYER"

# check for input map
eval `g.findfile element=vector file="$MAP"`
if [ ! "$file" ] ; then
    g.message -e "Vector map <$MAP> does not exist."
    exit 1
fi

# check for column
if [ `v.info -c "$MAP" layer="$LAYER" --quiet | cut -f2 -d'|' | grep -c "^$COLUMN$"` -ne 1 ] ; then
    g.message -e "Column <$COLUMN> not found."
    exit 1
fi

# get column details so we can recreate it.
# The db.* modules need special care when querying from @another mapset
DB=`v.db.connect "$MAP" -g layer="$LAYER" fs='|' | cut -f4 -d'|'`
BASENAME=`echo "$MAP" | sed -e 's/@.*//'`
db.describe -c table="$BASENAME" database="$DB" > /dev/null
if [ $? -ne 0 ] ; then
   g.message -e "Unable to describe table"
   exit 1
fi
COLUMN_DESC=`db.describe -c table="$BASENAME" database="$DB" | grep " $COLUMN:" | cut -f3- -d:`


if [ `echo "$COLUMN_DESC" | grep -c CHARACTER` -eq 1 ] ; then
   COLUMN_TYPE="string"
   COLUMN_LEN=`echo "$COLUMN_DESC" | cut -f2 -d:`
   COLUMN_DEFN="varchar($COLUMN_LEN)"
else
   COLUMN_TYPE="number"
   COLUMN_DEFN=`echo "$COLUMN_DESC" | cut -f1 -d:`
fi

# cheap hack to avoid conflict
if [ "$COLUMN" = "cat" ] ; then
  OUT_COLUMN="cat_"
else
  OUT_COLUMN="$COLUMN"
fi


(
IFS='|'
for ITEM in `v.db.select "$MAP" -c column="$COLUMN" layer="$LAYER" | sort | uniq | tr '\n' '|'` ; do
   #echo "[$ITEM]"
   if [ "$COLUMN_TYPE" = "string" ] ; then
      WHERE_STR="$COLUMN = '$ITEM'"
   else
      WHERE_STR="$COLUMN = $ITEM"
   fi

   v.out.ascii "$MAP" column="$COLUMN" layer="$LAYER" where="$WHERE_STR" | \
     awk -F'|' \
      'BEGIN { sum_x=0; sum_y=0; i=0 }
       { sum_x += $1; sum_y += $2; i++ }
       END { if(i>0) { printf("%.15g|%.15g|%s\n", sum_x/i, sum_y/i, $4) } }'
done
) | v.in.ascii out="$GIS_OPT_OUTPUT" columns="x double, y double, $OUT_COLUMN $COLUMN_DEFN"
#echo columns="x double, y double, $OUT_COLUMN $COLUMN_DEFN"

retval=$?

# cleanup cheap hack
if [ $COLUMN = "cat" ] ; then
   v.db.dropcol map="$GIS_OPT_OUTPUT" column="cat_" --quiet
fi

exit $retval
