#!/bin/sh

############################################################################
#
# MODULE:     v.surf.nnbathy
#
# AUTHOR(S):  Hamish Bowman, Otago University, New Zealand
#		Based on r.surf.nnbathy by Maciej Sieczka
#
# PURPOSE:    Interpolate raster surface using the "nnbathy" natural
#             neighbor interpolation program.
#
# COPYRIGHT:  (c) 2014 Hamish Bowman, Maciej Sieczka, and the GRASS Development Team
#
# LICENSE:    This program is free software under the GNU General Public
#             License (>=v2). Read the file COPYING that comes with GRASS
#             for details.
#
#############################################################################

# NOTES:
#
# 1. Requires nnbathy executable v 1.75 or later. Follow the instruction in
#    html manual page to obtain it.
#
# 2. When creating the input raster map, make sure it's extents cover
#    your whole region of interest, the cells you wish to interplate on are
#    NULL, and the resolution is correct. Same as most GRASS raster modules
#    this one is region sensitive too.


#%Module
#% description: Interpolates a raster map using the nnbathy natural neighbor interpolation program.
#%End
#%Option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Name of input vector points map
#% guisection: Selection
#% required : no
#%End
#%Option
#% key: output
#% gisprompt: new,cell,raster
#% type: string
#% description: Name for output raster map
#% required : yes
#%End
#%Option
#% key: zcolumn
#% type: string
#% required: no
#% multiple: no
#% description: Name of the attribute column with values to be used for approximation (if layer>0)
#% guisection: Selection
#%End
#%Option
#% key: layer
#% type: integer
#% required: no
#% multiple: no
#% label: Layer number
#% description: If set to 0, z coordinates are used. (3D vector only)
#% answer: 1
#% gisprompt: old_layer,layer,layer_zero
#% guisection: Selection
#%End
#%Option
#% key: where
#% type: string
#% required: no
#% multiple: no
#% key_desc: sql_query
#% label: WHERE conditions of SQL statement without 'where' keyword
#% description: Example: income < 1000 and inhab >= 10000
#% guisection: Selection
#%End
#%option
#% key: alg
#% type: string
#% options: l,nn,ns
#% answer: nn
#% descriptions: l;Linear;nn;Sibson natural neighbor;ns;Non-Sibsonian natural neighbor
#% description: Interpolation algorithm
#%End
#%Option
#% key: file
#% type: string
#% gisprompt: old_file,file,input
#% label: Name of input text file
#% description: Containing x,y,z data as three space separated columns
#% required : no
#%End


if [ -z "$GISBASE" ]; then
  echo "ERROR: You must be in GRASS GIS to run this program." 1>&2
  exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ]; then
  exec g.parser "$0" "$@"
fi

if [ -n "$GIS_OPT_INPUT" ] && [ -n "$GIS_OPT_FILE" ] ; then
  g.message -e "Please specify either the 'input' or 'file' option, not both."
  exit 1
fi

if [ -z "$GIS_OPT_INPUT" ] && [ -z "$GIS_OPT_FILE" ] ; then
  g.message -e "Please specify either the 'input' or 'file' option."
  exit 1
fi

if [ -n "$GIS_OPT_FILE" ] && [ ! -e "$GIS_OPT_FILE" ] ; then
  g.message -e "File '$GIS_OPT_FILE' does not exist."
  exit 1
fi

# check if we have awk
if [ ! -x "`which awk`" ]; then
  g.message -e '"awk" executable required but not found.'
  exit 1
fi

# check if we have nnbathy
if [ ! -x "`which nnbathy`" ]; then
  g.message -e '"nnbathy" executable required but not found. Follow the instructions in v.surf.nnbathy manual to install.'
  exit 1
fi

# check nnbathy version
nnv=`nnbathy -v | sed 's/ /\n/g' | sort -nr | head -n1`
nnv_ok=`echo $nnv | awk '{ if ($0<1.76) {print 0} else {print 1} }'`

if [ $nnv_ok -eq 0 ]; then
  g.message -e '"nnbathy" version >= 1.76 is required.'
  exit 1
fi

# set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ]; then
  g.message -e 'Unable to create temporary files.' 1>&2
  exit 1
fi

# set environment so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

PROG=`basename $0`

# define cleanup procedure
proc_cleanup() {
  # Reset traps before normal script termination to avoid bogus ERROR message, as
  # we put a trap on signal 0.
  trap - 0 2 3 15 
  rm -f "$TMP" "$TMP.$PROG.input_xyz" "$TMP.$PROG.output_xyz" "$TMP.$PROG.output_grd"
}

# define run-time error handling procedure
proc_runtime_error() {
  g.message -e "There was an error at the script's run time. Please try to debug the problem if you can and let the GRASS developers know."
  exit 1
}

# define user-break procedure
proc_user_break() {
  g.message -e "User break!"
  proc_cleanup
  exit 1
}

# set trap for when script terminates
trap "proc_runtime_error" 0

# trap user break
trap "proc_user_break" 2 3 15


# assign main variables from user's input
INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
ALG="$GIS_OPT_ALG"


### DO IT ###

# Make script terminate (ie. emit signal 0) if any statement returns a
# non-0 value. Then we trap signal 0, which lets handle such errors.
# However, the trap on signal 0 must be reset before normal script
# termination to avoid a bogus ERROR message then - this is done in the
# cleanup procedure.
set -e

# grab the current region settings
eval `g.region -gu`

if [ -n "$GIS_OPT_INPUT" ] ; then
  # spit out coords + values to be interpolated
  ## FIXME: check if data is 3D or use output column
  # column=  (slow!!)
  TMPXYZ="$TMP.$PROG.input_xyz"
  
  if [ "$GIS_OPT_LAYER" -eq 0 ] ; then
    # 3D vector points
    LAYER=""
    COLUMN=""
  else
    LAYER="layer=$GIS_OPT_LAYER"
    if [ -n "$GIS_OPT_ZCOLUMN" ] ; then
      COLUMN="columns=$GIS_OPT_ZCOLUMN"
    else
      g.message -e "Name of z column required for 2D vector maps."
      exit 1
    fi
  fi

  if [ -n "$GIS_OPT_WHERE" ] ; then
    v.out.ascii -r input="$INPUT" output="$TMPXYZ" format=point fs=space \
       dp=15 where="$GIS_OPT_WHERE" $LAYER $COLUMN
  else
    v.out.ascii -r input="$INPUT" output="$TMPXYZ" format=point fs=space \
       dp=15 $LAYER $COLUMN
  fi

  if [ "$GIS_OPT_LAYER" -gt 0 ] ; then
    # crop away the cat column
    mv "$TMPXYZ" "$TMPXYZ.cat"
    cut -f1,2,4 -d' ' "$TMPXYZ.cat" > "$TMPXYZ"
    rm "$TMPXYZ.cat"
  fi

else
  TMPXYZ="$GIS_OPT_FILE"
fi


# set the working region for nnbathy (it's cell-center oriented)
nn_n=`echo $n | awk -v res="$nsres" '{printf "%.8f", $1 - res/2.0}'`
nn_s=`echo $s | awk -v res="$nsres" '{printf "%.8f", $1 + res/2.0}'`
nn_w=`echo $w | awk -v res="$ewres" '{printf "%.8f", $1 + res/2.0}'`
nn_e=`echo $e | awk -v res="$ewres" '{printf "%.8f", $1 - res/2.0}'`

null="NaN"
type="double"


#### interpolate
g.message '"nnbathy" is performing the interpolation now. This may take some time.'
g.message "Once it completes an 'All done.' message will be printed."


nnbathy -W 0 -P alg="$ALG" -n "${cols}x${rows}" \
	-x "$nn_w" "$nn_e" -y "$nn_n" "$nn_s" \
	-i "$TMPXYZ" \
       > "$TMP.$PROG.output_xyz"


# Y in "r.stats -1gn" output is in descending order, thus -y must be in
# MAX MIN order, not MIN MAX, for nnbathy not to produce a grid upside-down

# convert the X,Y,Z nnbathy output into a GRASS ASCII grid, then import with r.in.ascii:

# 1 create header
cat << EOF > "$TMP.$PROG.output_grd"
north: $n
south: $s
east: $e
west: $w
rows: $rows
cols: $cols
null: $null
type: $type
EOF

# 2 do the conversion
g.message "Converting nnbathy output to GRASS raster ..."

awk -v cols="$cols" '
BEGIN {col_cur=1; ORS=" "}
{
 if (col_cur==cols) {ORS="\n"; col_cur=0; print $3; ORS=" "}
		    else {print $3}
 col_cur++
}' "$TMP.$PROG.output_xyz" >> "$TMP.$PROG.output_grd"

# 3 import
r.in.ascii input="$TMP.$PROG.output_grd" output="$OUTPUT" --quiet

# store comand history in raster's metadata

if [ -n "$GIS_OPT_INPUT" ] ; then
  r.support map="$OUTPUT" history="v.surf.nnbathy alg=$ALG input=$INPUT output=$OUTPUT"
  #TODO: layer= where= zcolumn=
else
  r.support map="$OUTPUT" history="v.surf.nnbathy alg=$ALG input=$FILE output=$OUTPUT"
fi
r.support map="$OUTPUT" history=""
r.support map="$OUTPUT" history="nnbathy run syntax:"
r.support map="$OUTPUT" history=""
r.support map="$OUTPUT" history="nnbathy -W 0 -P alg=$ALG -n ${cols}x$rows "
r.support map="$OUTPUT" history="-x $nn_w $nn_e "
r.support map="$OUTPUT" history="-y $nn_n $nn_s "
r.support map="$OUTPUT" history="-i tmp_in > tmp_out"
r.support map="$OUTPUT" history=""

### ALL DONE ###

proc_cleanup

g.message "Done. <$GIS_OPT_OUTPUT> created."

