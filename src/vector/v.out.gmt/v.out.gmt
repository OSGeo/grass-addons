#!/bin/sh
################################################################################
#
# MODULE:       v.out.gmt
#
# AUTHOR(S):    Huidae Cho 2006-09-21
#               psbasemap code copied from r.out.gmt
#
# PURPOSE:      Output a GRASS vector to a GMT xy file
#
# COPYRIGHT:    (c) 2006 by the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
# REQUIRES:     GMT: The Generic Mapping Tools
#                 http://gmt.soest.hawaii.edu
#               awk
#
################################################################################
#
# TODO: xyz, points, color, label
#

#%module
#% description: Exports a GRASS vector map into a GMT xy file.
#%end
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Name of input vector map
#% required: yes
#%end
#%option
#% key: output
#% type: string
#% description: Base name of output file (taken from input map if not given)
#% required: no
#%end
#%option
#% key: width
#% type: string
#% description: Map width (e.g., 7in, 18cm)
#% answer: 7in
#%end
#%option
#% key: title
#% type: string
#% description: Map title (taken from output if not given)
#%end
#%option
#% key: xlabel
#% type: string
#% description: X tic label
#% answer: Easting (m)
#%end
#%option
#% key: ylabel
#% type: string
#% description: Y tic label
#% answer: Northing (m)
#%end
#%option
#% key: comment
#% type: string
#% description: Map comment ($scale for map scale in meters)
#% answer: Scale 1:$scale
#%end
#%flag
#% key: p
#% description: Display suggested GMT PostScript creation commands
#%end

if [ -z "$GISBASE" ]; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ]; then
    exec g.parser "$0" "$@"
fi

# check if we have awk
if ! echo test | awk '{print $0}' > /dev/null 2>&1; then
    echo "`basename $0`: awk required, please install awk/gawk first" 1>&2
    exit 1
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
export LC_NUMERIC=C

map_name="$GIS_OPT_INPUT"

if [ -z "$GIS_OPT_OUTPUT" ]; then
    output_base="$GIS_OPT_INPUT"
else
    output_base="$GIS_OPT_OUTPUT"
fi

if [ -z "$GIS_OPT_TITLE" ]; then
    title="$output_base"
else
    title="$GIS_OPT_TITLE"
fi

xlabel="$GIS_OPT_XLABEL"
ylabel="$GIS_OPT_YLABEL"
comment="$GIS_OPT_COMMENT"

output_xy="$output_base.xy"
output_ps="$output_base.ps"

# get our geographic extents
eval `g.region -gu`
eval `g.region -geu`

# preserve aspect ratio from UTM E,N coordinates:
aspect_ratio=`echo $ns_extent $ew_extent | awk '{printf("%f", $1 / $2)}'`

# setup the map width in inches
# this is going to affect how much information can be placed in the margins of
# the paper. commonly a printer will enforce a .25" margin...
map_width=`echo $GIS_OPT_WIDTH | sed -e 's/[a-zA-Z]//g'`
map_width_unit=`echo $GIS_OPT_WIDTH | sed -e 's/[0-9]//g' | cut -c1`

# calculate the map length based on the original aspect ratio
map_height=`echo $map_width $aspect_ratio | awk '{printf("%f", $1 * $2)}'`

# compute the scale in meters
# 39.37 inch/meter
# (round to a whole number of some sort?)
if [ "$map_width_unit" = "i" ]; then
    scale=`echo $ew_extent $map_width | awk '{printf("%d", ($1 * 39.37) / $2)}'`
else
    scale=`echo $ew_extent $map_width | awk '{printf("%d", $1 / $2)}'`
fi

# compute default grid ticks
# default units are meters
if [ `echo $aspect_ratio | cut -f1 -d'.'` -ge 1 ]; then
    max_extent=$ns_extent
else
    max_extent=$ew_extent
fi
# try to figure out something useful  (how to get awk to do log10()??)
# what is this for?
#tic_interval=`echo $max_extent | awk '{printf("%d", log($1)/log(10))}'`
tic_interval=`echo $max_extent | awk '{printf("%d", int(($1/60)/100)*100)}'`
annotated_tic_interval=`expr $tic_interval '*' 10`

# setup the comment at the bottom of the map
eval "comment=\"$comment\""

v.out.ascii "$map_name" format=standard | awk '{
	# line or boundary
	if($1 == "L" || $1 == "B"){
		npnts = $2
		draw = 1
		print ">"
		next
	}
	if(!draw)
		next
	print $0
	if(!(--npnts))
		draw = 0
}' > "$output_xy"

# show suggested PostScript creation commands
if [ $GIS_FLAG_P -eq 1 ]; then
    cat<<EOT
psbasemap \\
    -JX$map_width$map_width_unit/$map_height$map_width_unit \\
    -R$w/$e/$s/$n \\
    -B:."$title":f${tic_interval}a$annotated_tic_interval:"$xlabel":/f${tic_interval}a$annotated_tic_interval:"$ylabel": \\
    -U"$comment" \\
    -V -K > $output_ps
psxy $output_xy -JX -R -M -O -V -K >> $output_ps
EOT
fi

exit 0
