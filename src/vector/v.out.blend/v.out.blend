#!/bin/bash
#
################################################################################
#
# MODULE:		v.out.blend
# AUTHOR(S):		Vincent Bain
# PURPOSE:		outputs a 3d delaunay triangulation (.ply file) from a 3d vector pointcloud and optionally an image to drape on (.tif file), e.g. within blender

# COPYRIGHT:		(C)Toraval-Vincent Bain 2014-05-05
#
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
# VERSION:		1.0
#			test version
#			
################################################################################


#%Module
#% description: blender user-oriented add-on. Outputs a 3d delaunay triangulation (.ply file) from a 3d vector pointcloud and optionally an image to drape on (.tif file), e.g. within blender
#%End

#%Option
#% key: vinput
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Name of 3d vector point to export
#% gisprompt: old,vector,vector
#% guisection: Required
#%End

#%Option
#% key: rinput
#% type: string
#% required: no
#% multiple: no
#% key_desc: name
#% description: Name of raster to export
#% gisprompt: old,cell,raster
#% guisection: Optional
#%End

#%Option
#% key: dsn
#% type: string
#% required: no
#% multiple: no
#% label: output directory name
#% description: directory for storage. Default : current mapset
#%End


if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi


#---------------------------------------------
# Get environnment
GIS_DBASE=`g.gisenv get=GISDBASE`
GIS_LOCATION_NAME=`g.gisenv get=LOCATION_NAME`
GIS_MAPSET=`g.gisenv get=MAPSET`
GIS_MAP_PATH="${GIS_DBASE}/${GIS_LOCATION_NAME}/${GIS_MAPSET}"
#---------------------------------------------

#---------------------------------------------
# Check for awk
if ! echo test | awk '{print $0}' > /dev/null 2>&1; then
	g.message -e "`basename $0`: awk required, please install awk/gawk first" 1>&2
	exit 1
fi
#---------------------------------------------

#---------------------------------------------
# Check for pvpython
if [ ! -x "`which pvpython`" ] ; then
	g.message -e "pvpython (from paraview) required, install it first"
	exit 1
fi
#---------------------------------------------

#---------------------------------------------
# save command line
if [ "$1" != "@ARGS_PARSED@" ] ; then
    CMDLINE=`basename "$0"`
    for arg in "$@" ; do
        CMDLINE="$CMDLINE \"$arg\""
    done
    export CMDLINE
	exec g.parser "$0" "$@"
fi
#---------------------------------------------

#---------------------------------------------
# Functions handling user break

Cleanup()
{
	if [ $vinput ]; then g.remove vect=$vinput 2>/dev/null; fi
	if [ $rinput ]; then g.remove rast=$rinput 2>/dev/null; fi
}
Cleanexit()
{
	g.message -w "User break !"
	Cleanup
	exit 1
}
trap "Cleanexit" 2 3 15
#---------------------------------------------

#---------------------------------------------
# switching working directory
if [ ! $GIS_OPT_DSN ] ; then
	dsn=`dirname "$HISTFILE"`
else
	dsn=$GIS_OPT_DSN
fi
cd $dsn
#---------------------------------------------

#---------------------------------------------
# retrieving region bounds
eval `g.region -g`
#---------------------------------------------

vinput="voutblend_$$"
rinput="voutblend_$$"
g.copy vect=$GIS_OPT_VINPUT,$vinput
#---------------------------------------------
# fitting the input vector to the current region (possible subset of points), then fitting region on this set of points
v.edit -r map=$vinput type=point tool=delete bbox=$w,$s,$e,$n
g.region -p vect=$vinput
#---------------------------------------------

#---------------------------------------------
# running v.out.vtk
v.out.vtk input=$vinput output=${GIS_OPT_VINPUT}.vtk
g.message "File ${GIS_OPT_VINPUT}.vtk written to $dsn"
#---------------------------------------------

#---------------------------------------------
# retrieving variables $west $south $east $north $bottom
eval `v.info -g map=$vinput`
#---------------------------------------------

#---------------------------------------------
# shifting and scaling dataset to fit with blender coordinate space
# first let's get the number of selected points
n=`sed -n '5'p ${GIS_OPT_VINPUT}.vtk | awk '{print$2}'`
n=$((n+5))

# we save the file header (6 lines)
sed -n '1,5'p ${GIS_OPT_VINPUT}.vtk > ${GIS_OPT_VINPUT}rec.vtk

# we adjust 3d coords
# west=`echo "scale=3;$west - 5" | bc`
# south=`echo "scale=3;$south - 5" | bc`
# bottom=`echo "scale=3;$bottom - 5" | bc`
sed -n '6,'$n''p ${GIS_OPT_VINPUT}.vtk | awk -v west="$west" -v south="$south" -v bottom="$bottom" '{print ($1-west)/10,($2-south)/10,($3-bottom)/10,""}' >> ${GIS_OPT_VINPUT}rec.vtk
g.message "File ${GIS_OPT_VINPUT}rec.vtk written to $dsn, at scale 0.1 and the following shifts:
x: -$west
y: -$south
z : -$bottom"

# we give up with file tail : perhaps someone will need to keep scalar values, here we don't
# count=`wc -l ${vinput} | awk '{print $1}' `
# n=$(( n + 1 ))
# count=$(( count - 1 ))
# sed -n $n,${count}p ${GIS_OPT_VINPUT}.vtk >>${GIS_OPT_VINPUT}rec.vtk
# sed -n '$'p ${GIS_OPT_VINPUT}.vtk | awk -v bottom
#---------------------------------------------

#---------------------------------------------
# triangluating the pointcloud with pvpython (paraview python console)

echo "
from paraview.simple import *
pointsrec = LegacyVTKReader( FileNames=['"${GIS_OPT_VINPUT}rec.vtk"'] )
Delau = Delaunay2D()
DataRepresentation3 = Show()
writer = CreateWriter('"${GIS_OPT_VINPUT}rec.ply"',Delau)
writer.FileType='Ascii'
writer.UpdatePipeline()
del writer" | pvpython 

g.message "File ${GIS_OPT_VINPUT}rec.ply written to $dsn"
#---------------------------------------------

#---------------------------------------------
# exporting the optional raster to tiff image
if [ $GIS_OPT_RINPUT ] ; then
	#---------------------------------------------
	# r.mapcalc pour détourer le raster à la taille de la région
	echo "$rinput = $GIS_OPT_RINPUT" | r.mapcalc
	r.out.tiff input=$rinput output=${GIS_OPT_RINPUT}.tif compression=lzw
	g.message "File ${GIS_OPT_RINPUT}.tif written to $dsn"
fi

Cleanup
exit 0
